{
  "name": "karma-webpack",
  "version": "1.6.0",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "description": "Use webpack with karma",
  "peerDependencies": {
    "webpack": "^1.4.0"
  },
  "dependencies": {
    "async": "~0.9.0",
    "loader-utils": "^0.2.5",
    "lodash": "^3.8.0",
    "source-map": "^0.1.41",
    "webpack-dev-middleware": "^1.0.11"
  },
  "devDependencies": {
    "karma": ">=0.13.2 < 1",
    "karma-mocha": "~0.1.9",
    "karma-chrome-launcher": "~0.1.5",
    "karma-spec-reporter": "~0.0.16",
    "coffee-loader": "~0.7.2"
  },
  "license": "MIT",
  "homepage": "http://github.com/webpack/karma-webpack",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/karma-webpack.git"
  },
  "main": "index.js",
  "gitHead": "29fb1d801158f29cb0eb784edff69356705a7b74",
  "readme": "# karma-webpack\n\n## Installation\n\n``` sh\nnpm install --save-dev karma-webpack\n```\n\n## Usage\n\n``` javascript\n// Karma configuration\n\nmodule.exports = function(config) {\n\tconfig.set({\n\t\t// ... normal karma configuration\n\n\t\tfiles: [\n\t\t\t// all files ending in \"_test\"\n\t\t\t'test/*_test.js',\n\t\t\t'test/**/*_test.js'\n\t\t\t// each file acts as entry point for the webpack configuration\n\t\t],\n\n\t\tpreprocessors: {\n\t\t\t// add webpack as preprocessor\n\t\t\t'test/*_test.js': ['webpack'],\n\t\t\t'test/**/*_test.js': ['webpack']\n\t\t},\n\n\t\twebpack: {\n\t\t\t// karma watches the test entry points\n\t\t\t// (you don't need to specify the entry option)\n\t\t\t// webpack watches dependencies\n\n\t\t\t// webpack configuration\n\t\t},\n\n\t\twebpackMiddleware: {\n\t\t\t// webpack-dev-middleware configuration\n\t\t\t// i. e.\n\t\t\tnoInfo: true\n\t\t},\n\n\t\tplugins: [\n\t\t\trequire(\"karma-webpack\")\n\t\t]\n\n\t});\n};\n```\n\n## Alternative usage\n\nThis configuration is more performant, but you cannot run single test anymore (only the complete suite).\n\nThe above configuration generate a webpack bundle for each test. For many testcases this can result in many big files. The alterative configuration creates a single bundle with all testcases.\n\n``` javascript\n\t\tfiles: [\n\t\t\t// only specify one entry point\n\t\t\t// and require all tests in there\n\t\t\t'test/test_index.js'\n\t\t],\n\n\t\tpreprocessors: {\n\t\t\t// add webpack as preprocessor\n\t\t\t'test/test_index.js': ['webpack']\n\t\t},\n```\n\n``` javascript\n// test/test_index.js\n\n// require all modules ending in \"_test\" from the\n// current directory and all subdirectories\nvar testsContext = require.context(\".\", true, /_test$/);\ntestsContext.keys().forEach(testsContext);\n```\n\nEvery test file is required using the [require.context](http://webpack.github.io/docs/context.html#require-context) and compiled with webpack into one test bundle.\n\n## Source Maps\n\nYou can use the `karma-sourcemap-loader` to get the source maps generated for your test bundle.\n\n```\nnpm install --save-dev karma-sourcemap-loader\n```\n\nAnd then add it to your preprocessors\n\n``` javascript\npreprocessors: {\n\t'test/test_index.js': ['webpack', 'sourcemap']\n}\n```\n\nAnd tell webpack to generate sourcemaps\n\n``` javascript\nwebpack: {\n  // ...\n\tdevtool: 'inline-source-map'\n}\n```\n\n## Options\n\nThis is the full list of options you can specify in your Karma config.\n\n### webpack\n\nWebpack configuration.\n\n### webpackMiddleware\n\nConfiguration for webpack-dev-middleware.\n\n## License\n\nCopyright 2014-2015 Tobias Koppers\n\n[MIT](http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/webpack/karma-webpack/issues"
  },
  "_id": "karma-webpack@1.6.0",
  "_shasum": "043edb5563d69f700b4bd3fb953b81421788f875",
  "_from": "dignifiedquire/karma-webpack#29fb1d801158f29cb0eb784edff69356705a7b74",
  "_resolved": "git://github.com/dignifiedquire/karma-webpack.git#29fb1d801158f29cb0eb784edff69356705a7b74"
}
