var fs = require('fs');
var path = require('path');
var glob = require('globby');
var extend = require('xtend');
exports.DEFAULTS = {
    target: 'es5',
    module: 'commonjs',
    declaration: false,
    noImplicitAny: false,
    removeComments: true
};
var CONFIG_FILENAME = 'tsconfig.json';
function resolve(dir, cb) {
    var configFile = path.resolve(dir, CONFIG_FILENAME);
    fileExists(configFile, function (err, exists) {
        if (err) {
            return cb(err);
        }
        if (exists) {
            return cb(null, configFile);
        }
        var parentDir = path.dirname(dir);
        if (dir === parentDir) {
            return cb(null, undefined);
        }
        return resolve(parentDir, cb);
    });
}
exports.resolve = resolve;
function resolveSync(dir) {
    var configFile = path.resolve(dir, CONFIG_FILENAME);
    if (fileExistsSync(configFile)) {
        return configFile;
    }
    var parentDir = path.dirname(dir);
    if (dir === parentDir) {
        return;
    }
    return resolveSync(parentDir);
}
exports.resolveSync = resolveSync;
function load(dir, cb) {
    return resolve(dir, function (err, filename) {
        if (err) {
            return cb(err);
        }
        if (!filename) {
            return cb(new Error('No config file found'));
        }
        return readFile(filename, cb);
    });
}
exports.load = load;
function loadSync(dir) {
    var filename = resolveSync(dir);
    if (!filename) {
        throw new Error('No config file found');
    }
    return readFileSync(filename);
}
exports.loadSync = loadSync;
function readFile(filename, cb) {
    fs.readFile(filename, 'utf8', function (err, contents) {
        if (err) {
            return cb(err);
        }
        return parseFile(contents, filename, cb);
    });
}
exports.readFile = readFile;
function readFileSync(filename) {
    var contents = fs.readFileSync(filename, 'utf8');
    return parseFileSync(contents, filename);
}
exports.readFileSync = readFileSync;
function parseFile(contents, filename, cb) {
    var data;
    try {
        data = parseContents(contents);
    }
    catch (err) {
        cb(err);
        return;
    }
    resolveConfig(data, filename, cb);
}
exports.parseFile = parseFile;
function parseFileSync(contents, filename) {
    var data = parseContents(contents);
    return resolveConfigSync(data, filename);
}
exports.parseFileSync = parseFileSync;
function resolveConfig(data, filename, cb) {
    var filesGlob = getGlob(data);
    if (filesGlob) {
        return glob(filesGlob, {
            cwd: path.dirname(filename)
        }, function (err, files) {
            if (err) {
                return cb(err);
            }
            return cb(null, sanitizeConfig(data, files, filename));
        });
    }
    process.nextTick(function () { return cb(null, sanitizeConfig(data, null, filename)); });
}
exports.resolveConfig = resolveConfig;
function resolveConfigSync(data, filename) {
    var filesGlob = getGlob(data);
    if (filesGlob) {
        return sanitizeConfig(data, glob.sync(filesGlob, { cwd: path.dirname(filename) }), filename);
    }
    return sanitizeConfig(data, null, filename);
}
exports.resolveConfigSync = resolveConfigSync;
function getGlob(data) {
    if (Array.isArray(data.filesGlob)) {
        return data.filesGlob;
    }
    return Array.isArray(data.files) ? null : ['./**/*.ts'];
}
function sanitizeConfig(data, files, filename) {
    var config = {
        compilerOptions: extend(exports.DEFAULTS, data.compilerOptions),
        files: Array.isArray(data.files) ? data.files.slice() : []
    };
    var dir = path.dirname(filename);
    config.files = config.files
        .concat(files || [])
        .map(function (filename) { return path.resolve(dir, filename); })
        .filter(function (filename, index, arr) { return arr.indexOf(filename) === index; });
    return config;
}
function parseContents(contents) {
    try {
        return JSON.parse(contents);
    }
    catch (err) {
        throw new Error('Unable to parse configuration file: ' + err.message);
    }
}
function fileExists(filename, cb) {
    fs.stat(filename, function (err, stats) {
        if (err) {
            return cb(null, false);
        }
        return cb(null, stats.isFile() || stats.isFIFO());
    });
}
function fileExistsSync(filename) {
    try {
        var stats = fs.statSync(filename);
        return stats.isFile() || stats.isFIFO();
    }
    catch (e) {
        return false;
    }
}
//# sourceMappingURL=tsconfig.js.map