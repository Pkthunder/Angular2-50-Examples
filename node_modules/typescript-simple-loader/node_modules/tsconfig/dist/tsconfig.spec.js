var chai_1 = require('chai');
var path_1 = require('path');
var tsconfig = require('./tsconfig');
describe('tsconfig', function () {
    var tests = [
        {
            path: path_1.join(__dirname, '../..'),
            error: 'No config file found'
        },
        {
            path: path_1.join(__dirname, '../tests/invalidfile'),
            error: 'Unable to parse configuration file: Unexpected token s'
        },
        {
            path: path_1.join(__dirname, '../tests/valid'),
            result: {
                compilerOptions: {
                    target: 'es5',
                    module: 'commonjs',
                    declaration: false,
                    noImplicitAny: true,
                    out: '../../built/local/tsc.js',
                    removeComments: true,
                    sourceMap: true,
                    preserveConstEnums: true
                },
                files: [
                    path_1.join(__dirname, '../tests/valid/src/foo.ts')
                ]
            },
            filename: path_1.join(__dirname, '../tests/valid/tsconfig.json')
        }
    ];
    describe('sync', function () {
        tests.forEach(function (test) {
            describe(test.path, function () {
                it('should try to find config', function () {
                    var result;
                    try {
                        result = tsconfig.loadSync(test.path);
                    }
                    catch (err) {
                        chai_1.expect(err.message).to.equal(test.error);
                        return;
                    }
                    chai_1.expect(result).to.deep.equal(test.result);
                });
                if (test.filename) {
                    it('should resolve filename', function () {
                        chai_1.expect(tsconfig.resolveSync(test.path)).to.equal(test.filename);
                    });
                }
            });
        });
    });
    describe('async', function () {
        tests.forEach(function (test) {
            describe(test.path, function () {
                it('should try to find config', function (done) {
                    tsconfig.load(test.path, function (err, config) {
                        if (err) {
                            chai_1.expect(err.message).to.equal(test.error);
                        }
                        else {
                            chai_1.expect(config).to.deep.equal(test.result);
                        }
                        return done();
                    });
                });
                if (test.filename) {
                    it('should resolve filename', function (done) {
                        tsconfig.resolve(test.path, function (err, filename) {
                            chai_1.expect(filename).to.equal(test.filename);
                            return done(err);
                        });
                    });
                }
            });
        });
    });
});
//# sourceMappingURL=tsconfig.spec.js.map