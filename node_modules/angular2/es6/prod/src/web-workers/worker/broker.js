import { print, isPresent, DateWrapper, stringify } from "../../facade/lang";
import { PromiseWrapper } from "angular2/src/facade/async";
import { ListWrapper, StringMapWrapper } from "../../facade/collection";
import { Serializer } from "angular2/src/web-workers/shared/serializer";
export class MessageBroker {
    constructor(_messageBus) {
        this._messageBus = _messageBus;
        this._pending = new Map();
        this._messageBus.source.listen((data) => this._handleMessage(data['data']));
    }
    _generateMessageId(name) {
        var time = stringify(DateWrapper.toMillis(DateWrapper.now()));
        var iteration = 0;
        var id = name + time + stringify(iteration);
        while (isPresent(this._pending[id])) {
            id = `${name}${time}${iteration}`;
            iteration++;
        }
        return id;
    }
    runOnUiThread(args) {
        var completer = PromiseWrapper.completer();
        var id = this._generateMessageId(args.type + args.method);
        this._pending.set(id, completer.resolve);
        PromiseWrapper.catchError(completer.promise, (err, stack) => {
            print(err);
            completer.reject(err, stack);
        });
        var fnArgs = [];
        if (isPresent(args.args)) {
            ListWrapper.forEach(args.args, (argument) => {
                fnArgs.push(Serializer.serialize(argument.value, argument.type));
            });
        }
        // TODO(jteplitz602): Create a class for these messages so we don't keep using StringMap
        var message = { 'type': args.type, 'method': args.method, 'args': fnArgs, 'id': id };
        this._messageBus.sink.send(message);
        return completer.promise;
    }
    _handleMessage(message) {
        var data = new MessageData(message);
        // TODO(jteplitz602): replace these strings with messaging constants
        var id = data.value.id;
        if (this._pending.has(id)) {
            this._pending.get(id)(data.value);
            this._pending.delete(id);
        }
    }
}
class MessageData {
    constructor(data) {
        this.type = StringMapWrapper.get(data, "type");
        if (StringMapWrapper.contains(data, "value")) {
            this.value = new MessageResult(StringMapWrapper.get(data, "value"));
        }
        else {
            this.value = null;
        }
    }
}
class MessageResult {
    constructor(result) {
        this.id = StringMapWrapper.get(result, "id");
        this.value = StringMapWrapper.get(result, "value");
    }
}
export class FnArg {
    constructor(value, type) {
        this.value = value;
        this.type = type;
    }
}
export class UiArguments {
    constructor(type, method, args) {
        this.type = type;
        this.method = method;
        this.args = args;
    }
}
//# sourceMappingURL=broker.js.map