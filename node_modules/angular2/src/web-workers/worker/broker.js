'use strict';var lang_1 = require("../../facade/lang");
var async_1 = require("angular2/src/facade/async");
var collection_1 = require("../../facade/collection");
var serializer_1 = require("angular2/src/web-workers/shared/serializer");
var MessageBroker = (function () {
    function MessageBroker(_messageBus) {
        var _this = this;
        this._messageBus = _messageBus;
        this._pending = new Map();
        this._messageBus.source.listen(function (data) { return _this._handleMessage(data['data']); });
    }
    MessageBroker.prototype._generateMessageId = function (name) {
        var time = lang_1.stringify(lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now()));
        var iteration = 0;
        var id = name + time + lang_1.stringify(iteration);
        while (lang_1.isPresent(this._pending[id])) {
            id = "" + name + time + iteration;
            iteration++;
        }
        return id;
    };
    MessageBroker.prototype.runOnUiThread = function (args) {
        var completer = async_1.PromiseWrapper.completer();
        var id = this._generateMessageId(args.type + args.method);
        this._pending.set(id, completer.resolve);
        async_1.PromiseWrapper.catchError(completer.promise, function (err, stack) {
            lang_1.print(err);
            completer.reject(err, stack);
        });
        var fnArgs = [];
        if (lang_1.isPresent(args.args)) {
            collection_1.ListWrapper.forEach(args.args, function (argument) {
                fnArgs.push(serializer_1.Serializer.serialize(argument.value, argument.type));
            });
        }
        // TODO(jteplitz602): Create a class for these messages so we don't keep using StringMap
        var message = { 'type': args.type, 'method': args.method, 'args': fnArgs, 'id': id };
        this._messageBus.sink.send(message);
        return completer.promise;
    };
    MessageBroker.prototype._handleMessage = function (message) {
        var data = new MessageData(message);
        // TODO(jteplitz602): replace these strings with messaging constants
        var id = data.value.id;
        if (this._pending.has(id)) {
            this._pending.get(id)(data.value);
            this._pending.delete(id);
        }
    };
    return MessageBroker;
})();
exports.MessageBroker = MessageBroker;
var MessageData = (function () {
    function MessageData(data) {
        this.type = collection_1.StringMapWrapper.get(data, "type");
        if (collection_1.StringMapWrapper.contains(data, "value")) {
            this.value = new MessageResult(collection_1.StringMapWrapper.get(data, "value"));
        }
        else {
            this.value = null;
        }
    }
    return MessageData;
})();
var MessageResult = (function () {
    function MessageResult(result) {
        this.id = collection_1.StringMapWrapper.get(result, "id");
        this.value = collection_1.StringMapWrapper.get(result, "value");
    }
    return MessageResult;
})();
var FnArg = (function () {
    function FnArg(value, type) {
        this.value = value;
        this.type = type;
    }
    return FnArg;
})();
exports.FnArg = FnArg;
var UiArguments = (function () {
    function UiArguments(type, method, args) {
        this.type = type;
        this.method = method;
        this.args = args;
    }
    return UiArguments;
})();
exports.UiArguments = UiArguments;
//# sourceMappingURL=broker.js.map