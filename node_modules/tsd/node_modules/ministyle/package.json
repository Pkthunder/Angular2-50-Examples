{
  "name": "ministyle",
  "description": "Minimal chainable semantic output styler/writer",
  "version": "0.1.4",
  "homepage": "https://github.com/Bartvds/ministyle",
  "author": {
    "name": "Bart van der Schoor",
    "url": "https://github.com/Bartvds"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Bartvds/ministyle.git"
  },
  "bugs": {
    "url": "https://github.com/Bartvds/ministyle/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Bartvds/ministyle/blob/master/LICENSE-MIT"
    }
  ],
  "keywords": [
    "cli",
    "text",
    "ansi",
    "color",
    "stream",
    "adapter",
    "style"
  ],
  "main": "lib/index.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.0",
    "grunt-mocha-test": "~0.7.0",
    "mocha-unfunk-reporter": "~0.3.6",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.7.2",
    "jshint-path-reporter": "~0.1.3",
    "chai": "~1.8.1"
  },
  "readme": "# ministyle\n\n[![Build Status](https://secure.travis-ci.org/Bartvds/ministyle.png?branch=master)](http://travis-ci.org/Bartvds/ministyle) [![Dependency Status](https://gemnasium.com/Bartvds/ministyle.png)](https://gemnasium.com/Bartvds/ministyle) [![NPM version](https://badge.fury.io/js/ministyle.png)](http://badge.fury.io/js/ministyle)\n\n> Minimal semantic output styler API with default implementations.\n\nA pluggable output styler/coloriser interface to embed in (development) tools and reporters. Offers a standard interface for customisable styled text output. The minimalistic API allows for overwrites to suit any environment.\n\nIntend as companion to [miniwrite](https://github.com/Bartvds/miniwrite) (et al).\n\n## API\n\nMain usage:\n````js\n// standard console colors\nvar ms = ministyle.ansi();\n\n// semantic stylers (and color conventions)\nvar str = ms.muted('ignorable grey');\nvar str = ms.plain('plain main');\nvar str = ms.accent('flashy cyan');\nvar str = ms.signal('bright magenta');\nvar str = ms.success('good green');\nvar str = ms.warning('annoying yellow');\nvar str = ms.error('bad red');\n\n// usage\nconsole.log('this is ' + ms.success('very amaze'));\n````\n\nBundled implementations:\n\n````js\n// default\nvar ms = ministyle.base();\n// return as-is\nvar ms = ministyle.plain();\n// ansi terminal codes\nvar ms = ministyle.ansi();\n\n// html spans with default colors\nvar ms = ministyle.html();\n// html spans with css class\nvar ms = ministyle.css();\n\n// colors.js getters\nvar ms = ministyle.colorjs();\n// grunt v0.4.x\nvar ms = ministyle.grunt();\n\n// blank chars\nvar ms = ministyle.empty();\n\n// dev style wraps with [style:names])\nvar ms = ministyle.dev();\n````\n\n### Advanced sub types\n\nApply each style in-order\n````js\n// standard methods will pass the value though each sub-style and return the result\nvar ms = ministyle.stack(styles);\nms.enabled = true;\nms.stack = [];\n````\n\nPeek and update string:\n````js\n// standard methods pass value through callback\nvar ms = ministyle.peek(callback, main, alt?);\nms.enabled = true;\nms.callback = function(str, type, main, alt); //return new string, or false to send input to alt\nms.target = otherStyleA;\nms.alt = otherStyleB;\n````\n\nToggle to alternative:\n````js\n// standard methods will use main if enabled, otherwise alt\nvar ms = ministyle.toggle(main, alt?);\nms.main = otherStyleA;\nms.alt = otherStyleB;\nms.enabled = true;\nms.toggle();\n// hacky\nms.active = otherStyleC; \n````\n\n\n### Build your own\n\n````js\nvar obj = {\n\tplain: function (str) {\n\t\treturn str;\n\t},\n\tsuccess: function (str) {\n\t\treturn str;\n\t},\n\taccent: function (str) {\n\t\treturn str;\n\t},\n\tsignal: function (str) {\n\t\treturn str;\n\t},\n\twarning: function (str) {\n\t\treturn str;\n\t},\n\terror: function (str) {\n\t\treturn str;\n\t},\n\tmuted: function (str) {\n\t\treturn str;\n\t}\n};\n````\n\n### Examples\n\nMake it bigger:\n````js\nvar ms = ministyle.plain();\nms.error = ms.success = function(str) {\n\treturn str.toUpperCase();\n};\n````\n\nSafe html:\n````js\nvar ms = ministyle.peek(ministyle.escapeHTML, ministyle.css());\n````\n\n## Installation\n\n```shell\n$ npm install ministyle --save\n```\n\n## Future\n\n1. Code/style generator to replicate style-type logic (needs to be efficient though).\n\n## History\n\n* 0.1.4 - Update to fix npm's README\n* 0.1.2 - Added signal colour, enabled strict mode, split in internal modules\n* 0.1.0 - Added tests, publishing to npm.\n* 0.0.1 - Extracted styling from [miniwrite](https://github.com/Bartvds/miniwrite).\n\n## Build\n\nInstall development dependencies in your git checkout:\n\n    $ npm install\n\nBuild and run tests:\n\n    $ grunt\n\nSee the `Gruntfile.js` for additional commands.\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n*Note:* this is an opinionated module: please create a [ticket](https://github.com/Bartvds/ministyle/issues) to discuss any big ideas. Pull requests for bug fixes are of course always welcome. \n\n## License\n\nCopyright (c) 2013 Bart van der Schoor\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "ministyle@0.1.4",
  "_from": "ministyle@>=0.1.3 <0.2.0"
}
