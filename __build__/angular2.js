webpackJsonp([1,0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(268);
	__webpack_require__(216);
	__webpack_require__(217);
	module.exports = __webpack_require__(4);


/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	/// <reference path="../../globals.d.ts" />
	var _global = (typeof window === 'undefined' ? global : window);
	exports.global = _global;
	exports.Type = Function;
	function getTypeNameForDebugging(type) {
	    return type['name'];
	}
	exports.getTypeNameForDebugging = getTypeNameForDebugging;
	var BaseException = (function (_super) {
	    __extends(BaseException, _super);
	    function BaseException(message, originalException, originalStack) {
	        _super.call(this, message);
	        this.message = message;
	        this.originalException = originalException;
	        this.originalStack = originalStack;
	        this.stack = (new Error(message)).stack;
	    }
	    BaseException.prototype.toString = function () { return this.message; };
	    return BaseException;
	})(Error);
	exports.BaseException = BaseException;
	function makeTypeError(message) {
	    return new TypeError(message);
	}
	exports.makeTypeError = makeTypeError;
	exports.Math = _global.Math;
	exports.Date = _global.Date;
	var assertionsEnabled_ = typeof _global['assert'] !== 'undefined';
	function assertionsEnabled() {
	    return assertionsEnabled_;
	}
	exports.assertionsEnabled = assertionsEnabled;
	// TODO: remove calls to assert in production environment
	// Note: Can't just export this and import in in other files
	// as `assert` is a reserved keyword in Dart
	_global.assert = function assert(condition) {
	    if (assertionsEnabled_) {
	        _global['assert'].call(condition);
	    }
	};
	function ENUM_INDEX(value) {
	    return value;
	}
	exports.ENUM_INDEX = ENUM_INDEX;
	// This function is needed only to properly support Dart's const expressions
	// see https://github.com/angular/ts2dart/pull/151 for more info
	function CONST_EXPR(expr) {
	    return expr;
	}
	exports.CONST_EXPR = CONST_EXPR;
	function CONST() {
	    return function (target) { return target; };
	}
	exports.CONST = CONST;
	function ABSTRACT() {
	    return function (t) { return t; };
	}
	exports.ABSTRACT = ABSTRACT;
	// Note: This is only a marker annotation needed for ts2dart.
	// This is written so that is can be used as a Traceur annotation
	// or a Typescript decorator.
	function IMPLEMENTS(_) {
	    return function (t) { return t; };
	}
	exports.IMPLEMENTS = IMPLEMENTS;
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function isString(obj) {
	    return typeof obj === "string";
	}
	exports.isString = isString;
	function isFunction(obj) {
	    return typeof obj === "function";
	}
	exports.isFunction = isFunction;
	function isType(obj) {
	    return isFunction(obj);
	}
	exports.isType = isType;
	function isStringMap(obj) {
	    return typeof obj === 'object' && obj !== null;
	}
	exports.isStringMap = isStringMap;
	function isPromise(obj) {
	    return obj instanceof _global.Promise;
	}
	exports.isPromise = isPromise;
	function isArray(obj) {
	    return Array.isArray(obj);
	}
	exports.isArray = isArray;
	function isNumber(obj) {
	    return typeof obj === 'number';
	}
	exports.isNumber = isNumber;
	function isDate(obj) {
	    return obj instanceof exports.Date && !isNaN(obj.valueOf());
	}
	exports.isDate = isDate;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    return token.toString();
	}
	exports.stringify = stringify;
	var StringWrapper = (function () {
	    function StringWrapper() {
	    }
	    StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	    StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	    StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	    StringWrapper.equals = function (s, s2) { return s === s2; };
	    StringWrapper.replace = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.replaceAll = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.toUpperCase = function (s) { return s.toUpperCase(); };
	    StringWrapper.toLowerCase = function (s) { return s.toLowerCase(); };
	    StringWrapper.startsWith = function (s, start) { return s.startsWith(start); };
	    StringWrapper.substring = function (s, start, end) {
	        if (end === void 0) { end = null; }
	        return s.substring(start, end === null ? undefined : end);
	    };
	    StringWrapper.replaceAllMapped = function (s, from, cb) {
	        return s.replace(from, function () {
	            var matches = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                matches[_i - 0] = arguments[_i];
	            }
	            // Remove offset & string from the result array
	            matches.splice(-2, 2);
	            // The callback receives match, p1, ..., pn
	            return cb(matches);
	        });
	    };
	    StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	    StringWrapper.compare = function (a, b) {
	        if (a < b) {
	            return -1;
	        }
	        else if (a > b) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    return StringWrapper;
	})();
	exports.StringWrapper = StringWrapper;
	var StringJoiner = (function () {
	    function StringJoiner(parts) {
	        if (parts === void 0) { parts = []; }
	        this.parts = parts;
	    }
	    StringJoiner.prototype.add = function (part) { this.parts.push(part); };
	    StringJoiner.prototype.toString = function () { return this.parts.join(""); };
	    return StringJoiner;
	})();
	exports.StringJoiner = StringJoiner;
	var NumberParseError = (function (_super) {
	    __extends(NumberParseError, _super);
	    function NumberParseError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    NumberParseError.prototype.toString = function () { return this.message; };
	    return NumberParseError;
	})(BaseException);
	exports.NumberParseError = NumberParseError;
	var NumberWrapper = (function () {
	    function NumberWrapper() {
	    }
	    NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	    NumberWrapper.equal = function (a, b) { return a === b; };
	    NumberWrapper.parseIntAutoRadix = function (text) {
	        var result = parseInt(text);
	        if (isNaN(result)) {
	            throw new NumberParseError("Invalid integer literal when parsing " + text);
	        }
	        return result;
	    };
	    NumberWrapper.parseInt = function (text, radix) {
	        if (radix == 10) {
	            if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else if (radix == 16) {
	            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        }
	        else {
	            var result = parseInt(text, radix);
	            if (!isNaN(result)) {
	                return result;
	            }
	        }
	        throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " +
	            radix);
	    };
	    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
	    NumberWrapper.parseFloat = function (text) { return parseFloat(text); };
	    Object.defineProperty(NumberWrapper, "NaN", {
	        get: function () { return NaN; },
	        enumerable: true,
	        configurable: true
	    });
	    NumberWrapper.isNaN = function (value) { return isNaN(value); };
	    NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	    return NumberWrapper;
	})();
	exports.NumberWrapper = NumberWrapper;
	exports.RegExp = _global.RegExp;
	var RegExpWrapper = (function () {
	    function RegExpWrapper() {
	    }
	    RegExpWrapper.create = function (regExpStr, flags) {
	        if (flags === void 0) { flags = ''; }
	        flags = flags.replace(/g/g, '');
	        return new _global.RegExp(regExpStr, flags + 'g');
	    };
	    RegExpWrapper.firstMatch = function (regExp, input) {
	        // Reset multimatch regex state
	        regExp.lastIndex = 0;
	        return regExp.exec(input);
	    };
	    RegExpWrapper.test = function (regExp, input) { return regExp.test(input); };
	    RegExpWrapper.matcher = function (regExp, input) {
	        // Reset regex state for the case
	        // someone did not loop over all matches
	        // last time.
	        regExp.lastIndex = 0;
	        return { re: regExp, input: input };
	    };
	    return RegExpWrapper;
	})();
	exports.RegExpWrapper = RegExpWrapper;
	var RegExpMatcherWrapper = (function () {
	    function RegExpMatcherWrapper() {
	    }
	    RegExpMatcherWrapper.next = function (matcher) {
	        return matcher.re.exec(matcher.input);
	    };
	    return RegExpMatcherWrapper;
	})();
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	var FunctionWrapper = (function () {
	    function FunctionWrapper() {
	    }
	    FunctionWrapper.apply = function (fn, posArgs) { return fn.apply(null, posArgs); };
	    return FunctionWrapper;
	})();
	exports.FunctionWrapper = FunctionWrapper;
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
	}
	exports.looseIdentical = looseIdentical;
	// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	function getMapKey(value) {
	    return value;
	}
	exports.getMapKey = getMapKey;
	function normalizeBlank(obj) {
	    return isBlank(obj) ? null : obj;
	}
	exports.normalizeBlank = normalizeBlank;
	function normalizeBool(obj) {
	    return isBlank(obj) ? false : obj;
	}
	exports.normalizeBool = normalizeBool;
	function isJsObject(o) {
	    return o !== null && (typeof o === "function" || typeof o === "object");
	}
	exports.isJsObject = isJsObject;
	function print(obj) {
	    if (obj instanceof BaseException) {
	        console.log(obj.stack);
	    }
	    else {
	        console.log(obj);
	    }
	}
	exports.print = print;
	// Can't be all uppercase as our transpiler would think it is a special directive...
	var Json = (function () {
	    function Json() {
	    }
	    Json.parse = function (s) { return _global.JSON.parse(s); };
	    Json.stringify = function (data) {
	        // Dart doesn't take 3 arguments
	        return _global.JSON.stringify(data, null, 2);
	    };
	    return Json;
	})();
	exports.Json = Json;
	var DateWrapper = (function () {
	    function DateWrapper() {
	    }
	    DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
	        if (month === void 0) { month = 1; }
	        if (day === void 0) { day = 1; }
	        if (hour === void 0) { hour = 0; }
	        if (minutes === void 0) { minutes = 0; }
	        if (seconds === void 0) { seconds = 0; }
	        if (milliseconds === void 0) { milliseconds = 0; }
	        return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
	    };
	    DateWrapper.fromMillis = function (ms) { return new exports.Date(ms); };
	    DateWrapper.toMillis = function (date) { return date.getTime(); };
	    DateWrapper.now = function () { return new exports.Date(); };
	    DateWrapper.toJson = function (date) { return date.toJSON(); };
	    return DateWrapper;
	})();
	exports.DateWrapper = DateWrapper;
	//# sourceMappingURL=lang.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	exports.List = lang_1.global.Array;
	exports.Map = lang_1.global.Map;
	exports.Set = lang_1.global.Set;
	exports.StringMap = lang_1.global.Object;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Map constructor.  We work around that by manually adding the items.
	var createMapFromPairs = (function () {
	    try {
	        if (new exports.Map([1, 2]).size === 2) {
	            return function createMapFromPairs(pairs) { return new exports.Map(pairs); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromPairs(pairs) {
	        var map = new exports.Map();
	        for (var i = 0; i < pairs.length; i++) {
	            var pair = pairs[i];
	            map.set(pair[0], pair[1]);
	        }
	        return map;
	    };
	})();
	var createMapFromMap = (function () {
	    try {
	        if (new exports.Map(new exports.Map())) {
	            return function createMapFromMap(m) { return new exports.Map(m); };
	        }
	    }
	    catch (e) {
	    }
	    return function createMapAndPopulateFromMap(m) {
	        var map = new exports.Map();
	        m.forEach(function (v, k) { map.set(k, v); });
	        return map;
	    };
	})();
	var _clearValues = (function () {
	    if ((new exports.Map()).keys().next) {
	        return function _clearValues(m) {
	            var keyIterator = m.keys();
	            var k;
	            while (!((k = keyIterator.next()).done)) {
	                m.set(k.value, null);
	            }
	        };
	    }
	    else {
	        return function _clearValuesWithForeEach(m) {
	            m.forEach(function (v, k) { m.set(k, null); });
	        };
	    }
	})();
	var MapWrapper = (function () {
	    function MapWrapper() {
	    }
	    MapWrapper.clone = function (m) { return createMapFromMap(m); };
	    MapWrapper.createFromStringMap = function (stringMap) {
	        var result = new exports.Map();
	        for (var prop in stringMap) {
	            result.set(prop, stringMap[prop]);
	        }
	        return result;
	    };
	    MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	    MapWrapper.forEach = function (m, fn) { m.forEach(fn); };
	    MapWrapper.get = function (map, key) { return map.get(key); };
	    MapWrapper.size = function (m) { return m.size; };
	    MapWrapper.delete = function (m, k) { m.delete(k); };
	    MapWrapper.clearValues = function (m) { _clearValues(m); };
	    MapWrapper.iterable = function (m) { return m; };
	    MapWrapper.keys = function (m) { return Array.from(m.keys()); };
	    MapWrapper.values = function (m) { return Array.from(m.values()); };
	    return MapWrapper;
	})();
	exports.MapWrapper = MapWrapper;
	/**
	 * Wraps Javascript Objects
	 */
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {
	    }
	    StringMapWrapper.create = function () {
	        // Note: We are not using Object.create(null) here due to
	        // performance!
	        // http://jsperf.com/ng2-object-create-null
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) {
	        return map.hasOwnProperty(key);
	    };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	    StringMapWrapper.keys = function (map) { return Object.keys(map); };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper.delete = function (map, key) { delete map[key]; };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	})();
	exports.StringMapWrapper = StringMapWrapper;
	var ListWrapper = (function () {
	    function ListWrapper() {
	    }
	    // JS has no way to express a staticly fixed size list, but dart does so we
	    // keep both methods.
	    ListWrapper.createFixedSize = function (size) { return new exports.List(size); };
	    ListWrapper.createGrowableSize = function (size) { return new exports.List(size); };
	    ListWrapper.get = function (m, k) { return m[k]; };
	    ListWrapper.set = function (m, k, v) { m[k] = v; };
	    ListWrapper.clone = function (array) { return array.slice(0); };
	    ListWrapper.map = function (array, fn) { return array.map(fn); };
	    ListWrapper.forEach = function (array, fn) {
	        for (var i = 0; i < array.length; i++) {
	            fn(array[i]);
	        }
	    };
	    ListWrapper.first = function (array) {
	        if (!array)
	            return null;
	        return array[0];
	    };
	    ListWrapper.last = function (array) {
	        if (!array || array.length == 0)
	            return null;
	        return array[array.length - 1];
	    };
	    ListWrapper.find = function (list, pred) {
	        for (var i = 0; i < list.length; ++i) {
	            if (pred(list[i]))
	                return list[i];
	        }
	        return null;
	    };
	    ListWrapper.indexOf = function (array, value, startIndex) {
	        if (startIndex === void 0) { startIndex = 0; }
	        return array.indexOf(value, startIndex);
	    };
	    ListWrapper.reduce = function (list, fn, init) {
	        return list.reduce(fn, init);
	    };
	    ListWrapper.filter = function (array, pred) { return array.filter(pred); };
	    ListWrapper.any = function (list, pred) {
	        for (var i = 0; i < list.length; ++i) {
	            if (pred(list[i]))
	                return true;
	        }
	        return false;
	    };
	    ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	    ListWrapper.reversed = function (array) {
	        var a = ListWrapper.clone(array);
	        return a.reverse();
	    };
	    ListWrapper.concat = function (a, b) { return a.concat(b); };
	    ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	    ListWrapper.removeAt = function (list, index) {
	        var res = list[index];
	        list.splice(index, 1);
	        return res;
	    };
	    ListWrapper.removeAll = function (list, items) {
	        for (var i = 0; i < items.length; ++i) {
	            var index = list.indexOf(items[i]);
	            list.splice(index, 1);
	        }
	    };
	    ListWrapper.removeLast = function (list) { return list.pop(); };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    ListWrapper.clear = function (list) { list.splice(0, list.length); };
	    ListWrapper.join = function (list, s) { return list.join(s); };
	    ListWrapper.isEmpty = function (list) { return list.length == 0; };
	    ListWrapper.fill = function (list, value, start, end) {
	        if (start === void 0) { start = 0; }
	        if (end === void 0) { end = null; }
	        list.fill(value, start, end === null ? undefined : end);
	    };
	    ListWrapper.equals = function (a, b) {
	        if (a.length != b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i] !== b[i])
	                return false;
	        }
	        return true;
	    };
	    ListWrapper.slice = function (l, from, to) {
	        if (from === void 0) { from = 0; }
	        if (to === void 0) { to = null; }
	        return l.slice(from, to === null ? undefined : to);
	    };
	    ListWrapper.splice = function (l, from, length) {
	        return l.splice(from, length);
	    };
	    ListWrapper.sort = function (l, compareFn) {
	        if (lang_1.isPresent(compareFn)) {
	            l.sort(compareFn);
	        }
	        else {
	            l.sort();
	        }
	    };
	    ListWrapper.toString = function (l) { return l.toString(); };
	    ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	    return ListWrapper;
	})();
	exports.ListWrapper = ListWrapper;
	function isListLikeIterable(obj) {
	    if (!lang_1.isJsObject(obj))
	        return false;
	    return lang_1.isArray(obj) ||
	        (!(obj instanceof exports.Map) &&
	            Symbol.iterator in obj); // JS Iterable have a Symbol.iterator prop
	}
	exports.isListLikeIterable = isListLikeIterable;
	function iterateListLike(obj, fn) {
	    if (lang_1.isArray(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[Symbol.iterator]();
	        var item;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	exports.iterateListLike = iterateListLike;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Set constructor.  We work around that by manually adding the items.
	var createSetFromList = (function () {
	    var test = new exports.Set([1, 2, 3]);
	    if (test.size === 3) {
	        return function createSetFromList(lst) { return new exports.Set(lst); };
	    }
	    else {
	        return function createSetAndPopulateFromList(lst) {
	            var res = new exports.Set(lst);
	            if (res.size !== lst.length) {
	                for (var i = 0; i < lst.length; i++) {
	                    res.add(lst[i]);
	                }
	            }
	            return res;
	        };
	    }
	})();
	var SetWrapper = (function () {
	    function SetWrapper() {
	    }
	    SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
	    SetWrapper.has = function (s, key) { return s.has(key); };
	    return SetWrapper;
	})();
	exports.SetWrapper = SetWrapper;
	//# sourceMappingURL=collection.js.map

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var metadata_1 = __webpack_require__(27);
	exports.InjectMetadata = metadata_1.InjectMetadata;
	exports.OptionalMetadata = metadata_1.OptionalMetadata;
	exports.InjectableMetadata = metadata_1.InjectableMetadata;
	exports.VisibilityMetadata = metadata_1.VisibilityMetadata;
	exports.SelfMetadata = metadata_1.SelfMetadata;
	exports.AncestorMetadata = metadata_1.AncestorMetadata;
	exports.UnboundedMetadata = metadata_1.UnboundedMetadata;
	exports.DependencyMetadata = metadata_1.DependencyMetadata;
	exports.DEFAULT_VISIBILITY = metadata_1.DEFAULT_VISIBILITY;
	// we have to reexport * because Dart and TS export two different sets of types
	__export(__webpack_require__(50));
	var forward_ref_1 = __webpack_require__(51);
	exports.forwardRef = forward_ref_1.forwardRef;
	exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
	var injector_1 = __webpack_require__(137);
	exports.Injector = injector_1.Injector;
	exports.ProtoInjector = injector_1.ProtoInjector;
	exports.BindingWithVisibility = injector_1.BindingWithVisibility;
	exports.PUBLIC_AND_PRIVATE = injector_1.PUBLIC_AND_PRIVATE;
	exports.PUBLIC = injector_1.PUBLIC;
	exports.PRIVATE = injector_1.PRIVATE;
	exports.undefinedValue = injector_1.undefinedValue;
	var binding_1 = __webpack_require__(136);
	exports.Binding = binding_1.Binding;
	exports.BindingBuilder = binding_1.BindingBuilder;
	exports.ResolvedBinding = binding_1.ResolvedBinding;
	exports.Dependency = binding_1.Dependency;
	exports.bind = binding_1.bind;
	var key_1 = __webpack_require__(72);
	exports.Key = key_1.Key;
	exports.KeyRegistry = key_1.KeyRegistry;
	exports.TypeLiteral = key_1.TypeLiteral;
	var exceptions_1 = __webpack_require__(71);
	exports.NoBindingError = exceptions_1.NoBindingError;
	exports.AbstractBindingError = exceptions_1.AbstractBindingError;
	exports.AsyncBindingError = exceptions_1.AsyncBindingError;
	exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
	exports.InstantiationError = exceptions_1.InstantiationError;
	exports.InvalidBindingError = exceptions_1.InvalidBindingError;
	exports.NoAnnotationError = exceptions_1.NoAnnotationError;
	exports.OutOfBoundsError = exceptions_1.OutOfBoundsError;
	var opaque_token_1 = __webpack_require__(178);
	exports.OpaqueToken = opaque_token_1.OpaqueToken;
	//# sourceMappingURL=di.js.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * The `angular2` is the single place to import all of the individual types.
	 */
	__export(__webpack_require__(8));
	__export(__webpack_require__(13));
	var change_detection_1 = __webpack_require__(12);
	exports.DehydratedException = change_detection_1.DehydratedException;
	exports.ExpressionChangedAfterItHasBeenChecked = change_detection_1.ExpressionChangedAfterItHasBeenChecked;
	exports.ChangeDetectionError = change_detection_1.ChangeDetectionError;
	exports.ON_PUSH = change_detection_1.ON_PUSH;
	exports.DEFAULT = change_detection_1.DEFAULT;
	exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
	exports.Pipes = change_detection_1.Pipes;
	exports.WrappedValue = change_detection_1.WrappedValue;
	exports.NullPipe = change_detection_1.NullPipe;
	exports.NullPipeFactory = change_detection_1.NullPipeFactory;
	exports.defaultPipes = change_detection_1.defaultPipes;
	exports.BasePipe = change_detection_1.BasePipe;
	exports.Locals = change_detection_1.Locals;
	__export(__webpack_require__(3));
	__export(__webpack_require__(59));
	__export(__webpack_require__(162));
	var forms_2 = __webpack_require__(59);
	exports.AbstractControl = forms_2.AbstractControl;
	exports.AbstractControlDirective = forms_2.AbstractControlDirective;
	exports.Control = forms_2.Control;
	exports.ControlGroup = forms_2.ControlGroup;
	exports.ControlArray = forms_2.ControlArray;
	exports.NgControlName = forms_2.NgControlName;
	exports.NgFormControl = forms_2.NgFormControl;
	exports.NgModel = forms_2.NgModel;
	exports.NgControl = forms_2.NgControl;
	exports.NgControlGroup = forms_2.NgControlGroup;
	exports.NgFormModel = forms_2.NgFormModel;
	exports.NgForm = forms_2.NgForm;
	exports.DefaultValueAccessor = forms_2.DefaultValueAccessor;
	exports.CheckboxControlValueAccessor = forms_2.CheckboxControlValueAccessor;
	exports.SelectControlValueAccessor = forms_2.SelectControlValueAccessor;
	exports.formDirectives = forms_2.formDirectives;
	exports.Validators = forms_2.Validators;
	exports.NgValidator = forms_2.NgValidator;
	exports.NgRequiredValidator = forms_2.NgRequiredValidator;
	exports.FormBuilder = forms_2.FormBuilder;
	exports.formInjectables = forms_2.formInjectables;
	__export(__webpack_require__(163));
	var api_1 = __webpack_require__(7);
	exports.Renderer = api_1.Renderer;
	exports.RenderViewRef = api_1.RenderViewRef;
	exports.RenderProtoViewRef = api_1.RenderProtoViewRef;
	exports.RenderFragmentRef = api_1.RenderFragmentRef;
	exports.RenderViewWithFragments = api_1.RenderViewWithFragments;
	var dom_renderer_1 = __webpack_require__(88);
	exports.DomRenderer = dom_renderer_1.DomRenderer;
	exports.DOCUMENT_TOKEN = dom_renderer_1.DOCUMENT_TOKEN;
	exports.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES = dom_renderer_1.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES;
	//# sourceMappingURL=angular2.js.map

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/// <reference path="../../typings/es6-promise/es6-promise.d.ts" />
	/// <reference path="../../typings/rx/rx.d.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var Rx = __webpack_require__(164);
	exports.Promise = lang_1.global.Promise;
	var PromiseWrapper = (function () {
	    function PromiseWrapper() {
	    }
	    PromiseWrapper.resolve = function (obj) { return exports.Promise.resolve(obj); };
	    PromiseWrapper.reject = function (obj, _) { return exports.Promise.reject(obj); };
	    // Note: We can't rename this method into `catch`, as this is not a valid
	    // method name in Dart.
	    PromiseWrapper.catchError = function (promise, onError) {
	        return promise.catch(onError);
	    };
	    PromiseWrapper.all = function (promises) {
	        if (promises.length == 0)
	            return exports.Promise.resolve([]);
	        return exports.Promise.all(promises);
	    };
	    PromiseWrapper.then = function (promise, success, rejection) {
	        return promise.then(success, rejection);
	    };
	    PromiseWrapper.wrap = function (computation) {
	        return new exports.Promise(function (res, rej) {
	            try {
	                res(computation());
	            }
	            catch (e) {
	                rej(e);
	            }
	        });
	    };
	    PromiseWrapper.completer = function () {
	        var resolve;
	        var reject;
	        var p = new exports.Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        return { promise: p, resolve: resolve, reject: reject };
	    };
	    return PromiseWrapper;
	})();
	exports.PromiseWrapper = PromiseWrapper;
	var TimerWrapper = (function () {
	    function TimerWrapper() {
	    }
	    TimerWrapper.setTimeout = function (fn, millis) { return lang_1.global.setTimeout(fn, millis); };
	    TimerWrapper.clearTimeout = function (id) { lang_1.global.clearTimeout(id); };
	    TimerWrapper.setInterval = function (fn, millis) { return lang_1.global.setInterval(fn, millis); };
	    TimerWrapper.clearInterval = function (id) { lang_1.global.clearInterval(id); };
	    return TimerWrapper;
	})();
	exports.TimerWrapper = TimerWrapper;
	var ObservableWrapper = (function () {
	    function ObservableWrapper() {
	    }
	    ObservableWrapper.subscribe = function (emitter, onNext, onThrow, onReturn) {
	        if (onThrow === void 0) { onThrow = null; }
	        if (onReturn === void 0) { onReturn = null; }
	        return emitter.observer({ next: onNext, throw: onThrow, return: onReturn });
	    };
	    ObservableWrapper.isObservable = function (obs) { return obs instanceof Observable; };
	    ObservableWrapper.dispose = function (subscription) { subscription.dispose(); };
	    ObservableWrapper.callNext = function (emitter, value) { emitter.next(value); };
	    ObservableWrapper.callThrow = function (emitter, error) { emitter.throw(error); };
	    ObservableWrapper.callReturn = function (emitter) { emitter.return(null); };
	    return ObservableWrapper;
	})();
	exports.ObservableWrapper = ObservableWrapper;
	// TODO: vsavkin change to interface
	var Observable = (function () {
	    function Observable() {
	    }
	    Observable.prototype.observer = function (generator) { return null; };
	    return Observable;
	})();
	exports.Observable = Observable;
	/**
	 * Use Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    function EventEmitter() {
	        _super.call(this);
	        // System creates a different object for import * than Typescript es5 emit.
	        if (Rx.hasOwnProperty('default')) {
	            this._subject = new Rx.default.Rx.Subject();
	            this._immediateScheduler = Rx.default.Rx.Scheduler.immediate;
	        }
	        else {
	            this._subject = new Rx.Subject();
	            this._immediateScheduler = Rx.Scheduler.immediate;
	        }
	    }
	    EventEmitter.prototype.observer = function (generator) {
	        return this._subject.observeOn(this._immediateScheduler)
	            .subscribe(function (value) { setTimeout(function () { return generator.next(value); }); }, function (error) { return generator.throw ? generator.throw(error) : null; }, function () { return generator.return ? generator.return() : null; });
	    };
	    EventEmitter.prototype.toRx = function () { return this._subject; };
	    EventEmitter.prototype.next = function (value) { this._subject.onNext(value); };
	    EventEmitter.prototype.throw = function (error) { this._subject.onError(error); };
	    EventEmitter.prototype.return = function (value) { this._subject.onCompleted(); };
	    return EventEmitter;
	})(Observable);
	exports.EventEmitter = EventEmitter;
	//# sourceMappingURL=async.js.map

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	exports.DOM;
	function setRootDomAdapter(adapter) {
	    if (lang_1.isBlank(exports.DOM)) {
	        exports.DOM = adapter;
	    }
	}
	exports.setRootDomAdapter = setRootDomAdapter;
	function _abstract() {
	    return new lang_1.BaseException('This method is abstract');
	}
	/* tslint:disable:requireParameterType */
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {
	    }
	    DomAdapter.prototype.hasProperty = function (element, name) { throw _abstract(); };
	    DomAdapter.prototype.setProperty = function (el, name, value) { throw _abstract(); };
	    DomAdapter.prototype.getProperty = function (el, name) { throw _abstract(); };
	    DomAdapter.prototype.invoke = function (el, methodName, args) { throw _abstract(); };
	    DomAdapter.prototype.logError = function (error) { throw _abstract(); };
	    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	        /**
	         * Maps attribute names to their corresponding property names for cases
	         * where attribute name doesn't match property name.
	         */
	        get: function () { throw _abstract(); },
	        enumerable: true,
	        configurable: true
	    });
	    DomAdapter.prototype.parse = function (templateHtml) { throw _abstract(); };
	    DomAdapter.prototype.query = function (selector) { throw _abstract(); };
	    DomAdapter.prototype.querySelector = function (el, selector) { throw _abstract(); };
	    DomAdapter.prototype.querySelectorAll = function (el, selector) { throw _abstract(); };
	    DomAdapter.prototype.on = function (el, evt, listener) { throw _abstract(); };
	    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { throw _abstract(); };
	    DomAdapter.prototype.dispatchEvent = function (el, evt) { throw _abstract(); };
	    DomAdapter.prototype.createMouseEvent = function (eventType) { throw _abstract(); };
	    DomAdapter.prototype.createEvent = function (eventType) { throw _abstract(); };
	    DomAdapter.prototype.preventDefault = function (evt) { throw _abstract(); };
	    DomAdapter.prototype.getInnerHTML = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getOuterHTML = function (el) { throw _abstract(); };
	    DomAdapter.prototype.nodeName = function (node) { throw _abstract(); };
	    DomAdapter.prototype.nodeValue = function (node) { throw _abstract(); };
	    DomAdapter.prototype.type = function (node) { throw _abstract(); };
	    DomAdapter.prototype.content = function (node) { throw _abstract(); };
	    DomAdapter.prototype.firstChild = function (el) { throw _abstract(); };
	    DomAdapter.prototype.nextSibling = function (el) { throw _abstract(); };
	    DomAdapter.prototype.parentElement = function (el) { throw _abstract(); };
	    DomAdapter.prototype.childNodes = function (el) { throw _abstract(); };
	    DomAdapter.prototype.childNodesAsList = function (el) { throw _abstract(); };
	    DomAdapter.prototype.clearNodes = function (el) { throw _abstract(); };
	    DomAdapter.prototype.appendChild = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.removeChild = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { throw _abstract(); };
	    DomAdapter.prototype.remove = function (el) { throw _abstract(); };
	    DomAdapter.prototype.insertBefore = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.insertAllBefore = function (el, nodes) { throw _abstract(); };
	    DomAdapter.prototype.insertAfter = function (el, node) { throw _abstract(); };
	    DomAdapter.prototype.setInnerHTML = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.getText = function (el) { throw _abstract(); };
	    DomAdapter.prototype.setText = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.getValue = function (el) { throw _abstract(); };
	    DomAdapter.prototype.setValue = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.getChecked = function (el) { throw _abstract(); };
	    DomAdapter.prototype.setChecked = function (el, value) { throw _abstract(); };
	    DomAdapter.prototype.createTemplate = function (html) { throw _abstract(); };
	    DomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = null; }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createShadowRoot = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getShadowRoot = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getHost = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getDistributedNodes = function (el) { throw _abstract(); };
	    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node /*T*/) { throw _abstract(); };
	    DomAdapter.prototype.getElementsByClassName = function (element, name) { throw _abstract(); };
	    DomAdapter.prototype.getElementsByTagName = function (element, name) { throw _abstract(); };
	    DomAdapter.prototype.classList = function (element) { throw _abstract(); };
	    DomAdapter.prototype.addClass = function (element, classname) { throw _abstract(); };
	    DomAdapter.prototype.removeClass = function (element, classname) { throw _abstract(); };
	    DomAdapter.prototype.hasClass = function (element, classname) { throw _abstract(); };
	    DomAdapter.prototype.setStyle = function (element, stylename, stylevalue) { throw _abstract(); };
	    DomAdapter.prototype.removeStyle = function (element, stylename) { throw _abstract(); };
	    DomAdapter.prototype.getStyle = function (element, stylename) { throw _abstract(); };
	    DomAdapter.prototype.tagName = function (element) { throw _abstract(); };
	    DomAdapter.prototype.attributeMap = function (element) { throw _abstract(); };
	    DomAdapter.prototype.hasAttribute = function (element, attribute) { throw _abstract(); };
	    DomAdapter.prototype.getAttribute = function (element, attribute) { throw _abstract(); };
	    DomAdapter.prototype.setAttribute = function (element, name, value) { throw _abstract(); };
	    DomAdapter.prototype.removeAttribute = function (element, attribute) { throw _abstract(); };
	    DomAdapter.prototype.templateAwareRoot = function (el) { throw _abstract(); };
	    DomAdapter.prototype.createHtmlDocument = function () { throw _abstract(); };
	    DomAdapter.prototype.defaultDoc = function () { throw _abstract(); };
	    DomAdapter.prototype.getBoundingClientRect = function (el) { throw _abstract(); };
	    DomAdapter.prototype.getTitle = function () { throw _abstract(); };
	    DomAdapter.prototype.setTitle = function (newTitle) { throw _abstract(); };
	    DomAdapter.prototype.elementMatches = function (n, selector) { throw _abstract(); };
	    DomAdapter.prototype.isTemplateElement = function (el) { throw _abstract(); };
	    DomAdapter.prototype.isTextNode = function (node) { throw _abstract(); };
	    DomAdapter.prototype.isCommentNode = function (node) { throw _abstract(); };
	    DomAdapter.prototype.isElementNode = function (node) { throw _abstract(); };
	    DomAdapter.prototype.hasShadowRoot = function (node) { throw _abstract(); };
	    DomAdapter.prototype.isShadowRoot = function (node) { throw _abstract(); };
	    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node /*T*/) { throw _abstract(); };
	    DomAdapter.prototype.isPageRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.isStyleRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.isMediaRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.isKeyframesRule = function (rule) { throw _abstract(); };
	    DomAdapter.prototype.getHref = function (element) { throw _abstract(); };
	    DomAdapter.prototype.getEventKey = function (event) { throw _abstract(); };
	    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { throw _abstract(); };
	    DomAdapter.prototype.cssToRules = function (css) { throw _abstract(); };
	    DomAdapter.prototype.supportsDOMEvents = function () { throw _abstract(); };
	    DomAdapter.prototype.supportsNativeShadowDOM = function () { throw _abstract(); };
	    DomAdapter.prototype.getGlobalEventTarget = function (target) { throw _abstract(); };
	    DomAdapter.prototype.getHistory = function () { throw _abstract(); };
	    DomAdapter.prototype.getLocation = function () { throw _abstract(); };
	    DomAdapter.prototype.getBaseHref = function () { throw _abstract(); };
	    DomAdapter.prototype.getUserAgent = function () { throw _abstract(); };
	    DomAdapter.prototype.setData = function (element, name, value) { throw _abstract(); };
	    DomAdapter.prototype.getData = function (element, name) { throw _abstract(); };
	    DomAdapter.prototype.setGlobalVar = function (name, value) { throw _abstract(); };
	    return DomAdapter;
	})();
	exports.DomAdapter = DomAdapter;
	//# sourceMappingURL=dom_adapter.js.map

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	/**
	 * General notes:
	 *
	 * The methods for creating / destroying views in this API are used in the AppViewHydrator
	 * and RenderViewHydrator as well.
	 *
	 * We are already parsing expressions on the render side:
	 * - this makes the ElementBinders more compact
	 *   (e.g. no need to distinguish interpolations from regular expressions from literals)
	 * - allows to retrieve which properties should be accessed from the event
	 *   by looking at the expression
	 * - we need the parse at least for the `template` attribute to match
	 *   directives in it
	 * - render compiler is not on the critical path as
	 *   its output will be stored in precompiled templates.
	 */
	var EventBinding = (function () {
	    function EventBinding(fullName, source) {
	        this.fullName = fullName;
	        this.source = source;
	    }
	    return EventBinding;
	})();
	exports.EventBinding = EventBinding;
	(function (PropertyBindingType) {
	    PropertyBindingType[PropertyBindingType["PROPERTY"] = 0] = "PROPERTY";
	    PropertyBindingType[PropertyBindingType["ATTRIBUTE"] = 1] = "ATTRIBUTE";
	    PropertyBindingType[PropertyBindingType["CLASS"] = 2] = "CLASS";
	    PropertyBindingType[PropertyBindingType["STYLE"] = 3] = "STYLE";
	})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
	var PropertyBindingType = exports.PropertyBindingType;
	var ElementPropertyBinding = (function () {
	    function ElementPropertyBinding(type, astWithSource, property, unit) {
	        if (unit === void 0) { unit = null; }
	        this.type = type;
	        this.astWithSource = astWithSource;
	        this.property = property;
	        this.unit = unit;
	    }
	    return ElementPropertyBinding;
	})();
	exports.ElementPropertyBinding = ElementPropertyBinding;
	var ElementBinder = (function () {
	    function ElementBinder(_a) {
	        var _b = _a === void 0 ? {} : _a, index = _b.index, parentIndex = _b.parentIndex, distanceToParent = _b.distanceToParent, directives = _b.directives, nestedProtoView = _b.nestedProtoView, propertyBindings = _b.propertyBindings, variableBindings = _b.variableBindings, eventBindings = _b.eventBindings, readAttributes = _b.readAttributes;
	        this.index = index;
	        this.parentIndex = parentIndex;
	        this.distanceToParent = distanceToParent;
	        this.directives = directives;
	        this.nestedProtoView = nestedProtoView;
	        this.propertyBindings = propertyBindings;
	        this.variableBindings = variableBindings;
	        this.eventBindings = eventBindings;
	        this.readAttributes = readAttributes;
	    }
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	var DirectiveBinder = (function () {
	    function DirectiveBinder(_a) {
	        var directiveIndex = _a.directiveIndex, propertyBindings = _a.propertyBindings, eventBindings = _a.eventBindings, hostPropertyBindings = _a.hostPropertyBindings;
	        this.directiveIndex = directiveIndex;
	        this.propertyBindings = propertyBindings;
	        this.eventBindings = eventBindings;
	        this.hostPropertyBindings = hostPropertyBindings;
	    }
	    return DirectiveBinder;
	})();
	exports.DirectiveBinder = DirectiveBinder;
	(function (ViewType) {
	    // A view that contains the host element with bound component directive.
	    // Contains a COMPONENT view
	    ViewType[ViewType["HOST"] = 0] = "HOST";
	    // The view of the component
	    // Can contain 0 to n EMBEDDED views
	    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
	    // A view that is embedded into another View via a <template> element
	    // inside of a COMPONENT view
	    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
	})(exports.ViewType || (exports.ViewType = {}));
	var ViewType = exports.ViewType;
	var ProtoViewDto = (function () {
	    function ProtoViewDto(_a) {
	        var render = _a.render, elementBinders = _a.elementBinders, variableBindings = _a.variableBindings, type = _a.type, textBindings = _a.textBindings, transitiveNgContentCount = _a.transitiveNgContentCount;
	        this.render = render;
	        this.elementBinders = elementBinders;
	        this.variableBindings = variableBindings;
	        this.type = type;
	        this.textBindings = textBindings;
	        this.transitiveNgContentCount = transitiveNgContentCount;
	    }
	    return ProtoViewDto;
	})();
	exports.ProtoViewDto = ProtoViewDto;
	var DirectiveMetadata = (function () {
	    function DirectiveMetadata(_a) {
	        var id = _a.id, selector = _a.selector, compileChildren = _a.compileChildren, events = _a.events, hostListeners = _a.hostListeners, hostProperties = _a.hostProperties, hostAttributes = _a.hostAttributes, hostActions = _a.hostActions, properties = _a.properties, readAttributes = _a.readAttributes, type = _a.type, callOnDestroy = _a.callOnDestroy, callOnChange = _a.callOnChange, callOnCheck = _a.callOnCheck, callOnInit = _a.callOnInit, callOnAllChangesDone = _a.callOnAllChangesDone, changeDetection = _a.changeDetection, exportAs = _a.exportAs;
	        this.id = id;
	        this.selector = selector;
	        this.compileChildren = lang_1.isPresent(compileChildren) ? compileChildren : true;
	        this.events = events;
	        this.hostListeners = hostListeners;
	        this.hostAttributes = hostAttributes;
	        this.hostProperties = hostProperties;
	        this.hostActions = hostActions;
	        this.properties = properties;
	        this.readAttributes = readAttributes;
	        this.type = type;
	        this.callOnDestroy = callOnDestroy;
	        this.callOnChange = callOnChange;
	        this.callOnCheck = callOnCheck;
	        this.callOnInit = callOnInit;
	        this.callOnAllChangesDone = callOnAllChangesDone;
	        this.changeDetection = changeDetection;
	        this.exportAs = exportAs;
	    }
	    Object.defineProperty(DirectiveMetadata, "DIRECTIVE_TYPE", {
	        get: function () { return 0; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata, "COMPONENT_TYPE", {
	        get: function () { return 1; },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveMetadata.create = function (_a) {
	        var id = _a.id, selector = _a.selector, compileChildren = _a.compileChildren, events = _a.events, host = _a.host, properties = _a.properties, readAttributes = _a.readAttributes, type = _a.type, callOnDestroy = _a.callOnDestroy, callOnChange = _a.callOnChange, callOnCheck = _a.callOnCheck, callOnInit = _a.callOnInit, callOnAllChangesDone = _a.callOnAllChangesDone, changeDetection = _a.changeDetection, exportAs = _a.exportAs;
	        var hostListeners = new collection_1.Map();
	        var hostProperties = new collection_1.Map();
	        var hostAttributes = new collection_1.Map();
	        var hostActions = new collection_1.Map();
	        if (lang_1.isPresent(host)) {
	            collection_1.MapWrapper.forEach(host, function (value, key) {
	                var matches = lang_1.RegExpWrapper.firstMatch(DirectiveMetadata._hostRegExp, key);
	                if (lang_1.isBlank(matches)) {
	                    hostAttributes.set(key, value);
	                }
	                else if (lang_1.isPresent(matches[1])) {
	                    hostProperties.set(matches[1], value);
	                }
	                else if (lang_1.isPresent(matches[2])) {
	                    hostListeners.set(matches[2], value);
	                }
	                else if (lang_1.isPresent(matches[3])) {
	                    hostActions.set(matches[3], value);
	                }
	            });
	        }
	        return new DirectiveMetadata({
	            id: id,
	            selector: selector,
	            compileChildren: compileChildren,
	            events: events,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            hostActions: hostActions,
	            properties: properties,
	            readAttributes: readAttributes,
	            type: type,
	            callOnDestroy: callOnDestroy,
	            callOnChange: callOnChange,
	            callOnCheck: callOnCheck,
	            callOnInit: callOnInit,
	            callOnAllChangesDone: callOnAllChangesDone,
	            changeDetection: changeDetection,
	            exportAs: exportAs
	        });
	    };
	    // group 1: "property" from "[property]"
	    // group 2: "event" from "(event)"
	    // group 3: "action" from "@action"
	    DirectiveMetadata._hostRegExp = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\))|(?:@(.+)))$/g;
	    return DirectiveMetadata;
	})();
	exports.DirectiveMetadata = DirectiveMetadata;
	// An opaque reference to a render proto ivew
	var RenderProtoViewRef = (function () {
	    function RenderProtoViewRef() {
	    }
	    return RenderProtoViewRef;
	})();
	exports.RenderProtoViewRef = RenderProtoViewRef;
	// An opaque reference to a part of a view
	var RenderFragmentRef = (function () {
	    function RenderFragmentRef() {
	    }
	    return RenderFragmentRef;
	})();
	exports.RenderFragmentRef = RenderFragmentRef;
	// An opaque reference to a view
	var RenderViewRef = (function () {
	    function RenderViewRef() {
	    }
	    return RenderViewRef;
	})();
	exports.RenderViewRef = RenderViewRef;
	var ViewDefinition = (function () {
	    function ViewDefinition(_a) {
	        var componentId = _a.componentId, templateAbsUrl = _a.templateAbsUrl, template = _a.template, styleAbsUrls = _a.styleAbsUrls, styles = _a.styles, directives = _a.directives;
	        this.componentId = componentId;
	        this.templateAbsUrl = templateAbsUrl;
	        this.template = template;
	        this.styleAbsUrls = styleAbsUrls;
	        this.styles = styles;
	        this.directives = directives;
	    }
	    return ViewDefinition;
	})();
	exports.ViewDefinition = ViewDefinition;
	var RenderProtoViewMergeMapping = (function () {
	    function RenderProtoViewMergeMapping(mergedProtoViewRef, 
	        // Number of fragments in the merged ProtoView.
	        // Fragments are stored in depth first order of nested ProtoViews.
	        fragmentCount, 
	        // Mapping from app element index to render element index.
	        // Mappings of nested ProtoViews are in depth first order, with all
	        // indices for one ProtoView in a consecuitve block.
	        mappedElementIndices, 
	        // Mapping from app text index to render text index.
	        // Mappings of nested ProtoViews are in depth first order, with all
	        // indices for one ProtoView in a consecuitve block.
	        mappedTextIndices, 
	        // Mapping from view index to app element index
	        hostElementIndicesByViewIndex, 
	        // Number of contained views by view index
	        nestedViewCountByViewIndex) {
	        this.mergedProtoViewRef = mergedProtoViewRef;
	        this.fragmentCount = fragmentCount;
	        this.mappedElementIndices = mappedElementIndices;
	        this.mappedTextIndices = mappedTextIndices;
	        this.hostElementIndicesByViewIndex = hostElementIndicesByViewIndex;
	        this.nestedViewCountByViewIndex = nestedViewCountByViewIndex;
	    }
	    return RenderProtoViewMergeMapping;
	})();
	exports.RenderProtoViewMergeMapping = RenderProtoViewMergeMapping;
	var RenderCompiler = (function () {
	    function RenderCompiler() {
	    }
	    /**
	     * Creats a ProtoViewDto that contains a single nested component with the given componentId.
	     */
	    RenderCompiler.prototype.compileHost = function (directiveMetadata) { return null; };
	    /**
	     * Compiles a single DomProtoView. Non recursive so that
	     * we don't need to serialize all possible components over the wire,
	     * but only the needed ones based on previous calls.
	     */
	    RenderCompiler.prototype.compile = function (view) { return null; };
	    /**
	     * Merges ProtoViews.
	     * The first entry of the array is the protoview into which all the other entries of the array
	     * should be merged.
	     * If the array contains other arrays, they will be merged before processing the parent array.
	     * The array must contain an entry for every component and embedded ProtoView of the first entry.
	     * @param protoViewRefs List of ProtoViewRefs or nested
	     * @return the merge result
	     */
	    RenderCompiler.prototype.mergeProtoViewsRecursively = function (protoViewRefs) {
	        return null;
	    };
	    return RenderCompiler;
	})();
	exports.RenderCompiler = RenderCompiler;
	var RenderViewWithFragments = (function () {
	    function RenderViewWithFragments(viewRef, fragmentRefs) {
	        this.viewRef = viewRef;
	        this.fragmentRefs = fragmentRefs;
	    }
	    return RenderViewWithFragments;
	})();
	exports.RenderViewWithFragments = RenderViewWithFragments;
	var Renderer = (function () {
	    function Renderer() {
	    }
	    /**
	     * Creates a root host view that includes the given element.
	     * Note that the fragmentCount needs to be passed in so that we can create a result
	     * synchronously even when dealing with webworkers!
	     *
	     * @param {RenderProtoViewRef} hostProtoViewRef a RenderProtoViewRef of type
	     * ProtoViewDto.HOST_VIEW_TYPE
	     * @param {any} hostElementSelector css selector for the host element (will be queried against the
	     * main document)
	     * @return {RenderViewWithFragments} the created view including fragments
	     */
	    Renderer.prototype.createRootHostView = function (hostProtoViewRef, fragmentCount, hostElementSelector) {
	        return null;
	    };
	    /**
	     * Creates a regular view out of the given ProtoView.
	     * Note that the fragmentCount needs to be passed in so that we can create a result
	     * synchronously even when dealing with webworkers!
	     */
	    Renderer.prototype.createView = function (protoViewRef, fragmentCount) {
	        return null;
	    };
	    /**
	     * Destroys the given view after it has been dehydrated and detached
	     */
	    Renderer.prototype.destroyView = function (viewRef) { };
	    /**
	     * Attaches a fragment after another fragment.
	     */
	    Renderer.prototype.attachFragmentAfterFragment = function (previousFragmentRef, fragmentRef) { };
	    /**
	     * Attaches a fragment after an element.
	     */
	    Renderer.prototype.attachFragmentAfterElement = function (elementRef, fragmentRef) { };
	    /**
	     * Detaches a fragment.
	     */
	    Renderer.prototype.detachFragment = function (fragmentRef) { };
	    /**
	     * Hydrates a view after it has been attached. Hydration/dehydration is used for reusing views
	     * inside of the view pool.
	     */
	    Renderer.prototype.hydrateView = function (viewRef) { };
	    /**
	     * Dehydrates a view after it has been attached. Hydration/dehydration is used for reusing views
	     * inside of the view pool.
	     */
	    Renderer.prototype.dehydrateView = function (viewRef) { };
	    /**
	     * Returns the native element at the given location.
	     * Attention: In a WebWorker scenario, this should always return null!
	     */
	    Renderer.prototype.getNativeElementSync = function (location) { return null; };
	    /**
	     * Sets a property on an element.
	     */
	    Renderer.prototype.setElementProperty = function (location, propertyName, propertyValue) { };
	    /**
	     * Sets an attribute on an element.
	     */
	    Renderer.prototype.setElementAttribute = function (location, attributeName, attributeValue) { };
	    /**
	     * Sets a class on an element.
	     */
	    Renderer.prototype.setElementClass = function (location, className, isAdd) { };
	    /**
	     * Sets a style on an element.
	     */
	    Renderer.prototype.setElementStyle = function (location, styleName, styleValue) { };
	    /**
	     * Calls a method on an element.
	     */
	    Renderer.prototype.invokeElementMethod = function (location, methodName, args) { };
	    /**
	     * Sets the value of a text node.
	     */
	    Renderer.prototype.setText = function (viewRef, textNodeIndex, text) { };
	    /**
	     * Sets the dispatcher for all events of the given view
	     */
	    Renderer.prototype.setEventDispatcher = function (viewRef, dispatcher) { };
	    return Renderer;
	})();
	exports.Renderer = Renderer;
	//# sourceMappingURL=api.js.map

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 *
	 * Annotations provide the additional information that Angular requires in order to run your
	 * application. This module
	 * contains {@link Component}, {@link Directive}, and {@link View} annotations, as well as
	 * {@link Parent} and {@link Ancestor} annotations that are
	 * used by Angular to resolve dependencies.
	 *
	 */
	var annotations_1 = __webpack_require__(121);
	exports.ComponentAnnotation = annotations_1.ComponentAnnotation;
	exports.DirectiveAnnotation = annotations_1.DirectiveAnnotation;
	exports.LifecycleEvent = annotations_1.LifecycleEvent;
	var view_1 = __webpack_require__(123);
	exports.ViewAnnotation = view_1.ViewAnnotation;
	var di_1 = __webpack_require__(122);
	exports.QueryAnnotation = di_1.QueryAnnotation;
	exports.AttributeAnnotation = di_1.AttributeAnnotation;
	var decorators_1 = __webpack_require__(26);
	exports.Class = decorators_1.Class;
	var decorators_2 = __webpack_require__(31);
	exports.Attribute = decorators_2.Attribute;
	exports.Component = decorators_2.Component;
	exports.Directive = decorators_2.Directive;
	exports.View = decorators_2.View;
	exports.Query = decorators_2.Query;
	exports.ViewQuery = decorators_2.ViewQuery;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var reflector_1 = __webpack_require__(150);
	var reflector_2 = __webpack_require__(150);
	exports.Reflector = reflector_2.Reflector;
	var reflection_capabilities_1 = __webpack_require__(189);
	exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
	//# sourceMappingURL=reflection.js.map

/***/ },
/* 10 */,
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	/**
	 * Indicates that the result of a {@link Pipe} transformation has changed even though the reference
	 *has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 */
	var WrappedValue = (function () {
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    WrappedValue.wrap = function (value) {
	        var w = _wrappedValues[_wrappedIndex++ % 5];
	        w.wrapped = value;
	        return w;
	    };
	    return WrappedValue;
	})();
	exports.WrappedValue = WrappedValue;
	var _wrappedValues = [
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null),
	    new WrappedValue(null)
	];
	var _wrappedIndex = 0;
	/**
	 * Provides default implementation of supports and onDestroy.
	 *
	 * #Example
	 *
	 * ```
	 * class DoublePipe extends BasePipe {*
	 *  transform(value) {
	 *    return `${value}${value}`;
	 *  }
	 * }
	 * ```
	 */
	var BasePipe = (function () {
	    function BasePipe() {
	    }
	    BasePipe.prototype.supports = function (obj) { return true; };
	    BasePipe.prototype.onDestroy = function () { };
	    BasePipe.prototype.transform = function (value, args) { return _abstract(); };
	    BasePipe = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], BasePipe);
	    return BasePipe;
	})();
	exports.BasePipe = BasePipe;
	function _abstract() {
	    throw new lang_1.BaseException('This method is abstract');
	}
	//# sourceMappingURL=pipe.js.map

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	var ast_1 = __webpack_require__(61);
	exports.ASTWithSource = ast_1.ASTWithSource;
	exports.AST = ast_1.AST;
	exports.AstTransformer = ast_1.AstTransformer;
	exports.AccessMember = ast_1.AccessMember;
	exports.LiteralArray = ast_1.LiteralArray;
	exports.ImplicitReceiver = ast_1.ImplicitReceiver;
	var lexer_1 = __webpack_require__(110);
	exports.Lexer = lexer_1.Lexer;
	var parser_1 = __webpack_require__(170);
	exports.Parser = parser_1.Parser;
	var locals_1 = __webpack_require__(169);
	exports.Locals = locals_1.Locals;
	var exceptions_1 = __webpack_require__(60);
	exports.DehydratedException = exceptions_1.DehydratedException;
	exports.ExpressionChangedAfterItHasBeenChecked = exceptions_1.ExpressionChangedAfterItHasBeenChecked;
	exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
	var interfaces_1 = __webpack_require__(109);
	exports.ChangeDetection = interfaces_1.ChangeDetection;
	exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
	var constants_1 = __webpack_require__(30);
	exports.CHECK_ONCE = constants_1.CHECK_ONCE;
	exports.CHECK_ALWAYS = constants_1.CHECK_ALWAYS;
	exports.DETACHED = constants_1.DETACHED;
	exports.CHECKED = constants_1.CHECKED;
	exports.ON_PUSH = constants_1.ON_PUSH;
	exports.DEFAULT = constants_1.DEFAULT;
	var proto_change_detector_1 = __webpack_require__(63);
	exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
	var binding_record_1 = __webpack_require__(166);
	exports.BindingRecord = binding_record_1.BindingRecord;
	var directive_record_1 = __webpack_require__(107);
	exports.DirectiveIndex = directive_record_1.DirectiveIndex;
	exports.DirectiveRecord = directive_record_1.DirectiveRecord;
	var dynamic_change_detector_1 = __webpack_require__(108);
	exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
	var change_detector_ref_1 = __webpack_require__(105);
	exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
	var pipes_1 = __webpack_require__(45);
	exports.Pipes = pipes_1.Pipes;
	var change_detection_util_1 = __webpack_require__(44);
	exports.uninitialized = change_detection_util_1.uninitialized;
	var pipe_1 = __webpack_require__(11);
	exports.WrappedValue = pipe_1.WrappedValue;
	exports.BasePipe = pipe_1.BasePipe;
	var null_pipe_1 = __webpack_require__(116);
	exports.NullPipe = null_pipe_1.NullPipe;
	exports.NullPipeFactory = null_pipe_1.NullPipeFactory;
	var change_detection_1 = __webpack_require__(104);
	exports.defaultPipes = change_detection_1.defaultPipes;
	exports.DynamicChangeDetection = change_detection_1.DynamicChangeDetection;
	exports.JitChangeDetection = change_detection_1.JitChangeDetection;
	exports.PreGeneratedChangeDetection = change_detection_1.PreGeneratedChangeDetection;
	exports.preGeneratedProtoDetectors = change_detection_1.preGeneratedProtoDetectors;
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Define angular core API here.
	 */
	var application_1 = __webpack_require__(172);
	exports.bootstrap = application_1.bootstrap;
	exports.ApplicationRef = application_1.ApplicationRef;
	var application_tokens_1 = __webpack_require__(48);
	exports.appComponentTypeToken = application_tokens_1.appComponentTypeToken;
	// Compiler Related Dependencies.
	var app_root_url_1 = __webpack_require__(98);
	exports.AppRootUrl = app_root_url_1.AppRootUrl;
	var url_resolver_1 = __webpack_require__(42);
	exports.UrlResolver = url_resolver_1.UrlResolver;
	var component_url_mapper_1 = __webpack_require__(65);
	exports.ComponentUrlMapper = component_url_mapper_1.ComponentUrlMapper;
	var directive_resolver_1 = __webpack_require__(66);
	exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
	var compiler_1 = __webpack_require__(64);
	exports.Compiler = compiler_1.Compiler;
	var view_manager_1 = __webpack_require__(49);
	exports.AppViewManager = view_manager_1.AppViewManager;
	var query_list_1 = __webpack_require__(128);
	exports.QueryList = query_list_1.QueryList;
	var element_ref_1 = __webpack_require__(68);
	exports.ElementRef = element_ref_1.ElementRef;
	var template_ref_1 = __webpack_require__(69);
	exports.TemplateRef = template_ref_1.TemplateRef;
	var view_ref_1 = __webpack_require__(21);
	exports.ViewRef = view_ref_1.ViewRef;
	exports.ProtoViewRef = view_ref_1.ProtoViewRef;
	var view_container_ref_1 = __webpack_require__(129);
	exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
	var dynamic_component_loader_1 = __webpack_require__(126);
	exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
	exports.ComponentRef = dynamic_component_loader_1.ComponentRef;
	var ng_zone_1 = __webpack_require__(135);
	exports.NgZone = ng_zone_1.NgZone;
	var async_1 = __webpack_require__(5);
	exports.Observable = async_1.Observable;
	exports.EventEmitter = async_1.EventEmitter;
	//# sourceMappingURL=core.js.map

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var validators_1 = __webpack_require__(53);
	function controlPath(name, parent) {
	    var p = collection_1.ListWrapper.clone(parent.path);
	    p.push(name);
	    return p;
	}
	exports.controlPath = controlPath;
	function setUpControl(c, dir) {
	    if (lang_1.isBlank(c))
	        _throwError(dir, "Cannot find control");
	    if (lang_1.isBlank(dir.valueAccessor))
	        _throwError(dir, "No value accessor for");
	    c.validator = validators_1.Validators.compose([c.validator, dir.validator]);
	    dir.valueAccessor.writeValue(c.value);
	    // view -> model
	    dir.valueAccessor.registerOnChange(function (newValue) {
	        dir.viewToModelUpdate(newValue);
	        c.updateValue(newValue, { emitModelToViewChange: false });
	        c.markAsDirty();
	    });
	    // model -> view
	    c.registerOnChange(function (newValue) { return dir.valueAccessor.writeValue(newValue); });
	    // touched
	    dir.valueAccessor.registerOnTouched(function () { return c.markAsTouched(); });
	}
	exports.setUpControl = setUpControl;
	function composeNgValidator(ngValidators) {
	    if (lang_1.isBlank(ngValidators))
	        return validators_1.Validators.nullValidator;
	    return validators_1.Validators.compose(ngValidators.map(function (v) { return v.validator; }));
	}
	exports.composeNgValidator = composeNgValidator;
	function _throwError(dir, message) {
	    var path = collection_1.ListWrapper.join(dir.path, " -> ");
	    throw new lang_1.BaseException(message + " '" + path + "'");
	}
	function setProperty(renderer, elementRef, propName, propValue) {
	    renderer.setElementProperty(elementRef, propName, propValue);
	}
	exports.setProperty = setProperty;
	function isPropertyUpdated(changes, viewModel) {
	    if (!collection_1.StringMapWrapper.contains(changes, "model"))
	        return false;
	    var change = changes["model"];
	    if (change.isFirstChange())
	        return true;
	    return !lang_1.looseIdentical(viewModel, change.currentValue);
	}
	exports.isPropertyUpdated = isPropertyUpdated;
	//# sourceMappingURL=shared.js.map

/***/ },
/* 15 */,
/* 16 */,
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	
	var base64 = __webpack_require__(242)
	var ieee754 = __webpack_require__(243)
	var isArray = __webpack_require__(244)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation
	
	var rootParent = {}
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  function Foo () {}
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    arr.constructor = Foo
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Foo && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }
	
	  this.length = 0
	  this.parent = undefined
	
	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }
	
	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }
	
	  // Unusual.
	  return fromObject(this, arg)
	}
	
	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'
	
	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)
	
	  that.write(string, encoding)
	  return that
	}
	
	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)
	
	  if (isArray(object)) return fromArray(that, object)
	
	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object)
	  }
	
	  if (object.length) return fromArrayLike(that, object)
	
	  return fromJsonObject(that, object)
	}
	
	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}
	
	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0
	
	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)
	
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }
	
	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent
	
	  return that
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)
	
	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break
	
	    ++i
	  }
	
	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')
	
	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }
	
	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}
	
	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0
	
	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'binary':
	        return binarySlice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0
	
	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1
	
	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)
	
	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }
	
	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}
	
	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'binary':
	        return binaryWrite(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }
	
	  return res + decodeUtf8Char(tmp)
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  if (newBuf.length) newBuf.parent = this.parent || this
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	
	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }
	
	  return len
	}
	
	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length
	
	  if (end < start) throw new RangeError('end < start')
	
	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return
	
	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')
	
	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var BP = Buffer.prototype
	
	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true
	
	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set
	
	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set
	
	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer
	
	  return arr
	}
	
	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0
	
	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet
	
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))

/***/ },
/* 18 */,
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var abstract_control_directive_1 = __webpack_require__(73);
	/**
	 * An abstract class that all control directive extend.
	 *
	 * It binds a {@link Control} object to a DOM element.
	 */
	var NgControl = (function (_super) {
	    __extends(NgControl, _super);
	    function NgControl() {
	        _super.apply(this, arguments);
	        this.name = null;
	        this.valueAccessor = null;
	    }
	    Object.defineProperty(NgControl.prototype, "validator", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControl.prototype, "path", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    NgControl.prototype.viewToModelUpdate = function (newValue) { };
	    return NgControl;
	})(abstract_control_directive_1.AbstractControlDirective);
	exports.NgControl = NgControl;
	//# sourceMappingURL=ng_control.js.map

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var collection_1 = __webpack_require__(2);
	exports.NG_BINDING_CLASS_SELECTOR = '.ng-binding';
	exports.NG_BINDING_CLASS = 'ng-binding';
	exports.EVENT_TARGET_SEPARATOR = ':';
	exports.NG_CONTENT_ELEMENT_NAME = 'ng-content';
	exports.NG_SHADOW_ROOT_ELEMENT_NAME = 'shadow-root';
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	var DASH_CASE_REGEXP = /-([a-z])/g;
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) { return m[1].toUpperCase(); });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	// Attention: This is on the hot path, so don't use closures or default values!
	function queryBoundElements(templateContent, isSingleElementChild) {
	    var result;
	    var dynamicElementList;
	    var elementIdx = 0;
	    if (isSingleElementChild) {
	        var rootElement = dom_adapter_1.DOM.firstChild(templateContent);
	        var rootHasBinding = dom_adapter_1.DOM.hasClass(rootElement, exports.NG_BINDING_CLASS);
	        dynamicElementList = dom_adapter_1.DOM.getElementsByClassName(rootElement, exports.NG_BINDING_CLASS);
	        result = collection_1.ListWrapper.createFixedSize(dynamicElementList.length + (rootHasBinding ? 1 : 0));
	        if (rootHasBinding) {
	            result[elementIdx++] = rootElement;
	        }
	    }
	    else {
	        dynamicElementList = dom_adapter_1.DOM.querySelectorAll(templateContent, exports.NG_BINDING_CLASS_SELECTOR);
	        result = collection_1.ListWrapper.createFixedSize(dynamicElementList.length);
	    }
	    for (var i = 0; i < dynamicElementList.length; i++) {
	        result[elementIdx++] = dynamicElementList[i];
	    }
	    return result;
	}
	exports.queryBoundElements = queryBoundElements;
	var ClonedProtoView = (function () {
	    function ClonedProtoView(original, fragments, boundElements, boundTextNodes) {
	        this.original = original;
	        this.fragments = fragments;
	        this.boundElements = boundElements;
	        this.boundTextNodes = boundTextNodes;
	    }
	    return ClonedProtoView;
	})();
	exports.ClonedProtoView = ClonedProtoView;
	function cloneAndQueryProtoView(pv, importIntoDocument) {
	    var templateContent = importIntoDocument ? dom_adapter_1.DOM.importIntoDoc(dom_adapter_1.DOM.content(pv.rootElement)) :
	        dom_adapter_1.DOM.clone(dom_adapter_1.DOM.content(pv.rootElement));
	    var boundElements = queryBoundElements(templateContent, pv.isSingleElementFragment);
	    var boundTextNodes = queryBoundTextNodes(templateContent, pv.rootTextNodeIndices, boundElements, pv.elementBinders, pv.boundTextNodeCount);
	    var fragments = queryFragments(templateContent, pv.fragmentsRootNodeCount);
	    return new ClonedProtoView(pv, fragments, boundElements, boundTextNodes);
	}
	exports.cloneAndQueryProtoView = cloneAndQueryProtoView;
	function queryFragments(templateContent, fragmentsRootNodeCount) {
	    var fragments = collection_1.ListWrapper.createGrowableSize(fragmentsRootNodeCount.length);
	    // Note: An explicit loop is the fastest way to convert a DOM array into a JS array!
	    var childNode = dom_adapter_1.DOM.firstChild(templateContent);
	    for (var fragmentIndex = 0; fragmentIndex < fragments.length; fragmentIndex++) {
	        var fragment = collection_1.ListWrapper.createFixedSize(fragmentsRootNodeCount[fragmentIndex]);
	        fragments[fragmentIndex] = fragment;
	        for (var i = 0; i < fragment.length; i++) {
	            fragment[i] = childNode;
	            childNode = dom_adapter_1.DOM.nextSibling(childNode);
	        }
	    }
	    return fragments;
	}
	function queryBoundTextNodes(templateContent, rootTextNodeIndices, boundElements, elementBinders, boundTextNodeCount) {
	    var boundTextNodes = collection_1.ListWrapper.createFixedSize(boundTextNodeCount);
	    var textNodeIndex = 0;
	    if (rootTextNodeIndices.length > 0) {
	        var rootChildNodes = dom_adapter_1.DOM.childNodes(templateContent);
	        for (var i = 0; i < rootTextNodeIndices.length; i++) {
	            boundTextNodes[textNodeIndex++] = rootChildNodes[rootTextNodeIndices[i]];
	        }
	    }
	    for (var i = 0; i < elementBinders.length; i++) {
	        var binder = elementBinders[i];
	        var element = boundElements[i];
	        if (binder.textNodeIndices.length > 0) {
	            var childNodes = dom_adapter_1.DOM.childNodes(element);
	            for (var j = 0; j < binder.textNodeIndices.length; j++) {
	                boundTextNodes[textNodeIndex++] = childNodes[binder.textNodeIndices[j]];
	            }
	        }
	    }
	    return boundTextNodes;
	}
	function isElementWithTag(node, elementName) {
	    return dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.tagName(node).toLowerCase() == elementName.toLowerCase();
	}
	exports.isElementWithTag = isElementWithTag;
	function queryBoundTextNodeIndices(parentNode, boundTextNodes, resultCallback) {
	    var childNodes = dom_adapter_1.DOM.childNodes(parentNode);
	    for (var j = 0; j < childNodes.length; j++) {
	        var node = childNodes[j];
	        if (boundTextNodes.has(node)) {
	            resultCallback(node, j, boundTextNodes.get(node));
	        }
	    }
	}
	exports.queryBoundTextNodeIndices = queryBoundTextNodeIndices;
	//# sourceMappingURL=util.js.map

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalView(viewRef) {
	    return viewRef._view;
	}
	exports.internalView = internalView;
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalProtoView(protoViewRef) {
	    return lang_1.isPresent(protoViewRef) ? protoViewRef._protoView : null;
	}
	exports.internalProtoView = internalProtoView;
	/**
	 * A reference to an Angular View.
	 *
	 * A View is a fundamental building block of Application UI. A View is the smallest set of
	 * elements which are created and destroyed together. A View can change properties on the elements
	 * within the view, but it can not change the structure of those elements.
	 *
	 * To change structure of the elements, the Views can contain zero or more {@link ViewContainerRef}s
	 * which allow the views to be nested.
	 *
	 * ## Example
	 *
	 * Given this template
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ng-for="var item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * The above example we have two {@link ProtoViewRef}s:
	 *
	 * Outter {@link ProtoViewRef}:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <template ng-for var-item [ng-for-of]="items"></template>
	 * </ul>
	 * ```
	 *
	 * Inner {@link ProtoViewRef}:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
	 *
	 * The outter/inner {@link ProtoViewRef}s are then assembled into views like so:
	 *
	 * ```
	 * <!-- ViewRef: outter-0 -->
	 * Count: 2
	 * <ul>
	 *   <template view-container-ref></template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outter-0 -->
	 * ```
	 */
	var ViewRef = (function () {
	    function ViewRef(_view) {
	        this._view = _view;
	    }
	    Object.defineProperty(ViewRef.prototype, "render", {
	        /**
	         * Return {@link RenderViewRef}
	         */
	        get: function () { return this._view.render; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef.prototype, "renderFragment", {
	        /**
	         * Return {@link RenderFragmentRef}
	         */
	        get: function () { return this._view.renderFragment; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Set local variable for a view.
	     *
	     *
	     */
	    ViewRef.prototype.setLocal = function (contextName, value) { this._view.setLocal(contextName, value); };
	    return ViewRef;
	})();
	exports.ViewRef = ViewRef;
	/**
	 * A reference to an Angular ProtoView.
	 *
	 * A ProtoView is a reference to a template for easy creation of views.
	 * (See {@link AppViewManager#createViewInContainer} and {@link AppViewManager#createRootHostView}).
	 *
	 * A `ProtoView` is a foctary for creating `View`s.
	 *
	 * ## Example
	 *
	 * Given this template
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ng-for="var item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * The above example we have two {@link ProtoViewRef}s:
	 *
	 * Outter {@link ProtoViewRef}:
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <template ng-for var-item [ng-for-of]="items"></template>
	 * </ul>
	 * ```
	 *
	 * Inner {@link ProtoViewRef}:
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
	 */
	var ProtoViewRef = (function () {
	    /**
	     * @private
	     */
	    function ProtoViewRef(_protoView) {
	        this._protoView = _protoView;
	    }
	    return ProtoViewRef;
	})();
	exports.ProtoViewRef = ProtoViewRef;
	//# sourceMappingURL=view_ref.js.map

/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';/**
	 * Acceptable origin modes to be associated with a {@link Request}, based on
	 * [RequestMode](https://fetch.spec.whatwg.org/#requestmode) from the Fetch spec.
	 */
	(function (RequestModesOpts) {
	    RequestModesOpts[RequestModesOpts["Cors"] = 0] = "Cors";
	    RequestModesOpts[RequestModesOpts["NoCors"] = 1] = "NoCors";
	    RequestModesOpts[RequestModesOpts["SameOrigin"] = 2] = "SameOrigin";
	})(exports.RequestModesOpts || (exports.RequestModesOpts = {}));
	var RequestModesOpts = exports.RequestModesOpts;
	/**
	 * Acceptable cache option to be associated with a {@link Request}, based on
	 * [RequestCache](https://fetch.spec.whatwg.org/#requestcache) from the Fetch spec.
	 */
	(function (RequestCacheOpts) {
	    RequestCacheOpts[RequestCacheOpts["Default"] = 0] = "Default";
	    RequestCacheOpts[RequestCacheOpts["NoStore"] = 1] = "NoStore";
	    RequestCacheOpts[RequestCacheOpts["Reload"] = 2] = "Reload";
	    RequestCacheOpts[RequestCacheOpts["NoCache"] = 3] = "NoCache";
	    RequestCacheOpts[RequestCacheOpts["ForceCache"] = 4] = "ForceCache";
	    RequestCacheOpts[RequestCacheOpts["OnlyIfCached"] = 5] = "OnlyIfCached";
	})(exports.RequestCacheOpts || (exports.RequestCacheOpts = {}));
	var RequestCacheOpts = exports.RequestCacheOpts;
	/**
	 * Acceptable credentials option to be associated with a {@link Request}, based on
	 * [RequestCredentials](https://fetch.spec.whatwg.org/#requestcredentials) from the Fetch spec.
	 */
	(function (RequestCredentialsOpts) {
	    RequestCredentialsOpts[RequestCredentialsOpts["Omit"] = 0] = "Omit";
	    RequestCredentialsOpts[RequestCredentialsOpts["SameOrigin"] = 1] = "SameOrigin";
	    RequestCredentialsOpts[RequestCredentialsOpts["Include"] = 2] = "Include";
	})(exports.RequestCredentialsOpts || (exports.RequestCredentialsOpts = {}));
	var RequestCredentialsOpts = exports.RequestCredentialsOpts;
	/**
	 * Supported http methods.
	 */
	(function (RequestMethods) {
	    RequestMethods[RequestMethods["GET"] = 0] = "GET";
	    RequestMethods[RequestMethods["POST"] = 1] = "POST";
	    RequestMethods[RequestMethods["PUT"] = 2] = "PUT";
	    RequestMethods[RequestMethods["DELETE"] = 3] = "DELETE";
	    RequestMethods[RequestMethods["OPTIONS"] = 4] = "OPTIONS";
	    RequestMethods[RequestMethods["HEAD"] = 5] = "HEAD";
	    RequestMethods[RequestMethods["PATCH"] = 6] = "PATCH";
	})(exports.RequestMethods || (exports.RequestMethods = {}));
	var RequestMethods = exports.RequestMethods;
	// TODO: Remove this when enum lookups are available in ts2dart
	// https://github.com/angular/ts2dart/issues/221
	var RequestMethodsMap = (function () {
	    function RequestMethodsMap() {
	        this._methods = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD', 'PATCH'];
	    }
	    RequestMethodsMap.prototype.getMethod = function (method) { return this._methods[method]; };
	    return RequestMethodsMap;
	})();
	exports.RequestMethodsMap = RequestMethodsMap;
	/**
	 * All possible states in which a connection can be, based on
	 * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an
	 * additional "CANCELLED" state.
	 */
	(function (ReadyStates) {
	    ReadyStates[ReadyStates["UNSENT"] = 0] = "UNSENT";
	    ReadyStates[ReadyStates["OPEN"] = 1] = "OPEN";
	    ReadyStates[ReadyStates["HEADERS_RECEIVED"] = 2] = "HEADERS_RECEIVED";
	    ReadyStates[ReadyStates["LOADING"] = 3] = "LOADING";
	    ReadyStates[ReadyStates["DONE"] = 4] = "DONE";
	    ReadyStates[ReadyStates["CANCELLED"] = 5] = "CANCELLED";
	})(exports.ReadyStates || (exports.ReadyStates = {}));
	var ReadyStates = exports.ReadyStates;
	/**
	 * Acceptable response types to be associated with a {@link Response}, based on
	 * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.
	 */
	(function (ResponseTypes) {
	    ResponseTypes[ResponseTypes["Basic"] = 0] = "Basic";
	    ResponseTypes[ResponseTypes["Cors"] = 1] = "Cors";
	    ResponseTypes[ResponseTypes["Default"] = 2] = "Default";
	    ResponseTypes[ResponseTypes["Error"] = 3] = "Error";
	    ResponseTypes[ResponseTypes["Opaque"] = 4] = "Opaque";
	})(exports.ResponseTypes || (exports.ResponseTypes = {}));
	var ResponseTypes = exports.ResponseTypes;
	//# sourceMappingURL=enums.js.map

/***/ },
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	function extractAnnotation(annotation) {
	    if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
	        // it is a decorator, extract annotation
	        annotation = annotation.annotation;
	    }
	    return annotation;
	}
	function applyParams(fnOrArray, key) {
	    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	        fnOrArray === Number || fnOrArray === Array) {
	        throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
	    }
	    if (lang_1.isFunction(fnOrArray)) {
	        return fnOrArray;
	    }
	    else if (fnOrArray instanceof Array) {
	        var annotations = fnOrArray;
	        var fn = fnOrArray[fnOrArray.length - 1];
	        if (!lang_1.isFunction(fn)) {
	            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
	        }
	        var annoLength = annotations.length - 1;
	        if (annoLength != fn.length) {
	            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
	        }
	        var paramsAnnotations = [];
	        for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
	            var paramAnnotations = [];
	            paramsAnnotations.push(paramAnnotations);
	            var annotation = annotations[i];
	            if (annotation instanceof Array) {
	                for (var j = 0; j < annotation.length; j++) {
	                    paramAnnotations.push(extractAnnotation(annotation[j]));
	                }
	            }
	            else if (lang_1.isFunction(annotation)) {
	                paramAnnotations.push(extractAnnotation(annotation));
	            }
	            else {
	                paramAnnotations.push(annotation);
	            }
	        }
	        Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	        return fn;
	    }
	    else {
	        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
	    }
	}
	/**
	 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	 *
	 * ## Basic Example
	 *
	 * ```
	 * var Greeter = ng.Class({
	 *   constructor: function(name) {
	 *     this.name = name;
	 *   },
	 *
	 *   greet: function() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class Greeter {
	 *   constructor(name) {
	 *     this.name = name;
	 *   }
	 *
	 *   greet() {
	 *     alert('Hello ' + this.name + '!');
	 *   }
	 * }
	 * ```
	 *
	 * or equivalent to ES5:
	 *
	 * ```
	 * var Greeter = function (name) {
	 *   this.name = name;
	 * }
	 *
	 * Greeter.prototype.greet = function () {
	 *   alert('Hello ' + this.name + '!');
	 * }
	 * ```
	 *
	 * ## Example with parameter annotations
	 *
	 * ```
	 * var MyService = neg.Class({
	 *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
	 *     ...
	 *   }];
	 * });
	 * ```
	 *
	 * is equivalent to ES6:
	 *
	 * ```
	 * class MyService {
	 *   constructor(name: string, @Query() queryList: QueryList) {
	 *     ...
	 *   }
	 * }
	 * ```
	 *
	 * ## Example with inheritance
	 *
	 * ```
	 * var Shape = ng.Class({
	 *   constructor: (color) {
	 *     this.color = color;
	 *   }
	 * });
	 *
	 * var Square = ng.Class({
	 *   extends: Shape,
	 *   constructor: function(color, size) {
	 *     Shape.call(this, color);
	 *     this.size = size;
	 *   }
	 * });
	 * ```
	 */
	function Class(clsDef) {
	    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	    var proto = constructor.prototype;
	    if (clsDef.hasOwnProperty('extends')) {
	        if (lang_1.isFunction(clsDef.extends)) {
	            constructor.prototype = proto =
	                Object.create(clsDef.extends.prototype);
	        }
	        else {
	            throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
	        }
	    }
	    for (var key in clsDef) {
	        if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
	            proto[key] = applyParams(clsDef[key], key);
	        }
	    }
	    if (this && this.annotations instanceof Array) {
	        Reflect.defineMetadata('annotations', this.annotations, constructor);
	    }
	    return constructor;
	}
	exports.Class = Class;
	var Reflect = lang_1.global.Reflect;
	if (!(Reflect && Reflect.getMetadata)) {
	    throw 'reflect-metadata shim is required when using class decorators';
	}
	function makeDecorator(annotationCls, chainFn) {
	    if (chainFn === void 0) { chainFn = null; }
	    function DecoratorFactory(objOrType) {
	        var annotationInstance = new annotationCls(objOrType);
	        if (this instanceof annotationCls) {
	            return annotationInstance;
	        }
	        else {
	            var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
	            chainAnnotation.push(annotationInstance);
	            var TypeDecorator = function TypeDecorator(cls) {
	                var annotations = Reflect.getMetadata('annotations', cls);
	                annotations = annotations || [];
	                annotations.push(annotationInstance);
	                Reflect.defineMetadata('annotations', annotations, cls);
	                return cls;
	            };
	            TypeDecorator.annotations = chainAnnotation;
	            TypeDecorator.Class = Class;
	            if (chainFn)
	                chainFn(TypeDecorator);
	            return TypeDecorator;
	        }
	    }
	    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
	    return DecoratorFactory;
	}
	exports.makeDecorator = makeDecorator;
	function makeParamDecorator(annotationCls) {
	    function ParamDecoratorFactory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var annotationInstance = Object.create(annotationCls.prototype);
	        annotationCls.apply(annotationInstance, args);
	        if (this instanceof annotationCls) {
	            return annotationInstance;
	        }
	        else {
	            ParamDecorator.annotation = annotationInstance;
	            return ParamDecorator;
	        }
	        function ParamDecorator(cls, unusedKey, index) {
	            var parameters = Reflect.getMetadata('parameters', cls);
	            parameters = parameters || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || [];
	            var annotationsForParam = parameters[index];
	            annotationsForParam.push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        }
	    }
	    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
	    return ParamDecoratorFactory;
	}
	exports.makeParamDecorator = makeParamDecorator;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	/**
	 * A parameter metadata that specifies a dependency.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@Inject(MyService) aService:MyService) {}
	 * }
	 * ```
	 */
	var InjectMetadata = (function () {
	    function InjectMetadata(token) {
	        this.token = token;
	    }
	    InjectMetadata.prototype.toString = function () { return "@Inject(" + lang_1.stringify(this.token) + ")"; };
	    InjectMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], InjectMetadata);
	    return InjectMetadata;
	})();
	exports.InjectMetadata = InjectMetadata;
	/**
	 * A parameter metadata that marks a dependency as optional. {@link Injector} provides `null` if
	 * the dependency is not found.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@Optional() aService:MyService) {
	 *     this.aService = aService;
	 *   }
	 * }
	 * ```
	 */
	var OptionalMetadata = (function () {
	    function OptionalMetadata() {
	    }
	    OptionalMetadata.prototype.toString = function () { return "@Optional()"; };
	    OptionalMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], OptionalMetadata);
	    return OptionalMetadata;
	})();
	exports.OptionalMetadata = OptionalMetadata;
	/**
	 * `DependencyMetadata is used by the framework to extend DI.
	 *
	 * Only metadata implementing `DependencyMetadata` are added to the list of dependency
	 * properties.
	 *
	 * For example:
	 *
	 * ```
	 * class Exclude extends DependencyMetadata {}
	 * class NotDependencyProperty {}
	 *
	 * class AComponent {
	 *   constructor(@Exclude @NotDependencyProperty aService:AService) {}
	 * }
	 * ```
	 *
	 * will create the following dependency:
	 *
	 * ```
	 * new Dependency(Key.get(AService), [new Exclude()])
	 * ```
	 *
	 * The framework can use `new Exclude()` to handle the `aService` dependency
	 * in a specific way.
	 */
	var DependencyMetadata = (function () {
	    function DependencyMetadata() {
	    }
	    Object.defineProperty(DependencyMetadata.prototype, "token", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    DependencyMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DependencyMetadata);
	    return DependencyMetadata;
	})();
	exports.DependencyMetadata = DependencyMetadata;
	/**
	 * A marker metadata that marks a class as available to `Injector` for creation. Used by tooling
	 * for generating constructor stubs.
	 *
	 * ```
	 * class NeedsService {
	 *   constructor(svc:UsefulService) {}
	 * }
	 *
	 * @Injectable
	 * class UsefulService {}
	 * ```
	 */
	var InjectableMetadata = (function () {
	    function InjectableMetadata() {
	    }
	    InjectableMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], InjectableMetadata);
	    return InjectableMetadata;
	})();
	exports.InjectableMetadata = InjectableMetadata;
	/**
	 * Specifies how injector should resolve a dependency.
	 *
	 * See {@link Self}, {@link Ancestor}, {@link Unbounded}.
	 */
	var VisibilityMetadata = (function () {
	    function VisibilityMetadata(crossBoundaries, _includeSelf) {
	        this.crossBoundaries = crossBoundaries;
	        this._includeSelf = _includeSelf;
	    }
	    Object.defineProperty(VisibilityMetadata.prototype, "includeSelf", {
	        get: function () { return lang_1.isBlank(this._includeSelf) ? false : this._includeSelf; },
	        enumerable: true,
	        configurable: true
	    });
	    VisibilityMetadata.prototype.toString = function () {
	        return "@Visibility(crossBoundaries: " + this.crossBoundaries + ", includeSelf: " + this.includeSelf + "})";
	    };
	    VisibilityMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Boolean, Boolean])
	    ], VisibilityMetadata);
	    return VisibilityMetadata;
	})();
	exports.VisibilityMetadata = VisibilityMetadata;
	/**
	 * Specifies that an injector should retrieve a dependency from itself.
	 *
	 * ## Example
	 *
	 * ```
	 * class Dependency {
	 * }
	 *
	 * class NeedsDependency {
	 *   constructor(public @Self() dependency:Dependency) {}
	 * }
	 *
	 * var inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);
	 * var nd = inj.get(NeedsDependency);
	 * expect(nd.dependency).toBeAnInstanceOf(Dependency);
	 * ```
	 */
	var SelfMetadata = (function (_super) {
	    __extends(SelfMetadata, _super);
	    function SelfMetadata() {
	        _super.call(this, false, true);
	    }
	    SelfMetadata.prototype.toString = function () { return "@Self()"; };
	    SelfMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], SelfMetadata);
	    return SelfMetadata;
	})(VisibilityMetadata);
	exports.SelfMetadata = SelfMetadata;
	/**
	 * Specifies that an injector should retrieve a dependency from any ancestor from the same boundary.
	 *
	 * ## Example
	 *
	 * ```
	 * class Dependency {
	 * }
	 *
	 * class NeedsDependency {
	 *   constructor(public @Ancestor() dependency:Dependency) {}
	 * }
	 *
	 * var parent = Injector.resolveAndCreate([
	 *   bind(Dependency).toClass(AncestorDependency)
	 * ]);
	 * var child = parent.resolveAndCreateChild([]);
	 * var grandChild = child.resolveAndCreateChild([NeedsDependency, Depedency]);
	 * var nd = grandChild.get(NeedsDependency);
	 * expect(nd.dependency).toBeAnInstanceOf(AncestorDependency);
	 * ```
	 *
	 * You can make an injector to retrive a dependency either from itself or its ancestor by setting
	 * self to true.
	 *
	 * ```
	 * class NeedsDependency {
	 *   constructor(public @Ancestor({self:true}) dependency:Dependency) {}
	 * }
	 * ```
	 */
	var AncestorMetadata = (function (_super) {
	    __extends(AncestorMetadata, _super);
	    function AncestorMetadata(_a) {
	        var self = (_a === void 0 ? {} : _a).self;
	        _super.call(this, false, self);
	    }
	    AncestorMetadata.prototype.toString = function () { return "@Ancestor(self: " + this.includeSelf + "})"; };
	    AncestorMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], AncestorMetadata);
	    return AncestorMetadata;
	})(VisibilityMetadata);
	exports.AncestorMetadata = AncestorMetadata;
	/**
	 * Specifies that an injector should retrieve a dependency from any ancestor, crossing boundaries.
	 *
	 * ## Example
	 *
	 * ```
	 * class Dependency {
	 * }
	 *
	 * class NeedsDependency {
	 *   constructor(public @Ancestor() dependency:Dependency) {}
	 * }
	 *
	 * var parent = Injector.resolveAndCreate([
	 *   bind(Dependency).toClass(AncestorDependency)
	 * ]);
	 * var child = parent.resolveAndCreateChild([]);
	 * var grandChild = child.resolveAndCreateChild([NeedsDependency, Depedency]);
	 * var nd = grandChild.get(NeedsDependency);
	 * expect(nd.dependency).toBeAnInstanceOf(AncestorDependency);
	 * ```
	 *
	 * You can make an injector to retrive a dependency either from itself or its ancestor by setting
	 * self to true.
	 *
	 * ```
	 * class NeedsDependency {
	 *   constructor(public @Ancestor({self:true}) dependency:Dependency) {}
	 * }
	 * ```
	 */
	var UnboundedMetadata = (function (_super) {
	    __extends(UnboundedMetadata, _super);
	    function UnboundedMetadata(_a) {
	        var self = (_a === void 0 ? {} : _a).self;
	        _super.call(this, true, self);
	    }
	    UnboundedMetadata.prototype.toString = function () { return "@Unbounded(self: " + this.includeSelf + "})"; };
	    UnboundedMetadata = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], UnboundedMetadata);
	    return UnboundedMetadata;
	})(VisibilityMetadata);
	exports.UnboundedMetadata = UnboundedMetadata;
	exports.DEFAULT_VISIBILITY = lang_1.CONST_EXPR(new UnboundedMetadata({ self: true }));
	//# sourceMappingURL=metadata.js.map

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var annotations_1 = __webpack_require__(8);
	var validators_1 = __webpack_require__(53);
	var NgValidator = (function () {
	    function NgValidator() {
	    }
	    Object.defineProperty(NgValidator.prototype, "validator", {
	        get: function () { throw "Is not implemented"; },
	        enumerable: true,
	        configurable: true
	    });
	    return NgValidator;
	})();
	exports.NgValidator = NgValidator;
	var requiredValidatorBinding = lang_1.CONST_EXPR(new di_1.Binding(NgValidator, { toAlias: di_1.forwardRef(function () { return NgRequiredValidator; }) }));
	var NgRequiredValidator = (function (_super) {
	    __extends(NgRequiredValidator, _super);
	    function NgRequiredValidator() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(NgRequiredValidator.prototype, "validator", {
	        get: function () { return validators_1.Validators.required; },
	        enumerable: true,
	        configurable: true
	    });
	    NgRequiredValidator = __decorate([
	        annotations_1.Directive({
	            selector: '[required][ng-control],[required][ng-form-control],[required][ng-model]',
	            hostInjector: [requiredValidatorBinding]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgRequiredValidator);
	    return NgRequiredValidator;
	})(NgValidator);
	exports.NgRequiredValidator = NgRequiredValidator;
	//# sourceMappingURL=validators.js.map

/***/ },
/* 29 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	function bindArguments(args) {
	  for (var i = args.length - 1; i >= 0; i--) {
	    if (typeof args[i] === 'function') {
	      args[i] = global.zone.bind(args[i]);
	    }
	  }
	  return args;
	};
	
	function bindArgumentsOnce(args) {
	  for (var i = args.length - 1; i >= 0; i--) {
	    if (typeof args[i] === 'function') {
	      args[i] = global.zone.bindOnce(args[i]);
	    }
	  }
	  return args;
	};
	
	function patchPrototype(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    if (delegate) {
	      obj[name] = function () {
	        return delegate.apply(this, bindArguments(arguments));
	      };
	    }
	  });
	};
	
	function patchProperty(obj, prop) {
	  var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
	    enumerable: true,
	    configurable: true
	  };
	
	  // A property descriptor cannot have getter/setter and be writable
	  // deleting the writable and value properties avoids this error:
	  //
	  // TypeError: property descriptors must not specify a value or be writable when a
	  // getter or setter has been specified
	  delete desc.writable;
	  delete desc.value;
	
	  // substr(2) cuz 'onclick' -> 'click', etc
	  var eventName = prop.substr(2);
	  var _prop = '_' + prop;
	
	  desc.set = function (fn) {
	    if (this[_prop]) {
	      this.removeEventListener(eventName, this[_prop]);
	    }
	
	    if (typeof fn === 'function') {
	      this[_prop] = fn;
	      this.addEventListener(eventName, fn, false);
	    } else {
	      this[_prop] = null;
	    }
	  };
	
	  desc.get = function () {
	    return this[_prop];
	  };
	
	  Object.defineProperty(obj, prop, desc);
	};
	
	function patchProperties(obj, properties) {
	
	  (properties || (function () {
	      var props = [];
	      for (var prop in obj) {
	        props.push(prop);
	      }
	      return props;
	    }()).
	    filter(function (propertyName) {
	      return propertyName.substr(0,2) === 'on';
	    })).
	    forEach(function (eventName) {
	      patchProperty(obj, eventName);
	    });
	};
	
	function patchEventTargetMethods(obj) {
	  var addDelegate = obj.addEventListener;
	  obj.addEventListener = function (eventName, fn) {
	    fn._bound = fn._bound || {};
	    arguments[1] = fn._bound[eventName] = zone.bind(fn);
	    return addDelegate.apply(this, arguments);
	  };
	
	  var removeDelegate = obj.removeEventListener;
	  obj.removeEventListener = function (eventName, fn) {
	    if(arguments[1]._bound && arguments[1]._bound[eventName]) {
	      var _bound = arguments[1]._bound;
	      arguments[1] = _bound[eventName];
	      delete _bound[eventName];
	    }
	    var result = removeDelegate.apply(this, arguments);
	    global.zone.dequeueTask(fn);
	    return result;
	  };
	};
	
	// wrap some native API on `window`
	function patchClass(className) {
	  var OriginalClass = global[className];
	  if (!OriginalClass) return;
	
	  global[className] = function () {
	    var a = bindArguments(arguments);
	    switch (a.length) {
	      case 0: this._o = new OriginalClass(); break;
	      case 1: this._o = new OriginalClass(a[0]); break;
	      case 2: this._o = new OriginalClass(a[0], a[1]); break;
	      case 3: this._o = new OriginalClass(a[0], a[1], a[2]); break;
	      case 4: this._o = new OriginalClass(a[0], a[1], a[2], a[3]); break;
	      default: throw new Error('what are you even doing?');
	    }
	  };
	
	  var instance = new OriginalClass();
	
	  var prop;
	  for (prop in instance) {
	    (function (prop) {
	      if (typeof instance[prop] === 'function') {
	        global[className].prototype[prop] = function () {
	          return this._o[prop].apply(this._o, arguments);
	        };
	      } else {
	        Object.defineProperty(global[className].prototype, prop, {
	          set: function (fn) {
	            if (typeof fn === 'function') {
	              this._o[prop] = global.zone.bind(fn);
	            } else {
	              this._o[prop] = fn;
	            }
	          },
	          get: function () {
	            return this._o[prop];
	          }
	        });
	      }
	    }(prop));
	  }
	
	  for (prop in OriginalClass) {
	    if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	      global[className][prop] = OriginalClass[prop];
	    }
	  }
	};
	
	module.exports = {
	  bindArguments: bindArguments,
	  bindArgumentsOnce: bindArgumentsOnce,
	  patchPrototype: patchPrototype,
	  patchProperty: patchProperty,
	  patchProperties: patchProperties,
	  patchEventTargetMethods: patchEventTargetMethods,
	  patchClass: patchClass
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 30 */
/***/ function(module, exports) {

	'use strict';// TODO:vsavkin Use enums after switching to TypeScript
	/**
	 * CHECK_ONCE means that after calling detectChanges the mode of the change detector
	 * will become CHECKED.
	 */
	exports.CHECK_ONCE = "CHECK_ONCE";
	/**
	 * CHECKED means that the change detector should be skipped until its mode changes to
	 * CHECK_ONCE or CHECK_ALWAYS.
	 */
	exports.CHECKED = "CHECKED";
	/**
	 * CHECK_ALWAYS means that after calling detectChanges the mode of the change detector
	 * will remain CHECK_ALWAYS.
	 */
	exports.CHECK_ALWAYS = "ALWAYS_CHECK";
	/**
	 * DETACHED means that the change detector sub tree is not a part of the main tree and
	 * should be skipped.
	 */
	exports.DETACHED = "DETACHED";
	/**
	 * ON_PUSH means that the change detector's mode will be set to CHECK_ONCE during hydration.
	 */
	exports.ON_PUSH = "ON_PUSH";
	/**
	 * DEFAULT means that the change detector's mode will be set to CHECK_ALWAYS during hydration.
	 */
	exports.DEFAULT = "DEFAULT";
	//# sourceMappingURL=constants.js.map

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var annotations_1 = __webpack_require__(121);
	var view_1 = __webpack_require__(123);
	var di_1 = __webpack_require__(122);
	var decorators_1 = __webpack_require__(26);
	/**
	 * {@link Component} factory function.
	 */
	exports.Component = decorators_1.makeDecorator(annotations_1.ComponentAnnotation, function (fn) { return fn.View = exports.View; });
	/**
	 * {@link Directive} factory function.
	 */
	exports.Directive = decorators_1.makeDecorator(annotations_1.DirectiveAnnotation);
	/**
	 * {@link View} factory function.
	 */
	exports.View = decorators_1.makeDecorator(view_1.ViewAnnotation, function (fn) { return fn.View = exports.View; });
	/**
	 * {@link Attribute} factory function.
	 */
	exports.Attribute = decorators_1.makeParamDecorator(di_1.AttributeAnnotation);
	/**
	 * {@link Query} factory function.
	 */
	exports.Query = decorators_1.makeParamDecorator(di_1.QueryAnnotation);
	/**
	 * {@link ViewQuery} factory function.
	 */
	exports.ViewQuery = decorators_1.makeParamDecorator(di_1.ViewQueryAnnotation);
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var abstract_control_directive_1 = __webpack_require__(73);
	/**
	 * A directive that contains a group of [NgControl].
	 *
	 * Only used by the forms module.
	 */
	var ControlContainer = (function (_super) {
	    __extends(ControlContainer, _super);
	    function ControlContainer() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(ControlContainer.prototype, "formDirective", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ControlContainer.prototype, "path", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    return ControlContainer;
	})(abstract_control_directive_1.AbstractControlDirective);
	exports.ControlContainer = ControlContainer;
	//# sourceMappingURL=control_container.js.map

/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict';var ShadowDomStrategy = (function () {
	    function ShadowDomStrategy() {
	    }
	    // Whether the strategy understands the native <content> tag
	    ShadowDomStrategy.prototype.hasNativeContentElement = function () { return true; };
	    // An optional step that can modify the template style elements.
	    ShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleElement) { };
	    // An optional step that can modify the template elements (style elements exlcuded).
	    ShadowDomStrategy.prototype.processElement = function (hostComponentId, elementComponentId, element) { };
	    return ShadowDomStrategy;
	})();
	exports.ShadowDomStrategy = ShadowDomStrategy;
	//# sourceMappingURL=shadow_dom_strategy.js.map

/***/ },
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	/**
	 * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var UrlResolver = (function () {
	    function UrlResolver() {
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`:
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	     * returned as is (ignoring the `baseUrl`)
	     *
	     * @param {string} baseUrl
	     * @param {string} url
	     * @returns {string} the resolved URL
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) { return _resolveUrl(baseUrl, url); };
	    UrlResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], UrlResolver);
	    return UrlResolver;
	})();
	exports.UrlResolver = UrlResolver;
	// The code below is adapted from Traceur:
	// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
	/**
	 * Builds a URI string from already-encoded parts.
	 *
	 * No encoding is performed.  Any component may be omitted as either null or
	 * undefined.
	 *
	 * @param {?string=} opt_scheme The scheme such as 'http'.
	 * @param {?string=} opt_userInfo The user name before the '@'.
	 * @param {?string=} opt_domain The domain such as 'www.google.com', already
	 *     URI-encoded.
	 * @param {(string|null)=} opt_port The port number.
	 * @param {?string=} opt_path The path, already URI-encoded.  If it is not
	 *     empty, it must begin with a slash.
	 * @param {?string=} opt_queryData The URI-encoded query data.
	 * @param {?string=} opt_fragment The URI-encoded fragment identifier.
	 * @return {string} The fully combined URI.
	 */
	function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var out = [];
	    if (lang_1.isPresent(opt_scheme)) {
	        out.push(opt_scheme + ':');
	    }
	    if (lang_1.isPresent(opt_domain)) {
	        out.push('//');
	        if (lang_1.isPresent(opt_userInfo)) {
	            out.push(opt_userInfo + '@');
	        }
	        out.push(opt_domain);
	        if (lang_1.isPresent(opt_port)) {
	            out.push(':' + opt_port);
	        }
	    }
	    if (lang_1.isPresent(opt_path)) {
	        out.push(opt_path);
	    }
	    if (lang_1.isPresent(opt_queryData)) {
	        out.push('?' + opt_queryData);
	    }
	    if (lang_1.isPresent(opt_fragment)) {
	        out.push('#' + opt_fragment);
	    }
	    return out.join('');
	}
	/**
	 * A regular expression for breaking a URI into its component parts.
	 *
	 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	 * As the "first-match-wins" algorithm is identical to the "greedy"
	 * disambiguation method used by POSIX regular expressions, it is natural and
	 * commonplace to use a regular expression for parsing the potential five
	 * components of a URI reference.
	 *
	 * The following line is the regular expression for breaking-down a
	 * well-formed URI reference into its components.
	 *
	 * <pre>
	 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	 *  12            3  4          5       6  7        8 9
	 * </pre>
	 *
	 * The numbers in the second line above are only to assist readability; they
	 * indicate the reference points for each subexpression (i.e., each paired
	 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	 * For example, matching the above expression to
	 * <pre>
	 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	 * </pre>
	 * results in the following subexpression matches:
	 * <pre>
	 *    $1 = http:
	 *    $2 = http
	 *    $3 = //www.ics.uci.edu
	 *    $4 = www.ics.uci.edu
	 *    $5 = /pub/ietf/uri/
	 *    $6 = <undefined>
	 *    $7 = <undefined>
	 *    $8 = #Related
	 *    $9 = Related
	 * </pre>
	 * where <undefined> indicates that the component is not present, as is the
	 * case for the query component in the above example. Therefore, we can
	 * determine the value of the five components as
	 * <pre>
	 *    scheme    = $2
	 *    authority = $4
	 *    path      = $5
	 *    query     = $7
	 *    fragment  = $9
	 * </pre>
	 *
	 * The regular expression has been modified slightly to expose the
	 * userInfo, domain, and port separately from the authority.
	 * The modified version yields
	 * <pre>
	 *    $1 = http              scheme
	 *    $2 = <undefined>       userInfo -\
	 *    $3 = www.ics.uci.edu   domain     | authority
	 *    $4 = <undefined>       port     -/
	 *    $5 = /pub/ietf/uri/    path
	 *    $6 = <undefined>       query without ?
	 *    $7 = Related           fragment without #
	 * </pre>
	 * @type {!RegExp}
	 * @private
	 */
	var _splitRe = lang_1.RegExpWrapper.create('^' +
	    '(?:' +
	    '([^:/?#.]+)' +
	    // used by other URL parts such as :,
	    // ?, /, #, and .
	    ':)?' +
	    '(?://' +
	    '(?:([^/?#]*)@)?' +
	    '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	    // digits, dashes, dots, percent
	    // escapes, and unicode characters.
	    '(?::([0-9]+))?' +
	    ')?' +
	    '([^?#]+)?' +
	    '(?:\\?([^#]*))?' +
	    '(?:#(.*))?' +
	    '$');
	/**
	 * The index of each URI component in the return value of goog.uri.utils.split.
	 * @enum {number}
	 */
	var _ComponentIndex;
	(function (_ComponentIndex) {
	    _ComponentIndex[_ComponentIndex["SCHEME"] = 1] = "SCHEME";
	    _ComponentIndex[_ComponentIndex["USER_INFO"] = 2] = "USER_INFO";
	    _ComponentIndex[_ComponentIndex["DOMAIN"] = 3] = "DOMAIN";
	    _ComponentIndex[_ComponentIndex["PORT"] = 4] = "PORT";
	    _ComponentIndex[_ComponentIndex["PATH"] = 5] = "PATH";
	    _ComponentIndex[_ComponentIndex["QUERY_DATA"] = 6] = "QUERY_DATA";
	    _ComponentIndex[_ComponentIndex["FRAGMENT"] = 7] = "FRAGMENT";
	})(_ComponentIndex || (_ComponentIndex = {}));
	/**
	 * Splits a URI into its component parts.
	 *
	 * Each component can be accessed via the component indices; for example:
	 * <pre>
	 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	 * </pre>
	 *
	 * @param {string} uri The URI string to examine.
	 * @return {!Array.<string|undefined>} Each component still URI-encoded.
	 *     Each component that is present will contain the encoded value, whereas
	 *     components that are not present will be undefined or empty, depending
	 *     on the browser's regular expression implementation.  Never null, since
	 *     arbitrary strings may still look like path names.
	 */
	function _split(uri) {
	    return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
	}
	/**
	  * Removes dot segments in given path component, as described in
	  * RFC 3986, section 5.2.4.
	  *
	  * @param {string} path A non-empty path component.
	  * @return {string} Path component with removed dot segments.
	  */
	function _removeDotSegments(path) {
	    if (path == '/')
	        return '/';
	    var leadingSlash = path[0] == '/' ? '/' : '';
	    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	    var segments = path.split('/');
	    var out = [];
	    var up = 0;
	    for (var pos = 0; pos < segments.length; pos++) {
	        var segment = segments[pos];
	        switch (segment) {
	            case '':
	            case '.':
	                break;
	            case '..':
	                if (out.length > 0) {
	                    collection_1.ListWrapper.removeAt(out, out.length - 1);
	                }
	                else {
	                    up++;
	                }
	                break;
	            default:
	                out.push(segment);
	        }
	    }
	    if (leadingSlash == '') {
	        while (up-- > 0) {
	            collection_1.ListWrapper.insert(out, 0, '..');
	        }
	        if (out.length === 0)
	            out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	}
	/**
	 * Takes an array of the parts from split and canonicalizes the path part
	 * and then joins all the parts.
	 * @param {Array.<string?>} parts
	 * @return {string}
	 */
	function _joinAndCanonicalizePath(parts) {
	    var path = parts[_ComponentIndex.PATH];
	    path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
	    parts[_ComponentIndex.PATH] = path;
	    return _buildFromEncodedParts(parts[_ComponentIndex.SCHEME], parts[_ComponentIndex.USER_INFO], parts[_ComponentIndex.DOMAIN], parts[_ComponentIndex.PORT], path, parts[_ComponentIndex.QUERY_DATA], parts[_ComponentIndex.FRAGMENT]);
	}
	/**
	 * Resolves a URL.
	 * @param {string} base The URL acting as the base URL.
	 * @param {string} to The URL to resolve.
	 * @return {string}
	 */
	function _resolveUrl(base, url) {
	    var parts = _split(url);
	    var baseParts = _split(base);
	    if (lang_1.isPresent(parts[_ComponentIndex.SCHEME])) {
	        return _joinAndCanonicalizePath(parts);
	    }
	    else {
	        parts[_ComponentIndex.SCHEME] = baseParts[_ComponentIndex.SCHEME];
	    }
	    for (var i = _ComponentIndex.SCHEME; i <= _ComponentIndex.PORT; i++) {
	        if (lang_1.isBlank(parts[i])) {
	            parts[i] = baseParts[i];
	        }
	    }
	    if (parts[_ComponentIndex.PATH][0] == '/') {
	        return _joinAndCanonicalizePath(parts);
	    }
	    var path = baseParts[_ComponentIndex.PATH];
	    if (lang_1.isBlank(path))
	        path = '/';
	    var index = path.lastIndexOf('/');
	    path = path.substring(0, index + 1) + parts[_ComponentIndex.PATH];
	    parts[_ComponentIndex.PATH] = path;
	    return _joinAndCanonicalizePath(parts);
	}
	//# sourceMappingURL=url_resolver.js.map

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * This module provides advanced support for extending dom strategy.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(87));
	__export(__webpack_require__(33));
	__export(__webpack_require__(203));
	__export(__webpack_require__(202));
	__export(__webpack_require__(89));
	__export(__webpack_require__(7));
	//# sourceMappingURL=render.js.map

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var exceptions_1 = __webpack_require__(60);
	var pipe_1 = __webpack_require__(11);
	var constants_1 = __webpack_require__(30);
	exports.uninitialized = new Object();
	var SimpleChange = (function () {
	    function SimpleChange(previousValue, currentValue) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	    }
	    SimpleChange.prototype.isFirstChange = function () { return this.previousValue === exports.uninitialized; };
	    return SimpleChange;
	})();
	exports.SimpleChange = SimpleChange;
	var _simpleChangesIndex = 0;
	var _simpleChanges = [
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null),
	    new SimpleChange(null, null)
	];
	function _simpleChange(previousValue, currentValue) {
	    var index = _simpleChangesIndex++ % 20;
	    var s = _simpleChanges[index];
	    s.previousValue = previousValue;
	    s.currentValue = currentValue;
	    return s;
	}
	/* tslint:disable:requireParameterType */
	var ChangeDetectionUtil = (function () {
	    function ChangeDetectionUtil() {
	    }
	    ChangeDetectionUtil.uninitialized = function () { return exports.uninitialized; };
	    ChangeDetectionUtil.arrayFn0 = function () { return []; };
	    ChangeDetectionUtil.arrayFn1 = function (a1) { return [a1]; };
	    ChangeDetectionUtil.arrayFn2 = function (a1, a2) { return [a1, a2]; };
	    ChangeDetectionUtil.arrayFn3 = function (a1, a2, a3) { return [a1, a2, a3]; };
	    ChangeDetectionUtil.arrayFn4 = function (a1, a2, a3, a4) { return [a1, a2, a3, a4]; };
	    ChangeDetectionUtil.arrayFn5 = function (a1, a2, a3, a4, a5) { return [a1, a2, a3, a4, a5]; };
	    ChangeDetectionUtil.arrayFn6 = function (a1, a2, a3, a4, a5, a6) { return [a1, a2, a3, a4, a5, a6]; };
	    ChangeDetectionUtil.arrayFn7 = function (a1, a2, a3, a4, a5, a6, a7) { return [a1, a2, a3, a4, a5, a6, a7]; };
	    ChangeDetectionUtil.arrayFn8 = function (a1, a2, a3, a4, a5, a6, a7, a8) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8];
	    };
	    ChangeDetectionUtil.arrayFn9 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
	    };
	    ChangeDetectionUtil.operation_negate = function (value) { return !value; };
	    ChangeDetectionUtil.operation_add = function (left, right) { return left + right; };
	    ChangeDetectionUtil.operation_subtract = function (left, right) { return left - right; };
	    ChangeDetectionUtil.operation_multiply = function (left, right) { return left * right; };
	    ChangeDetectionUtil.operation_divide = function (left, right) { return left / right; };
	    ChangeDetectionUtil.operation_remainder = function (left, right) { return left % right; };
	    ChangeDetectionUtil.operation_equals = function (left, right) { return left == right; };
	    ChangeDetectionUtil.operation_not_equals = function (left, right) { return left != right; };
	    ChangeDetectionUtil.operation_identical = function (left, right) { return left === right; };
	    ChangeDetectionUtil.operation_not_identical = function (left, right) { return left !== right; };
	    ChangeDetectionUtil.operation_less_then = function (left, right) { return left < right; };
	    ChangeDetectionUtil.operation_greater_then = function (left, right) { return left > right; };
	    ChangeDetectionUtil.operation_less_or_equals_then = function (left, right) { return left <= right; };
	    ChangeDetectionUtil.operation_greater_or_equals_then = function (left, right) { return left >= right; };
	    ChangeDetectionUtil.operation_logical_and = function (left, right) { return left && right; };
	    ChangeDetectionUtil.operation_logical_or = function (left, right) { return left || right; };
	    ChangeDetectionUtil.cond = function (cond, trueVal, falseVal) { return cond ? trueVal : falseVal; };
	    ChangeDetectionUtil.mapFn = function (keys) {
	        function buildMap(values) {
	            var res = collection_1.StringMapWrapper.create();
	            for (var i = 0; i < keys.length; ++i) {
	                collection_1.StringMapWrapper.set(res, keys[i], values[i]);
	            }
	            return res;
	        }
	        switch (keys.length) {
	            case 0:
	                return function () { return []; };
	            case 1:
	                return function (a1) { return buildMap([a1]); };
	            case 2:
	                return function (a1, a2) { return buildMap([a1, a2]); };
	            case 3:
	                return function (a1, a2, a3) { return buildMap([a1, a2, a3]); };
	            case 4:
	                return function (a1, a2, a3, a4) { return buildMap([a1, a2, a3, a4]); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return buildMap([a1, a2, a3, a4, a5]); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return buildMap([a1, a2, a3, a4, a5, a6]); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return buildMap([a1, a2, a3, a4, a5, a6, a7]); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]); };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                    return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
	                };
	            default:
	                throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
	        }
	    };
	    ChangeDetectionUtil.keyedAccess = function (obj, args) { return obj[args[0]]; };
	    ChangeDetectionUtil.unwrapValue = function (value) {
	        if (value instanceof pipe_1.WrappedValue) {
	            return value.wrapped;
	        }
	        else {
	            return value;
	        }
	    };
	    ChangeDetectionUtil.throwOnChange = function (proto, change) {
	        throw new exceptions_1.ExpressionChangedAfterItHasBeenChecked(proto, change);
	    };
	    ChangeDetectionUtil.throwDehydrated = function () { throw new exceptions_1.DehydratedException(); };
	    ChangeDetectionUtil.changeDetectionMode = function (strategy) {
	        return strategy == constants_1.ON_PUSH ? constants_1.CHECK_ONCE : constants_1.CHECK_ALWAYS;
	    };
	    ChangeDetectionUtil.simpleChange = function (previousValue, currentValue) {
	        return _simpleChange(previousValue, currentValue);
	    };
	    ChangeDetectionUtil.addChange = function (changes, propertyName, change) {
	        if (lang_1.isBlank(changes)) {
	            changes = {};
	        }
	        changes[propertyName] = change;
	        return changes;
	    };
	    ChangeDetectionUtil.isValueBlank = function (value) { return lang_1.isBlank(value); };
	    return ChangeDetectionUtil;
	})();
	exports.ChangeDetectionUtil = ChangeDetectionUtil;
	//# sourceMappingURL=change_detection_util.js.map

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var di_1 = __webpack_require__(3);
	var di_2 = __webpack_require__(3);
	var Pipes = (function () {
	    function Pipes(config) {
	        this.config = config;
	    }
	    Pipes.prototype.get = function (type, obj, cdRef, existingPipe) {
	        if (lang_1.isPresent(existingPipe) && existingPipe.supports(obj))
	            return existingPipe;
	        if (lang_1.isPresent(existingPipe))
	            existingPipe.onDestroy();
	        var factories = this._getListOfFactories(type, obj);
	        var factory = this._getMatchingFactory(factories, type, obj);
	        return factory.create(cdRef);
	    };
	    /**
	     * Takes a {@link Pipes} config object and returns a binding used to extend the
	     * inherited {@link Pipes} instance with the provided config and return a new
	     * {@link Pipes} instance.
	     *
	     * If the provided config contains a key that is not yet present in the
	     * inherited {@link Pipes}' config, a new {@link PipeFactory} list will be created
	     * for that key. Otherwise, the provided config will be merged with the inherited
	     * {@link Pipes} instance by prepending pipes to their respective keys, without mutating
	     * the inherited {@link Pipes}.
	     *
	     * The following example shows how to extend an existing list of `async` factories
	     * with a new {@link PipeFactory}, which will only be applied to the injector
	     * for this component and its children. This step is all that's required to make a new
	     * pipe available to this component's template.
	     *
	     * # Example
	     *
	     * ```
	     * @Component({
	     *   viewInjector: [
	     *     Pipes.extend({
	     *       async: [newAsyncPipe]
	     *     })
	     *   ]
	     * })
	     * ```
	     */
	    Pipes.extend = function (config) {
	        return new di_2.Binding(Pipes, {
	            toFactory: function (pipes) {
	                if (lang_1.isBlank(pipes)) {
	                    // Typically would occur when calling Pipe.extend inside of dependencies passed to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new lang_1.BaseException('Cannot extend Pipes without a parent injector');
	                }
	                return Pipes.create(config, pipes);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[Pipes, new di_1.UnboundedMetadata(), new di_1.OptionalMetadata()]]
	        });
	    };
	    Pipes.create = function (config, pipes) {
	        if (pipes === void 0) { pipes = null; }
	        if (lang_1.isPresent(pipes)) {
	            collection_1.StringMapWrapper.forEach(pipes.config, function (v, k) {
	                if (collection_1.StringMapWrapper.contains(config, k)) {
	                    var configFactories = config[k];
	                    config[k] = configFactories.concat(v);
	                }
	                else {
	                    config[k] = collection_1.ListWrapper.clone(v);
	                }
	            });
	        }
	        return new Pipes(config);
	    };
	    Pipes.prototype._getListOfFactories = function (type, obj) {
	        var listOfFactories = this.config[type];
	        if (lang_1.isBlank(listOfFactories)) {
	            throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
	        }
	        return listOfFactories;
	    };
	    Pipes.prototype._getMatchingFactory = function (listOfFactories, type, obj) {
	        var matchingFactory = collection_1.ListWrapper.find(listOfFactories, function (pipeFactory) { return pipeFactory.supports(obj); });
	        if (lang_1.isBlank(matchingFactory)) {
	            throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
	        }
	        return matchingFactory;
	    };
	    Pipes = __decorate([
	        di_1.Injectable(),
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Pipes);
	    return Pipes;
	})();
	exports.Pipes = Pipes;
	//# sourceMappingURL=pipes.js.map

/***/ },
/* 46 */
/***/ function(module, exports) {

	'use strict';(function (RecordType) {
	    RecordType[RecordType["SELF"] = 0] = "SELF";
	    RecordType[RecordType["CONST"] = 1] = "CONST";
	    RecordType[RecordType["PRIMITIVE_OP"] = 2] = "PRIMITIVE_OP";
	    RecordType[RecordType["PROPERTY"] = 3] = "PROPERTY";
	    RecordType[RecordType["LOCAL"] = 4] = "LOCAL";
	    RecordType[RecordType["INVOKE_METHOD"] = 5] = "INVOKE_METHOD";
	    RecordType[RecordType["INVOKE_CLOSURE"] = 6] = "INVOKE_CLOSURE";
	    RecordType[RecordType["KEYED_ACCESS"] = 7] = "KEYED_ACCESS";
	    RecordType[RecordType["PIPE"] = 8] = "PIPE";
	    RecordType[RecordType["INTERPOLATE"] = 9] = "INTERPOLATE";
	    RecordType[RecordType["SAFE_PROPERTY"] = 10] = "SAFE_PROPERTY";
	    RecordType[RecordType["SAFE_INVOKE_METHOD"] = 11] = "SAFE_INVOKE_METHOD";
	    RecordType[RecordType["DIRECTIVE_LIFECYCLE"] = 12] = "DIRECTIVE_LIFECYCLE";
	})(exports.RecordType || (exports.RecordType = {}));
	var RecordType = exports.RecordType;
	var ProtoRecord = (function () {
	    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, expressionAsString, lastInBinding, lastInDirective) {
	        this.mode = mode;
	        this.name = name;
	        this.funcOrValue = funcOrValue;
	        this.args = args;
	        this.fixedArgs = fixedArgs;
	        this.contextIndex = contextIndex;
	        this.directiveIndex = directiveIndex;
	        this.selfIndex = selfIndex;
	        this.bindingRecord = bindingRecord;
	        this.expressionAsString = expressionAsString;
	        this.lastInBinding = lastInBinding;
	        this.lastInDirective = lastInDirective;
	    }
	    ProtoRecord.prototype.isPureFunction = function () {
	        return this.mode === RecordType.INTERPOLATE || this.mode === RecordType.PRIMITIVE_OP;
	    };
	    ProtoRecord.prototype.isPipeRecord = function () { return this.mode === RecordType.PIPE; };
	    ProtoRecord.prototype.isLifeCycleRecord = function () { return this.mode === RecordType.DIRECTIVE_LIFECYCLE; };
	    return ProtoRecord;
	})();
	exports.ProtoRecord = ProtoRecord;
	//# sourceMappingURL=proto_record.js.map

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var metadata_1 = __webpack_require__(27);
	var change_detection_1 = __webpack_require__(12);
	/**
	 * Directives allow you to attach behavior to elements in the DOM.
	 *
	 * {@link Directive}s with an embedded view are called {@link Component}s.
	 *
	 * A directive consists of a single directive annotation and a controller class. When the
	 * directive's `selector` matches
	 * elements in the DOM, the following steps occur:
	 *
	 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
	 * arguments.
	 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
	 * depth-first order,
	 *    as declared in the HTML.
	 *
	 * ## Understanding How Injection Works
	 *
	 * There are three stages of injection resolution.
	 * - *Pre-existing Injectors*:
	 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
	 * the dependency was
	 *     specified as `@Optional`, returns `null`.
	 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
	 * location, and others.
	 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
	 * the same parent-child hierarchy
	 *     as the component instances in the DOM.
	 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
	 * element has an `ElementInjector`
	 *     which follow the same parent-child hierarchy as the DOM elements themselves.
	 *
	 * When a template is instantiated, it also must instantiate the corresponding directives in a
	 * depth-first order. The
	 * current `ElementInjector` resolves the constructor dependencies for each directive.
	 *
	 * Angular then resolves dependencies as follows, according to the order in which they appear in the
	 * {@link View}:
	 *
	 * 1. Dependencies on the current element
	 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
	 * 3. Dependencies on component injectors and their parents until it encounters the root component
	 * 4. Dependencies on pre-existing injectors
	 *
	 *
	 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
	 * delegate to the parent
	 * injector.
	 *
	 * To inject other directives, declare the constructor parameter as:
	 * - `directive:DirectiveType`: a directive on the current element only
	 * - `@Ancestor() directive:DirectiveType`: any directive that matches the type between the current
	 * element and the
	 *    Shadow DOM root. Current element is not included in the resolution, therefore even if it could
	 * resolve it, it will
	 *    be ignored.
	 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
	 * directives.
	 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
	 * child directives.
	 *
	 * To inject element-specific special objects, declare the constructor parameter as:
	 * - `element: ElementRef` to obtain a reference to logical element in the view.
	 * - `viewContainer: ViewContainerRef` to control child template instantiation, for
	 * {@link Directive} directives only
	 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
	 *
	 * ## Example
	 *
	 * The following example demonstrates how dependency injection resolves constructor arguments in
	 * practice.
	 *
	 *
	 * Assume this HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div dependency="3" my-directive>
	 *       <div dependency="4">
	 *         <div dependency="5"></div>
	 *       </div>
	 *       <div dependency="6"></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * With the following `dependency` decorator and `SomeService` injectable class.
	 *
	 * ```
	 * @Injectable()
	 * class SomeService {
	 * }
	 *
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: [
	 *     'id: dependency'
	 *   ]
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 * ```
	 *
	 * Let's step through the different ways in which `MyDirective` could be declared...
	 *
	 *
	 * ### No injection
	 *
	 * Here the constructor is declared with no arguments, therefore nothing is injected into
	 * `MyDirective`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor() {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with no dependencies.
	 *
	 *
	 * ### Component-level injection
	 *
	 * Directives can inject any injectable instance from the closest component injector or any of its
	 * parents.
	 *
	 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
	 * from the parent
	 * component's injector.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(someService: SomeService) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a dependency on `SomeService`.
	 *
	 *
	 * ### Injecting a directive from the current element
	 *
	 * Directives can inject other directives declared on the current element.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(dependency: Dependency) {
	 *     expect(dependency.id).toEqual(3);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the same element, in this case
	 * `dependency="3"`.
	 *
	 * ### Injecting a directive from any ancestor elements
	 *
	 * Directives can inject other directives declared on any ancestor element (in the current Shadow
	 * DOM), i.e. on the
	 * parent element and its parents. By definition, a directive with an `@Ancestor` annotation does
	 * not attempt to
	 * resolve dependencies for the current element, even if this would satisfy the dependency.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Ancestor() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 *
	 * `@Ancestor` checks the parent, as well as its parents recursively. If `dependency="2"` didn't
	 * exist on the direct parent, this injection would
	 * have returned
	 * `dependency="1"`.
	 *
	 *
	 * ### Injecting a live collection of direct child directives
	 *
	 *
	 * A directive can also query for other child directives. Since parent directives are instantiated
	 * before child directives, a directive can't simply inject the list of child directives. Instead,
	 * the directive injects a {@link QueryList}, which updates its contents as children are added,
	 * removed, or moved by a directive that uses a {@link ViewContainerRef} such as a `ng-for`, an
	 * `ng-if`, or an `ng-switch`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
	 * 6. Here, `Dependency` 5 would not be included, because it is not a direct child.
	 *
	 * ### Injecting a live collection of descendant directives
	 *
	 * By passing the descendant flag to `@Query` above, we can include the children of the child
	 * elements.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
	 *
	 * ### Optional injection
	 *
	 * The normal behavior of directives is to return an error when a specified dependency cannot be
	 * resolved. If you
	 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
	 * with `@Optional()`.
	 * This explicitly permits the author of a template to treat some of the surrounding directives as
	 * optional.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Optional() dependency:Dependency) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a `Dependency` directive found on the current element.
	 * If none can be
	 * found, the injector supplies `null` instead of throwing an error.
	 *
	 * ## Example
	 *
	 * Here we use a decorator directive to simply define basic tool-tip behavior.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[tooltip]',
	 *   properties: [
	 *     'text: tooltip'
	 *   ],
	 *   hostListeners: {
	 *     'onmouseenter': 'onMouseEnter()',
	 *     'onmouseleave': 'onMouseLeave()'
	 *   }
	 * })
	 * class Tooltip{
	 *   text:string;
	 *   overlay:Overlay; // NOT YET IMPLEMENTED
	 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
	 *
	 *   constructor(overlayManager:OverlayManager) {
	 *     this.overlay = overlay;
	 *   }
	 *
	 *   onMouseEnter() {
	 *     // exact signature to be determined
	 *     this.overlay = this.overlayManager.open(text, ...);
	 *   }
	 *
	 *   onMouseLeave() {
	 *     this.overlay.close();
	 *     this.overlay = null;
	 *   }
	 * }
	 * ```
	 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
	 * `tooltip` selector,
	 * like so:
	 *
	 * ```
	 * <div tooltip="some text here"></div>
	 * ```
	 *
	 * Directives can also control the instantiation, destruction, and positioning of inline template
	 * elements:
	 *
	 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
	 * runtime.
	 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
	 * location in the current view
	 * where these actions are performed.
	 *
	 * Views are always created as children of the current {@link View}, and as siblings of the
	 * `<template>` element. Thus a
	 * directive in a child view cannot inject the directive that created it.
	 *
	 * Since directives that create views via ViewContainers are common in Angular, and using the full
	 * `<template>` element syntax is wordy, Angular
	 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
	 * equivalent.
	 *
	 * Thus,
	 *
	 * ```
	 * <ul>
	 *   <li *foo="bar" title="text"></li>
	 * </ul>
	 * ```
	 *
	 * Expands in use to:
	 *
	 * ```
	 * <ul>
	 *   <template [foo]="bar">
	 *     <li title="text"></li>
	 *   </template>
	 * </ul>
	 * ```
	 *
	 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
	 * the directive
	 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
	 *
	 *
	 * ## Example
	 *
	 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
	 *
	 * Here is a simple directive that triggers on an `unless` selector:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[unless]',
	 *   properties: ['unless']
	 * })
	 * export class Unless {
	 *   viewContainer: ViewContainerRef;
	 *   templateRef: TemplateRef;
	 *   prevCondition: boolean;
	 *
	 *   constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {
	 *     this.viewContainer = viewContainer;
	 *     this.templateRef = templateRef;
	 *     this.prevCondition = null;
	 *   }
	 *
	 *   set unless(newCondition) {
	 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	 *       this.prevCondition = true;
	 *       this.viewContainer.clear();
	 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	 *       this.prevCondition = false;
	 *       this.viewContainer.create(this.templateRef);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * We can then use this `unless` selector in a template:
	 * ```
	 * <ul>
	 *   <li *unless="expr"></li>
	 * </ul>
	 * ```
	 *
	 * Once the directive instantiates the child view, the shorthand notation for the template expands
	 * and the result is:
	 *
	 * ```
	 * <ul>
	 *   <template [unless]="exp">
	 *     <li></li>
	 *   </template>
	 *   <li></li>
	 * </ul>
	 * ```
	 *
	 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
	 * the instantiated
	 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
	 */
	var Directive = (function (_super) {
	    __extends(Directive, _super);
	    function Directive(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, properties = _b.properties, events = _b.events, host = _b.host, lifecycle = _b.lifecycle, hostInjector = _b.hostInjector, exportAs = _b.exportAs, _c = _b.compileChildren, compileChildren = _c === void 0 ? true : _c;
	        _super.call(this);
	        this.selector = selector;
	        this.properties = properties;
	        this.events = events;
	        this.host = host;
	        this.exportAs = exportAs;
	        this.lifecycle = lifecycle;
	        this.compileChildren = compileChildren;
	        this.hostInjector = hostInjector;
	    }
	    Directive = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Directive);
	    return Directive;
	})(metadata_1.InjectableMetadata);
	exports.Directive = Directive;
	/**
	 * Declare reusable UI building blocks for an application.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@Component`
	 * annotation specifies when a component is instantiated, and which properties and hostListeners it
	 * binds to.
	 *
	 * When a component is instantiated, Angular
	 * - creates a shadow DOM for the component.
	 * - loads the selected template into the shadow DOM.
	 * - creates all the injectable objects configured with `hostInjector` and `viewInjector`.
	 *
	 * All template expressions and statements are then evaluated against the component instance.
	 *
	 * For details on the `@View` annotation, see {@link View}.
	 *
	 * ## Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet'
	 * })
	 * @View({
	 *   template: 'Hello {{name}}!'
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 */
	var Component = (function (_super) {
	    __extends(Component, _super);
	    function Component(_a) {
	        var _b = _a === void 0 ? {} : _a, selector = _b.selector, properties = _b.properties, events = _b.events, host = _b.host, exportAs = _b.exportAs, lifecycle = _b.lifecycle, hostInjector = _b.hostInjector, viewInjector = _b.viewInjector, _c = _b.changeDetection, changeDetection = _c === void 0 ? change_detection_1.DEFAULT : _c, _d = _b.compileChildren, compileChildren = _d === void 0 ? true : _d;
	        _super.call(this, {
	            selector: selector,
	            properties: properties,
	            events: events,
	            host: host,
	            exportAs: exportAs,
	            hostInjector: hostInjector,
	            lifecycle: lifecycle,
	            compileChildren: compileChildren
	        });
	        this.changeDetection = changeDetection;
	        this.viewInjector = viewInjector;
	    }
	    Component = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], Component);
	    return Component;
	})(Directive);
	exports.Component = Component;
	/**
	 * Lifecycle events are guaranteed to be called in the following order:
	 * - `onChange` (optional if any bindings have changed),
	 * - `onInit` (optional after the first check only),
	 * - `onCheck`,
	 * - `onAllChangesDone`
	 */
	(function (LifecycleEvent) {
	    /**
	     * Notify a directive whenever a {@link View} that contains it is destroyed.
	     *
	     * ## Example
	     *
	     * ```
	     * @Directive({
	     *   ...,
	     *   lifecycle: [LifecycleEvent.onDestroy]
	     * })
	     * class ClassSet {
	     *   onDestroy() {
	     *     // invoked to notify directive of the containing view destruction.
	     *   }
	     * }
	     * ```
	     * @exportedAs angular2/annotations
	     */
	    LifecycleEvent[LifecycleEvent["onDestroy"] = 0] = "onDestroy";
	    /**
	     * Notify a directive when any of its bindings have changed.
	     *
	     * This method is called right after the directive's bindings have been checked,
	     * and before any of its children's bindings have been checked.
	     *
	     * It is invoked only if at least one of the directive's bindings has changed.
	     *
	     * ## Example:
	     *
	     * ```
	     * @Directive({
	     *   selector: '[class-set]',
	     *   properties: [
	     *     'propA',
	     *     'propB'
	     *   ],
	     *   lifecycle: [LifecycleEvent.onChange]
	     * })
	     * class ClassSet {
	     *   propA;
	     *   propB;
	     *   onChange(changes:{[idx: string, PropertyUpdate]}) {
	     *     // This will get called after any of the properties have been updated.
	     *     if (changes['propA']) {
	     *       // if propA was updated
	     *     }
	     *     if (changes['propA']) {
	     *       // if propB was updated
	     *     }
	     *   }
	     * }
	     *  ```
	     * @exportedAs angular2/annotations
	     */
	    LifecycleEvent[LifecycleEvent["onChange"] = 1] = "onChange";
	    /**
	     * Notify a directive when it has been checked.
	     *
	     * This method is called right after the directive's bindings have been checked,
	     * and before any of its children's bindings have been checked.
	     *
	     * It is invoked every time even when none of the directive's bindings has changed.
	     *
	     * ## Example:
	     *
	     * ```
	     * @Directive({
	     *   selector: '[class-set]',
	     *   lifecycle: [LifecycleEvent.onCheck]
	     * })
	     * class ClassSet {
	     *   onCheck() {
	     *   }
	     * }
	     *  ```
	     * @exportedAs angular2/annotations
	     */
	    LifecycleEvent[LifecycleEvent["onCheck"] = 2] = "onCheck";
	    /**
	     * Notify a directive when it has been checked the first itme.
	     *
	     * This method is called right after the directive's bindings have been checked,
	     * and before any of its children's bindings have been checked.
	     *
	     * It is invoked only once.
	     *
	     * ## Example:
	     *
	     * ```
	     * @Directive({
	     *   selector: '[class-set]',
	     *   lifecycle: [LifecycleEvent.onInit]
	     * })
	     * class ClassSet {
	     *   onInit() {
	     *   }
	     * }
	     *  ```
	     * @exportedAs angular2/annotations
	     */
	    LifecycleEvent[LifecycleEvent["onInit"] = 3] = "onInit";
	    /**
	     * Notify a directive when the bindings of all its children have been checked (whether they have
	     * changed or not).
	     *
	     * ## Example:
	     *
	     * ```
	     * @Directive({
	     *   selector: '[class-set]',
	     *   lifecycle: [LifecycleEvent.onAllChangesDone]
	     * })
	     * class ClassSet {
	     *
	     *   onAllChangesDone() {
	     *   }
	     *
	     * }
	     *  ```
	     * @exportedAs angular2/annotations
	     */
	    LifecycleEvent[LifecycleEvent["onAllChangesDone"] = 4] = "onAllChangesDone";
	})(exports.LifecycleEvent || (exports.LifecycleEvent = {}));
	var LifecycleEvent = exports.LifecycleEvent;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	/**
	 *  @private
	 */
	exports.appComponentRefPromiseToken = lang_1.CONST_EXPR(new di_1.OpaqueToken('Promise<ComponentRef>'));
	/**
	 * An opaque token representing the application root type in the {@link Injector}.
	 *
	 * ```
	 * @Component(...)
	 * @View(...)
	 * class MyApp {
	 *   ...
	 * }
	 *
	 * bootstrap(MyApp).then((appRef:ApplicationRef) {
	 *   expect(appRef.injector.get(appComponentTypeToken)).toEqual(MyApp);
	 * });
	 *
	 * ```
	 */
	exports.appComponentTypeToken = lang_1.CONST_EXPR(new di_1.OpaqueToken('RootComponent'));
	//# sourceMappingURL=application_tokens.js.map

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var view_ref_1 = __webpack_require__(21);
	var api_1 = __webpack_require__(7);
	var view_manager_utils_1 = __webpack_require__(131);
	var view_pool_1 = __webpack_require__(132);
	var view_listener_1 = __webpack_require__(130);
	/**
	 * Entry point for creating, moving views in the view hierarchy and destroying views.
	 * This manager contains all recursion and delegates to helper methods
	 * in AppViewManagerUtils and the Renderer, so unit tests get simpler.
	 */
	var AppViewManager = (function () {
	    /**
	     * @private
	     */
	    function AppViewManager(_viewPool, _viewListener, _utils, _renderer) {
	        this._viewPool = _viewPool;
	        this._viewListener = _viewListener;
	        this._utils = _utils;
	        this._renderer = _renderer;
	    }
	    /**
	     * Returns a {@link ViewContainerRef} at the {@link ElementRef} location.
	     */
	    AppViewManager.prototype.getViewContainer = function (location) {
	        var hostView = view_ref_1.internalView(location.parentView);
	        return hostView.elementInjectors[location.boundElementIndex].getViewContainerRef();
	    };
	    /**
	     * Return the first child element of the host element view.
	     */
	    AppViewManager.prototype.getHostElement = function (hostViewRef) {
	        var hostView = view_ref_1.internalView(hostViewRef);
	        if (hostView.proto.type !== api_1.ViewType.HOST) {
	            throw new lang_1.BaseException('This operation is only allowed on host views');
	        }
	        return hostView.elementRefs[hostView.elementOffset];
	    };
	    /**
	     * Returns an ElementRef for the element with the given variable name
	     * in the current view.
	     *
	     * - `hostLocation`: {@link ElementRef} of any element in the View which defines the scope of
	     *   search.
	     * - `variableName`: Name of the variable to locate.
	     * - Returns {@link ElementRef} of the found element or null. (Throws if not found.)
	     */
	    AppViewManager.prototype.getNamedElementInComponentView = function (hostLocation, variableName) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        var componentView = hostView.getNestedView(boundElementIndex);
	        if (lang_1.isBlank(componentView)) {
	            throw new lang_1.BaseException("There is no component directive at element " + boundElementIndex);
	        }
	        var binderIdx = componentView.proto.variableLocations.get(variableName);
	        if (lang_1.isBlank(binderIdx)) {
	            throw new lang_1.BaseException("Could not find variable " + variableName);
	        }
	        return componentView.elementRefs[componentView.elementOffset + binderIdx];
	    };
	    /**
	     * Returns the component instance for a given element.
	     *
	     * The component is the execution context as seen by an expression at that {@link ElementRef}
	     * location.
	     */
	    AppViewManager.prototype.getComponent = function (hostLocation) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        return this._utils.getComponentInstance(hostView, boundElementIndex);
	    };
	    /**
	     * Load component view into existing element.
	     *
	     * Use this if a host element is already in the DOM and it is necessary to upgrade
	     * the element into Angular component by attaching a view but reusing the existing element.
	     *
	     * - `hostProtoViewRef`: {@link ProtoViewRef} Proto view to use in creating a view for this
	     *   component.
	     * - `overrideSelector`: (optional) selector to use in locating the existing element to load
	     *   the view into. If not specified use the selector in the component definition of the
	     *   `hostProtoView`.
	     * - injector: {@link Injector} to use as parent injector for the view.
	     *
	     * See {@link AppViewManager#destroyRootHostView}.
	     *
	     * ## Example
	     *
	     * ```
	     * @ng.Component({
	     *   selector: 'child-component'
	     * })
	     * @ng.View({
	     *   template: 'Child'
	     * })
	     * class ChildComponent {
	     *
	     * }
	     *
	     * @ng.Component({
	     *   selector: 'my-app'
	     * })
	     * @ng.View({
	     *   template: `
	     *     Parent (<some-component></some-component>)
	     *   `
	     * })
	     * class MyApp {
	     *   viewRef: ng.ViewRef;
	     *
	     *   constructor(public appViewManager: ng.AppViewManager, compiler: ng.Compiler) {
	     *     compiler.compileInHost(ChildComponent).then((protoView: ng.ProtoViewRef) => {
	     *       this.viewRef = appViewManager.createRootHostView(protoView, 'some-component', null);
	     *     })
	     *   }
	     *
	     *   onDestroy() {
	     *     this.appViewManager.destroyRootHostView(this.viewRef);
	     *     this.viewRef = null;
	     *   }
	     * }
	     *
	     * ng.bootstrap(MyApp);
	     * ```
	     */
	    AppViewManager.prototype.createRootHostView = function (hostProtoViewRef, overrideSelector, injector) {
	        var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
	        var hostElementSelector = overrideSelector;
	        if (lang_1.isBlank(hostElementSelector)) {
	            hostElementSelector = hostProtoView.elementBinders[0].componentDirective.metadata.selector;
	        }
	        var renderViewWithFragments = this._renderer.createRootHostView(hostProtoView.mergeMapping.renderProtoViewRef, hostProtoView.mergeMapping.renderFragmentCount, hostElementSelector);
	        var hostView = this._createMainView(hostProtoView, renderViewWithFragments);
	        this._renderer.hydrateView(hostView.render);
	        this._utils.hydrateRootHostView(hostView, injector);
	        return hostView.ref;
	    };
	    /**
	     * Remove the View created with {@link AppViewManager#createRootHostView}.
	     */
	    AppViewManager.prototype.destroyRootHostView = function (hostViewRef) {
	        // Note: Don't put the hostView into the view pool
	        // as it is depending on the element for which it was created.
	        var hostView = view_ref_1.internalView(hostViewRef);
	        this._renderer.detachFragment(hostView.renderFragment);
	        this._renderer.dehydrateView(hostView.render);
	        this._viewDehydrateRecurse(hostView);
	        this._viewListener.viewDestroyed(hostView);
	        this._renderer.destroyView(hostView.render);
	    };
	    /**
	     *
	     * See {@link AppViewManager#destroyViewInContainer}.
	     */
	    AppViewManager.prototype.createEmbeddedViewInContainer = function (viewContainerLocation, atIndex, templateRef) {
	        var protoView = view_ref_1.internalProtoView(templateRef.protoViewRef);
	        if (protoView.type !== api_1.ViewType.EMBEDDED) {
	            throw new lang_1.BaseException('This method can only be called with embedded ProtoViews!');
	        }
	        return this._createViewInContainer(viewContainerLocation, atIndex, protoView, templateRef.elementRef, null);
	    };
	    /**
	     *
	     * See {@link AppViewManager#destroyViewInContainer}.
	     */
	    AppViewManager.prototype.createHostViewInContainer = function (viewContainerLocation, atIndex, protoViewRef, imperativelyCreatedInjector) {
	        var protoView = view_ref_1.internalProtoView(protoViewRef);
	        if (protoView.type !== api_1.ViewType.HOST) {
	            throw new lang_1.BaseException('This method can only be called with host ProtoViews!');
	        }
	        return this._createViewInContainer(viewContainerLocation, atIndex, protoView, viewContainerLocation, imperativelyCreatedInjector);
	    };
	    /**
	     *
	     * See {@link AppViewManager#destroyViewInContainer}.
	     */
	    AppViewManager.prototype._createViewInContainer = function (viewContainerLocation, atIndex, protoView, context, imperativelyCreatedInjector) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var contextView = view_ref_1.internalView(context.parentView);
	        var contextBoundElementIndex = context.boundElementIndex;
	        var embeddedFragmentView = contextView.getNestedView(contextBoundElementIndex);
	        var view;
	        if (protoView.type === api_1.ViewType.EMBEDDED && lang_1.isPresent(embeddedFragmentView) &&
	            !embeddedFragmentView.hydrated()) {
	            // Case 1: instantiate the first view of a template that has been merged into a parent
	            view = embeddedFragmentView;
	            this._attachRenderView(parentView, boundElementIndex, atIndex, view);
	        }
	        else {
	            // Case 2: instantiate another copy of the template or a host ProtoView.
	            // This is a separate case
	            // as we only inline one copy of the template into the parent view.
	            view = this._createPooledView(protoView);
	            this._attachRenderView(parentView, boundElementIndex, atIndex, view);
	            this._renderer.hydrateView(view.render);
	        }
	        this._utils.attachViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view);
	        this._utils.hydrateViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, imperativelyCreatedInjector);
	        return view.ref;
	    };
	    AppViewManager.prototype._attachRenderView = function (parentView, boundElementIndex, atIndex, view) {
	        var elementRef = parentView.elementRefs[boundElementIndex];
	        if (atIndex === 0) {
	            this._renderer.attachFragmentAfterElement(elementRef, view.renderFragment);
	        }
	        else {
	            var prevView = parentView.viewContainers[boundElementIndex].views[atIndex - 1];
	            this._renderer.attachFragmentAfterFragment(prevView.renderFragment, view.renderFragment);
	        }
	    };
	    /**
	     *
	     * See {@link AppViewManager#createViewInContainer}.
	     */
	    AppViewManager.prototype.destroyViewInContainer = function (viewContainerLocation, atIndex) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        this._destroyViewInContainer(parentView, boundElementIndex, atIndex);
	    };
	    /**
	     *
	     * See {@link AppViewManager#detachViewInContainer}.
	     */
	    AppViewManager.prototype.attachViewInContainer = function (viewContainerLocation, atIndex, viewRef) {
	        var view = view_ref_1.internalView(viewRef);
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        // TODO(tbosch): the public methods attachViewInContainer/detachViewInContainer
	        // are used for moving elements without the same container.
	        // We will change this into an atomic `move` operation, which should preserve the
	        // previous parent injector (see https://github.com/angular/angular/issues/1377).
	        // Right now we are destroying any special
	        // context view that might have been used.
	        this._utils.attachViewInContainer(parentView, boundElementIndex, null, null, atIndex, view);
	        this._attachRenderView(parentView, boundElementIndex, atIndex, view);
	        return viewRef;
	    };
	    /**
	     *
	     * See {@link AppViewManager#attachViewInContainer}.
	     */
	    AppViewManager.prototype.detachViewInContainer = function (viewContainerLocation, atIndex) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	        this._renderer.detachFragment(view.renderFragment);
	        return view.ref;
	    };
	    AppViewManager.prototype._createMainView = function (protoView, renderViewWithFragments) {
	        var mergedParentView = this._utils.createView(protoView, renderViewWithFragments, this, this._renderer);
	        this._renderer.setEventDispatcher(mergedParentView.render, mergedParentView);
	        this._viewListener.viewCreated(mergedParentView);
	        return mergedParentView;
	    };
	    AppViewManager.prototype._createPooledView = function (protoView) {
	        var view = this._viewPool.getView(protoView);
	        if (lang_1.isBlank(view)) {
	            view = this._createMainView(protoView, this._renderer.createView(protoView.mergeMapping.renderProtoViewRef, protoView.mergeMapping.renderFragmentCount));
	        }
	        return view;
	    };
	    AppViewManager.prototype._destroyPooledView = function (view) {
	        var wasReturned = this._viewPool.returnView(view);
	        if (!wasReturned) {
	            this._viewListener.viewDestroyed(view);
	            this._renderer.destroyView(view.render);
	        }
	    };
	    AppViewManager.prototype._destroyViewInContainer = function (parentView, boundElementIndex, atIndex) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        this._viewDehydrateRecurse(view);
	        this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	        if (view.viewOffset > 0) {
	            // Case 1: a view that is part of another view.
	            // Just detach the fragment
	            this._renderer.detachFragment(view.renderFragment);
	        }
	        else {
	            // Case 2: a view that is not part of another view.
	            // dehydrate and destroy it.
	            this._renderer.dehydrateView(view.render);
	            this._renderer.detachFragment(view.renderFragment);
	            this._destroyPooledView(view);
	        }
	    };
	    AppViewManager.prototype._viewDehydrateRecurse = function (view) {
	        if (view.hydrated()) {
	            this._utils.dehydrateView(view);
	        }
	        var viewContainers = view.viewContainers;
	        var startViewOffset = view.viewOffset;
	        var endViewOffset = view.viewOffset + view.mainMergeMapping.nestedViewCountByViewIndex[view.viewOffset];
	        var elementOffset = view.elementOffset;
	        for (var viewIdx = startViewOffset; viewIdx <= endViewOffset; viewIdx++) {
	            var currView = view.views[viewIdx];
	            for (var binderIdx = 0; binderIdx < currView.proto.elementBinders.length; binderIdx++, elementOffset++) {
	                var vc = viewContainers[elementOffset];
	                if (lang_1.isPresent(vc)) {
	                    for (var j = vc.views.length - 1; j >= 0; j--) {
	                        this._destroyViewInContainer(currView, elementOffset, j);
	                    }
	                }
	            }
	        }
	    };
	    AppViewManager = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [view_pool_1.AppViewPool, view_listener_1.AppViewListener, view_manager_utils_1.AppViewManagerUtils, api_1.Renderer])
	    ], AppViewManager);
	    return AppViewManager;
	})();
	exports.AppViewManager = AppViewManager;
	//# sourceMappingURL=view_manager.js.map

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var metadata_1 = __webpack_require__(27);
	var decorators_1 = __webpack_require__(26);
	/**
	 * Factory for creating {@link InjectMetadata}.
	 */
	exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
	/**
	 * Factory for creating {@link OptionalMetadata}.
	 */
	exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
	/**
	 * Factory for creating {@link InjectableMetadata}.
	 */
	exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
	/**
	 * Factory for creating {@link SelfMetadata}.
	 */
	exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
	/**
	 * Factory for creating {@link AncestorMetadata}.
	 */
	exports.Ancestor = decorators_1.makeParamDecorator(metadata_1.AncestorMetadata);
	/**
	 * Factory for creating {@link UnboundedMetadata}.
	 */
	exports.Unbounded = decorators_1.makeParamDecorator(metadata_1.UnboundedMetadata);
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * This situation arises when the key which we need te refer to for the purposes of DI is declared,
	 * but not yet defined.
	 *
	 * ## Example:
	 *
	 * ```
	 * class Door {
	 *   // Incorrect way to refer to a reference which is defined later.
	 *   // This fails because `Lock` is undefined at this point.
	 *   constructor(lock:Lock) { }
	 *
	 *   // Correct way to refer to a reference which is defined later.
	 *   // The reference needs to be captured in a closure.
	 *   constructor(@Inject(forwardRef(() => Lock)) lock:Lock) { }
	 * }
	 *
	 * // Only at this point the lock is defined.
	 * class Lock {
	 * }
	 * ```
	 */
	function forwardRef(forwardRefFn) {
	    forwardRefFn.__forward_ref__ = forwardRef;
	    forwardRefFn.toString = function () { return lang_1.stringify(this()); };
	    return forwardRefFn;
	}
	exports.forwardRef = forwardRef;
	/**
	 * Lazily retrieve the reference value.
	 *
	 * See: {@link forwardRef}
	 */
	function resolveForwardRef(type) {
	    if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') &&
	        type.__forward_ref__ === forwardRef) {
	        return type();
	    }
	    else {
	        return type;
	    }
	}
	exports.resolveForwardRef = resolveForwardRef;
	//# sourceMappingURL=forward_ref.js.map

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var async_1 = __webpack_require__(5);
	var collection_1 = __webpack_require__(2);
	var validators_1 = __webpack_require__(53);
	/**
	 * Indicates that a Control is valid, i.e. that no errors exist in the input value.
	 */
	exports.VALID = "VALID";
	/**
	 * Indicates that a Control is invalid, i.e. that an error exists in the input value.
	 */
	exports.INVALID = "INVALID";
	function isControl(c) {
	    return c instanceof AbstractControl;
	}
	exports.isControl = isControl;
	function _find(c, path) {
	    if (lang_1.isBlank(path))
	        return null;
	    if (!(path instanceof collection_1.List)) {
	        path = lang_1.StringWrapper.split(path, new RegExp("/"));
	    }
	    if (path instanceof collection_1.List && collection_1.ListWrapper.isEmpty(path))
	        return null;
	    return collection_1.ListWrapper.reduce(path, function (v, name) {
	        if (v instanceof ControlGroup) {
	            return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
	        }
	        else if (v instanceof ControlArray) {
	            var index = name;
	            return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
	        }
	        else {
	            return null;
	        }
	    }, c);
	}
	/**
	 * Omitting from external API doc as this is really an abstract internal concept.
	 */
	var AbstractControl = (function () {
	    function AbstractControl(validator) {
	        this.validator = validator;
	        this._pristine = true;
	        this._touched = false;
	    }
	    Object.defineProperty(AbstractControl.prototype, "value", {
	        get: function () { return this._value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "status", {
	        get: function () { return this._status; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valid", {
	        get: function () { return this._status === exports.VALID; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "errors", {
	        get: function () { return this._errors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "pristine", {
	        get: function () { return this._pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "dirty", {
	        get: function () { return !this.pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "touched", {
	        get: function () { return this._touched; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "untouched", {
	        get: function () { return !this._touched; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
	        get: function () { return this._valueChanges; },
	        enumerable: true,
	        configurable: true
	    });
	    AbstractControl.prototype.markAsTouched = function () { this._touched = true; };
	    AbstractControl.prototype.markAsDirty = function (_a) {
	        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	        onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
	        this._pristine = false;
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.markAsDirty({ onlySelf: onlySelf });
	        }
	    };
	    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
	    AbstractControl.prototype.updateValidity = function (_a) {
	        var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	        onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.updateValidity({ onlySelf: onlySelf });
	        }
	    };
	    AbstractControl.prototype.updateValueAndValidity = function (_a) {
	        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	        onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
	        emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
	        this._updateValue();
	        if (emitEvent) {
	            async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	        }
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	        if (lang_1.isPresent(this._parent) && !onlySelf) {
	            this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        }
	    };
	    AbstractControl.prototype.find = function (path) { return _find(this, path); };
	    AbstractControl.prototype.getError = function (errorCode, path) {
	        if (path === void 0) { path = null; }
	        var c = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
	        if (lang_1.isPresent(c) && lang_1.isPresent(c._errors)) {
	            return collection_1.StringMapWrapper.get(c._errors, errorCode);
	        }
	        else {
	            return null;
	        }
	    };
	    AbstractControl.prototype.hasError = function (errorCode, path) {
	        if (path === void 0) { path = null; }
	        return lang_1.isPresent(this.getError(errorCode, path));
	    };
	    AbstractControl.prototype._updateValue = function () { };
	    return AbstractControl;
	})();
	exports.AbstractControl = AbstractControl;
	/**
	 * Defines a part of a form that cannot be divided into other controls.
	 *
	 * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
	 * with
	 * {@link ControlGroup} and {@link ControlArray}.
	 */
	var Control = (function (_super) {
	    __extends(Control, _super);
	    function Control(value, validator) {
	        if (value === void 0) { value = null; }
	        if (validator === void 0) { validator = validators_1.Validators.nullValidator; }
	        _super.call(this, validator);
	        this._value = value;
	        this.updateValidity({ onlySelf: true });
	        this._valueChanges = new async_1.EventEmitter();
	    }
	    Control.prototype.updateValue = function (value, _a) {
	        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange;
	        emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
	        this._value = value;
	        if (lang_1.isPresent(this._onChange) && emitModelToViewChange)
	            this._onChange(this._value);
	        this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	    };
	    Control.prototype.registerOnChange = function (fn) { this._onChange = fn; };
	    return Control;
	})(AbstractControl);
	exports.Control = Control;
	/**
	 * Defines a part of a form, of fixed length, that can contain other controls.
	 *
	 * A ControlGroup aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls
	 * in a group is invalid, the entire group is invalid. Similarly, if a control changes its value,
	 * the entire group
	 * changes as well.
	 *
	 * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with
	 * {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other controls,
	 * but is of variable
	 * length.
	 */
	var ControlGroup = (function (_super) {
	    __extends(ControlGroup, _super);
	    function ControlGroup(controls, optionals, validator) {
	        if (optionals === void 0) { optionals = null; }
	        if (validator === void 0) { validator = validators_1.Validators.group; }
	        _super.call(this, validator);
	        this.controls = controls;
	        this._optionals = lang_1.isPresent(optionals) ? optionals : {};
	        this._valueChanges = new async_1.EventEmitter();
	        this._setParentForControls();
	        this._value = this._reduceValue();
	        this.updateValidity({ onlySelf: true });
	    }
	    ControlGroup.prototype.addControl = function (name, c) {
	        this.controls[name] = c;
	        c.setParent(this);
	    };
	    ControlGroup.prototype.removeControl = function (name) { collection_1.StringMapWrapper.delete(this.controls, name); };
	    ControlGroup.prototype.include = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, true);
	        this.updateValueAndValidity();
	    };
	    ControlGroup.prototype.exclude = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, false);
	        this.updateValueAndValidity();
	    };
	    ControlGroup.prototype.contains = function (controlName) {
	        var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
	        return c && this._included(controlName);
	    };
	    ControlGroup.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) { control.setParent(_this); });
	    };
	    ControlGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
	    ControlGroup.prototype._reduceValue = function () {
	        return this._reduceChildren({}, function (acc, control, name) {
	            acc[name] = control.value;
	            return acc;
	        });
	    };
	    ControlGroup.prototype._reduceChildren = function (initValue, fn) {
	        var _this = this;
	        var res = initValue;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            if (_this._included(name)) {
	                res = fn(res, control, name);
	            }
	        });
	        return res;
	    };
	    ControlGroup.prototype._included = function (controlName) {
	        var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
	        return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
	    };
	    return ControlGroup;
	})(AbstractControl);
	exports.ControlGroup = ControlGroup;
	/**
	 * Defines a part of a form, of variable length, that can contain other controls.
	 *
	 * A `ControlArray` aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls
	 * in a group is invalid, the entire group is invalid. Similarly, if a control changes its value,
	 * the entire group
	 * changes as well.
	 *
	 * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain
	 * other controls, but is of fixed length.
	 */
	var ControlArray = (function (_super) {
	    __extends(ControlArray, _super);
	    function ControlArray(controls, validator) {
	        if (validator === void 0) { validator = validators_1.Validators.array; }
	        _super.call(this, validator);
	        this.controls = controls;
	        this._valueChanges = new async_1.EventEmitter();
	        this._setParentForControls();
	        this._updateValue();
	        this.updateValidity({ onlySelf: true });
	    }
	    ControlArray.prototype.at = function (index) { return this.controls[index]; };
	    ControlArray.prototype.push = function (control) {
	        this.controls.push(control);
	        control.setParent(this);
	        this.updateValueAndValidity();
	    };
	    ControlArray.prototype.insert = function (index, control) {
	        collection_1.ListWrapper.insert(this.controls, index, control);
	        control.setParent(this);
	        this.updateValueAndValidity();
	    };
	    ControlArray.prototype.removeAt = function (index) {
	        collection_1.ListWrapper.removeAt(this.controls, index);
	        this.updateValueAndValidity();
	    };
	    Object.defineProperty(ControlArray.prototype, "length", {
	        get: function () { return this.controls.length; },
	        enumerable: true,
	        configurable: true
	    });
	    ControlArray.prototype._updateValue = function () { this._value = collection_1.ListWrapper.map(this.controls, function (c) { return c.value; }); };
	    ControlArray.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.ListWrapper.forEach(this.controls, function (control) { control.setParent(_this); });
	    };
	    return ControlArray;
	})(AbstractControl);
	exports.ControlArray = ControlArray;
	//# sourceMappingURL=model.js.map

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	/**
	 * Provides a set of validators used by form controls.
	 *
	 * # Example
	 *
	 * ```
	 * var loginControl = new Control("", Validators.required)
	 * ```
	 */
	var Validators = (function () {
	    function Validators() {
	    }
	    Validators.required = function (c) {
	        return lang_1.isBlank(c.value) || c.value == "" ? { "required": true } : null;
	    };
	    Validators.nullValidator = function (c) { return null; };
	    Validators.compose = function (validators) {
	        return function (c) {
	            var res = collection_1.ListWrapper.reduce(validators, function (res, validator) {
	                var errors = validator(c);
	                return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
	            }, {});
	            return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	        };
	    };
	    Validators.group = function (c) {
	        var res = {};
	        collection_1.StringMapWrapper.forEach(c.controls, function (control, name) {
	            if (c.contains(name) && lang_1.isPresent(control.errors)) {
	                Validators._mergeErrors(control, res);
	            }
	        });
	        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	    };
	    Validators.array = function (c) {
	        var res = {};
	        collection_1.ListWrapper.forEach(c.controls, function (control) {
	            if (lang_1.isPresent(control.errors)) {
	                Validators._mergeErrors(control, res);
	            }
	        });
	        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	    };
	    Validators._mergeErrors = function (control, res) {
	        collection_1.StringMapWrapper.forEach(control.errors, function (value, error) {
	            if (!collection_1.StringMapWrapper.contains(res, error)) {
	                res[error] = [];
	            }
	            var current = res[error];
	            current.push(control);
	        });
	    };
	    return Validators;
	})();
	exports.Validators = Validators;
	//# sourceMappingURL=validators.js.map

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var headers_1 = __webpack_require__(55);
	var enums_1 = __webpack_require__(22);
	/**
	 * Creates a response options object similar to the
	 * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) description
	 * in the Fetch
	 * Spec to be optionally provided when instantiating a
	 * {@link Response}.
	 *
	 * All values are null by default.
	 */
	var ResponseOptions = (function () {
	    function ResponseOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
	        this.body = lang_1.isPresent(body) ? body : null;
	        this.status = lang_1.isPresent(status) ? status : null;
	        this.headers = lang_1.isPresent(headers) ? headers : null;
	        this.statusText = lang_1.isPresent(statusText) ? statusText : null;
	        this.type = lang_1.isPresent(type) ? type : null;
	        this.url = lang_1.isPresent(url) ? url : null;
	    }
	    ResponseOptions.prototype.merge = function (options) {
	        return new ResponseOptions({
	            body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
	            status: lang_1.isPresent(options) && lang_1.isPresent(options.status) ? options.status : this.status,
	            headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
	            statusText: lang_1.isPresent(options) && lang_1.isPresent(options.statusText) ? options.statusText :
	                this.statusText,
	            type: lang_1.isPresent(options) && lang_1.isPresent(options.type) ? options.type : this.type,
	            url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url,
	        });
	    };
	    return ResponseOptions;
	})();
	exports.ResponseOptions = ResponseOptions;
	/**
	 * Injectable version of {@link ResponseOptions}, with overridable default values.
	 */
	var BaseResponseOptions = (function (_super) {
	    __extends(BaseResponseOptions, _super);
	    function BaseResponseOptions() {
	        _super.call(this, { status: 200, statusText: 'Ok', type: enums_1.ResponseTypes.Default, headers: new headers_1.Headers() });
	    }
	    BaseResponseOptions = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BaseResponseOptions);
	    return BaseResponseOptions;
	})(ResponseOptions);
	exports.BaseResponseOptions = BaseResponseOptions;
	//# sourceMappingURL=base_response_options.js.map

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	/**
	 * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
	 * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class). The only known
	 * difference from the spec is the lack of an `entries` method.
	 */
	var Headers = (function () {
	    function Headers(headers) {
	        var _this = this;
	        if (lang_1.isBlank(headers)) {
	            this._headersMap = new collection_1.Map();
	            return;
	        }
	        if (headers instanceof Headers) {
	            this._headersMap = headers._headersMap;
	        }
	        else if (headers instanceof collection_1.StringMap) {
	            this._headersMap = collection_1.MapWrapper.createFromStringMap(headers);
	            collection_1.MapWrapper.forEach(this._headersMap, function (v, k) {
	                if (!collection_1.isListLikeIterable(v)) {
	                    var list = [];
	                    list.push(v);
	                    _this._headersMap.set(k, list);
	                }
	            });
	        }
	    }
	    /**
	     * Appends a header to existing list of header values for a given header name.
	     */
	    Headers.prototype.append = function (name, value) {
	        var mapName = this._headersMap.get(name);
	        var list = collection_1.isListLikeIterable(mapName) ? mapName : [];
	        list.push(value);
	        this._headersMap.set(name, list);
	    };
	    /**
	     * Deletes all header values for the given name.
	     */
	    Headers.prototype.delete = function (name) { collection_1.MapWrapper.delete(this._headersMap, name); };
	    Headers.prototype.forEach = function (fn) { collection_1.MapWrapper.forEach(this._headersMap, fn); };
	    /**
	     * Returns first header that matches given name.
	     */
	    Headers.prototype.get = function (header) { return collection_1.ListWrapper.first(this._headersMap.get(header)); };
	    /**
	     * Check for existence of header by given name.
	     */
	    Headers.prototype.has = function (header) { return this._headersMap.has(header); };
	    /**
	     * Provides names of set headers
	     */
	    Headers.prototype.keys = function () { return collection_1.MapWrapper.keys(this._headersMap); };
	    /**
	     * Sets or overrides header value for given name.
	     */
	    Headers.prototype.set = function (header, value) {
	        var list = [];
	        if (collection_1.isListLikeIterable(value)) {
	            var pushValue = value.join(',');
	            list.push(pushValue);
	        }
	        else {
	            list.push(value);
	        }
	        this._headersMap.set(header, list);
	    };
	    /**
	     * Returns values of all headers.
	     */
	    Headers.prototype.values = function () { return collection_1.MapWrapper.values(this._headersMap); };
	    /**
	     * Returns list of header values for a given name.
	     */
	    Headers.prototype.getAll = function (header) {
	        var headers = this._headersMap.get(header);
	        return collection_1.isListLikeIterable(headers) ? headers : [];
	    };
	    /**
	     * This method is not implemented.
	     */
	    Headers.prototype.entries = function () { throw new lang_1.BaseException('"entries" method is not implemented on Headers class'); };
	    return Headers;
	})();
	exports.Headers = Headers;
	//# sourceMappingURL=headers.js.map

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/// <reference path="../../typings/rx/rx.d.ts" />
	var lang_1 = __webpack_require__(1);
	/**
	 * Abstract class from which real backends are derived.
	 *
	 * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
	 * {@link Request}.
	 */
	var ConnectionBackend = (function () {
	    function ConnectionBackend() {
	    }
	    ConnectionBackend.prototype.createConnection = function (request) { throw new lang_1.BaseException('Abstract!'); };
	    return ConnectionBackend;
	})();
	exports.ConnectionBackend = ConnectionBackend;
	/**
	 * Abstract class from which real connections are derived.
	 */
	var Connection = (function () {
	    function Connection() {
	    }
	    Connection.prototype.dispose = function () { throw new lang_1.BaseException('Abstract!'); };
	    return Connection;
	})();
	exports.Connection = Connection;
	//# sourceMappingURL=interfaces.js.map

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var BUBBLE_SYMBOL = '^';
	var EventManager = (function () {
	    function EventManager(_plugins, _zone) {
	        this._plugins = _plugins;
	        this._zone = _zone;
	        for (var i = 0; i < _plugins.length; i++) {
	            _plugins[i].manager = this;
	        }
	    }
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	        var plugin = this._findPluginFor(withoutBubbleSymbol);
	        plugin.addEventListener(element, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
	    };
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	        var plugin = this._findPluginFor(withoutBubbleSymbol);
	        return plugin.addGlobalEventListener(target, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
	    };
	    EventManager.prototype.getZone = function () { return this._zone; };
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin = plugins[i];
	            if (plugin.supports(eventName)) {
	                return plugin;
	            }
	        }
	        throw new lang_1.BaseException("No event manager plugin found for event " + eventName);
	    };
	    EventManager.prototype._removeBubbleSymbol = function (eventName) {
	        return eventName[0] == BUBBLE_SYMBOL ? lang_1.StringWrapper.substring(eventName, 1) : eventName;
	    };
	    return EventManager;
	})();
	exports.EventManager = EventManager;
	var EventManagerPlugin = (function () {
	    function EventManagerPlugin() {
	    }
	    // We are assuming here that all plugins support bubbled and non-bubbled events.
	    // That is equivalent to having supporting $event.target
	    // The bubbling flag (currently ^) is stripped before calling the supports and
	    // addEventListener methods.
	    EventManagerPlugin.prototype.supports = function (eventName) { return false; };
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        throw "not implemented";
	    };
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        throw "not implemented";
	    };
	    return EventManagerPlugin;
	})();
	exports.EventManagerPlugin = EventManagerPlugin;
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    function DomEventsPlugin() {
	        _super.apply(this, arguments);
	    }
	    // This plugin should come last in the list of plugins, because it accepts all
	    // events.
	    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	        this.manager._zone.runOutsideAngular(function () { dom_adapter_1.DOM.on(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler, shouldSupportBubble) {
	        var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
	        var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	        return this.manager._zone.runOutsideAngular(function () { return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler); });
	    };
	    DomEventsPlugin.prototype._getOutsideHandler = function (shouldSupportBubble, element, handler, zone) {
	        return shouldSupportBubble ? DomEventsPlugin.bubbleCallback(element, handler, zone) :
	            DomEventsPlugin.sameElementCallback(element, handler, zone);
	    };
	    DomEventsPlugin.sameElementCallback = function (element, handler, zone) {
	        return function (event) {
	            if (event.target === element) {
	                zone.run(function () { return handler(event); });
	            }
	        };
	    };
	    DomEventsPlugin.bubbleCallback = function (element, handler, zone) {
	        return function (event) { return zone.run(function () { return handler(event); }); };
	    };
	    return DomEventsPlugin;
	})(EventManagerPlugin);
	exports.DomEventsPlugin = DomEventsPlugin;
	//# sourceMappingURL=event_manager.js.map

/***/ },
/* 58 */
/***/ function(module, exports) {

	'use strict';var XHR = (function () {
	    function XHR() {
	    }
	    XHR.prototype.get = function (url) { return null; };
	    return XHR;
	})();
	exports.XHR = XHR;
	//# sourceMappingURL=xhr.js.map

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * This module is used for handling user input, by defining and building a {@link ControlGroup} that
	 * consists of
	 * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
	 * to read information
	 * from the form DOM elements.
	 *
	 * This module is not included in the `angular2` module; you must import the forms module
	 * explicitly.
	 *
	 */
	var model_1 = __webpack_require__(52);
	exports.AbstractControl = model_1.AbstractControl;
	exports.Control = model_1.Control;
	exports.ControlGroup = model_1.ControlGroup;
	exports.ControlArray = model_1.ControlArray;
	var abstract_control_directive_1 = __webpack_require__(73);
	exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
	var control_container_1 = __webpack_require__(32);
	exports.ControlContainer = control_container_1.ControlContainer;
	var ng_control_name_1 = __webpack_require__(77);
	exports.NgControlName = ng_control_name_1.NgControlName;
	var ng_form_control_1 = __webpack_require__(79);
	exports.NgFormControl = ng_form_control_1.NgFormControl;
	var ng_model_1 = __webpack_require__(81);
	exports.NgModel = ng_model_1.NgModel;
	var ng_control_1 = __webpack_require__(19);
	exports.NgControl = ng_control_1.NgControl;
	var ng_control_group_1 = __webpack_require__(76);
	exports.NgControlGroup = ng_control_group_1.NgControlGroup;
	var ng_form_model_1 = __webpack_require__(80);
	exports.NgFormModel = ng_form_model_1.NgFormModel;
	var ng_form_1 = __webpack_require__(78);
	exports.NgForm = ng_form_1.NgForm;
	var default_value_accessor_1 = __webpack_require__(75);
	exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
	var checkbox_value_accessor_1 = __webpack_require__(74);
	exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
	var select_control_value_accessor_1 = __webpack_require__(82);
	exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
	exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
	var directives_1 = __webpack_require__(185);
	exports.formDirectives = directives_1.formDirectives;
	var validators_1 = __webpack_require__(53);
	exports.Validators = validators_1.Validators;
	var validators_2 = __webpack_require__(28);
	exports.NgValidator = validators_2.NgValidator;
	exports.NgRequiredValidator = validators_2.NgRequiredValidator;
	var form_builder_1 = __webpack_require__(144);
	exports.FormBuilder = form_builder_1.FormBuilder;
	var form_builder_2 = __webpack_require__(144);
	var lang_1 = __webpack_require__(1);
	exports.formInjectables = lang_1.CONST_EXPR([form_builder_2.FormBuilder]);
	//# sourceMappingURL=forms.js.map

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var ExpressionChangedAfterItHasBeenChecked = (function (_super) {
	    __extends(ExpressionChangedAfterItHasBeenChecked, _super);
	    function ExpressionChangedAfterItHasBeenChecked(proto, change) {
	        _super.call(this, ("Expression '" + proto.expressionAsString + "' has changed after it was checked. ") +
	            ("Previous value: '" + change.previousValue + "'. Current value: '" + change.currentValue + "'"));
	    }
	    return ExpressionChangedAfterItHasBeenChecked;
	})(lang_1.BaseException);
	exports.ExpressionChangedAfterItHasBeenChecked = ExpressionChangedAfterItHasBeenChecked;
	var ChangeDetectionError = (function (_super) {
	    __extends(ChangeDetectionError, _super);
	    function ChangeDetectionError(proto, originalException, originalStack) {
	        _super.call(this, originalException + " in [" + proto.expressionAsString + "]", originalException, originalStack);
	        this.location = proto.expressionAsString;
	    }
	    return ChangeDetectionError;
	})(lang_1.BaseException);
	exports.ChangeDetectionError = ChangeDetectionError;
	var DehydratedException = (function (_super) {
	    __extends(DehydratedException, _super);
	    function DehydratedException() {
	        _super.call(this, 'Attempt to detect changes on a dehydrated detector.');
	    }
	    return DehydratedException;
	})(lang_1.BaseException);
	exports.DehydratedException = DehydratedException;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var AST = (function () {
	    function AST() {
	    }
	    AST.prototype.eval = function (context, locals) { throw new lang_1.BaseException("Not supported"); };
	    Object.defineProperty(AST.prototype, "isAssignable", {
	        get: function () { return false; },
	        enumerable: true,
	        configurable: true
	    });
	    AST.prototype.assign = function (context, locals, value) { throw new lang_1.BaseException("Not supported"); };
	    AST.prototype.visit = function (visitor) { return null; };
	    AST.prototype.toString = function () { return "AST"; };
	    return AST;
	})();
	exports.AST = AST;
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        _super.apply(this, arguments);
	    }
	    EmptyExpr.prototype.eval = function (context, locals) { return null; };
	    EmptyExpr.prototype.visit = function (visitor) {
	        // do nothing
	    };
	    return EmptyExpr;
	})(AST);
	exports.EmptyExpr = EmptyExpr;
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        _super.apply(this, arguments);
	    }
	    ImplicitReceiver.prototype.eval = function (context, locals) { return context; };
	    ImplicitReceiver.prototype.visit = function (visitor) { return visitor.visitImplicitReceiver(this); };
	    return ImplicitReceiver;
	})(AST);
	exports.ImplicitReceiver = ImplicitReceiver;
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    function Chain(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    Chain.prototype.eval = function (context, locals) {
	        var result;
	        for (var i = 0; i < this.expressions.length; i++) {
	            var last = this.expressions[i].eval(context, locals);
	            if (lang_1.isPresent(last))
	                result = last;
	        }
	        return result;
	    };
	    Chain.prototype.visit = function (visitor) { return visitor.visitChain(this); };
	    return Chain;
	})(AST);
	exports.Chain = Chain;
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    function Conditional(condition, trueExp, falseExp) {
	        _super.call(this);
	        this.condition = condition;
	        this.trueExp = trueExp;
	        this.falseExp = falseExp;
	    }
	    Conditional.prototype.eval = function (context, locals) {
	        if (this.condition.eval(context, locals)) {
	            return this.trueExp.eval(context, locals);
	        }
	        else {
	            return this.falseExp.eval(context, locals);
	        }
	    };
	    Conditional.prototype.visit = function (visitor) { return visitor.visitConditional(this); };
	    return Conditional;
	})(AST);
	exports.Conditional = Conditional;
	var If = (function (_super) {
	    __extends(If, _super);
	    function If(condition, trueExp, falseExp) {
	        _super.call(this);
	        this.condition = condition;
	        this.trueExp = trueExp;
	        this.falseExp = falseExp;
	    }
	    If.prototype.eval = function (context, locals) {
	        if (this.condition.eval(context, locals)) {
	            this.trueExp.eval(context, locals);
	        }
	        else if (lang_1.isPresent(this.falseExp)) {
	            this.falseExp.eval(context, locals);
	        }
	    };
	    If.prototype.visit = function (visitor) { return visitor.visitIf(this); };
	    return If;
	})(AST);
	exports.If = If;
	var AccessMember = (function (_super) {
	    __extends(AccessMember, _super);
	    function AccessMember(receiver, name, getter, setter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	        this.setter = setter;
	    }
	    AccessMember.prototype.eval = function (context, locals) {
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) &&
	            locals.contains(this.name)) {
	            return locals.get(this.name);
	        }
	        else {
	            var evaluatedReceiver = this.receiver.eval(context, locals);
	            return this.getter(evaluatedReceiver);
	        }
	    };
	    Object.defineProperty(AccessMember.prototype, "isAssignable", {
	        get: function () { return true; },
	        enumerable: true,
	        configurable: true
	    });
	    AccessMember.prototype.assign = function (context, locals, value) {
	        var evaluatedContext = this.receiver.eval(context, locals);
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) &&
	            locals.contains(this.name)) {
	            throw new lang_1.BaseException("Cannot reassign a variable binding " + this.name);
	        }
	        else {
	            return this.setter(evaluatedContext, value);
	        }
	    };
	    AccessMember.prototype.visit = function (visitor) { return visitor.visitAccessMember(this); };
	    return AccessMember;
	})(AST);
	exports.AccessMember = AccessMember;
	var SafeAccessMember = (function (_super) {
	    __extends(SafeAccessMember, _super);
	    function SafeAccessMember(receiver, name, getter, setter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	        this.setter = setter;
	    }
	    SafeAccessMember.prototype.eval = function (context, locals) {
	        var evaluatedReceiver = this.receiver.eval(context, locals);
	        return lang_1.isBlank(evaluatedReceiver) ? null : this.getter(evaluatedReceiver);
	    };
	    SafeAccessMember.prototype.visit = function (visitor) { return visitor.visitSafeAccessMember(this); };
	    return SafeAccessMember;
	})(AST);
	exports.SafeAccessMember = SafeAccessMember;
	var KeyedAccess = (function (_super) {
	    __extends(KeyedAccess, _super);
	    function KeyedAccess(obj, key) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	    }
	    KeyedAccess.prototype.eval = function (context, locals) {
	        var obj = this.obj.eval(context, locals);
	        var key = this.key.eval(context, locals);
	        return obj[key];
	    };
	    Object.defineProperty(KeyedAccess.prototype, "isAssignable", {
	        get: function () { return true; },
	        enumerable: true,
	        configurable: true
	    });
	    KeyedAccess.prototype.assign = function (context, locals, value) {
	        var obj = this.obj.eval(context, locals);
	        var key = this.key.eval(context, locals);
	        obj[key] = value;
	        return value;
	    };
	    KeyedAccess.prototype.visit = function (visitor) { return visitor.visitKeyedAccess(this); };
	    return KeyedAccess;
	})(AST);
	exports.KeyedAccess = KeyedAccess;
	var BindingPipe = (function (_super) {
	    __extends(BindingPipe, _super);
	    function BindingPipe(exp, name, args) {
	        _super.call(this);
	        this.exp = exp;
	        this.name = name;
	        this.args = args;
	    }
	    BindingPipe.prototype.visit = function (visitor) { return visitor.visitPipe(this); };
	    return BindingPipe;
	})(AST);
	exports.BindingPipe = BindingPipe;
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    function LiteralPrimitive(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    LiteralPrimitive.prototype.eval = function (context, locals) { return this.value; };
	    LiteralPrimitive.prototype.visit = function (visitor) { return visitor.visitLiteralPrimitive(this); };
	    return LiteralPrimitive;
	})(AST);
	exports.LiteralPrimitive = LiteralPrimitive;
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    function LiteralArray(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    LiteralArray.prototype.eval = function (context, locals) {
	        return collection_1.ListWrapper.map(this.expressions, function (e) { return e.eval(context, locals); });
	    };
	    LiteralArray.prototype.visit = function (visitor) { return visitor.visitLiteralArray(this); };
	    return LiteralArray;
	})(AST);
	exports.LiteralArray = LiteralArray;
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    function LiteralMap(keys, values) {
	        _super.call(this);
	        this.keys = keys;
	        this.values = values;
	    }
	    LiteralMap.prototype.eval = function (context, locals) {
	        var res = collection_1.StringMapWrapper.create();
	        for (var i = 0; i < this.keys.length; ++i) {
	            collection_1.StringMapWrapper.set(res, this.keys[i], this.values[i].eval(context, locals));
	        }
	        return res;
	    };
	    LiteralMap.prototype.visit = function (visitor) { return visitor.visitLiteralMap(this); };
	    return LiteralMap;
	})(AST);
	exports.LiteralMap = LiteralMap;
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    function Interpolation(strings, expressions) {
	        _super.call(this);
	        this.strings = strings;
	        this.expressions = expressions;
	    }
	    Interpolation.prototype.eval = function (context, locals) {
	        throw new lang_1.BaseException("evaluating an Interpolation is not supported");
	    };
	    Interpolation.prototype.visit = function (visitor) { visitor.visitInterpolation(this); };
	    return Interpolation;
	})(AST);
	exports.Interpolation = Interpolation;
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    function Binary(operation, left, right) {
	        _super.call(this);
	        this.operation = operation;
	        this.left = left;
	        this.right = right;
	    }
	    Binary.prototype.eval = function (context, locals) {
	        var left = this.left.eval(context, locals);
	        switch (this.operation) {
	            case '&&':
	                return left && this.right.eval(context, locals);
	            case '||':
	                return left || this.right.eval(context, locals);
	        }
	        var right = this.right.eval(context, locals);
	        switch (this.operation) {
	            case '+':
	                return left + right;
	            case '-':
	                return left - right;
	            case '*':
	                return left * right;
	            case '/':
	                return left / right;
	            case '%':
	                return left % right;
	            case '==':
	                return left == right;
	            case '!=':
	                return left != right;
	            case '===':
	                return left === right;
	            case '!==':
	                return left !== right;
	            case '<':
	                return left < right;
	            case '>':
	                return left > right;
	            case '<=':
	                return left <= right;
	            case '>=':
	                return left >= right;
	            case '^':
	                return left ^ right;
	            case '&':
	                return left & right;
	        }
	        throw 'Internal error [$operation] not handled';
	    };
	    Binary.prototype.visit = function (visitor) { return visitor.visitBinary(this); };
	    return Binary;
	})(AST);
	exports.Binary = Binary;
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    function PrefixNot(expression) {
	        _super.call(this);
	        this.expression = expression;
	    }
	    PrefixNot.prototype.eval = function (context, locals) { return !this.expression.eval(context, locals); };
	    PrefixNot.prototype.visit = function (visitor) { return visitor.visitPrefixNot(this); };
	    return PrefixNot;
	})(AST);
	exports.PrefixNot = PrefixNot;
	var Assignment = (function (_super) {
	    __extends(Assignment, _super);
	    function Assignment(target, value) {
	        _super.call(this);
	        this.target = target;
	        this.value = value;
	    }
	    Assignment.prototype.eval = function (context, locals) {
	        return this.target.assign(context, locals, this.value.eval(context, locals));
	    };
	    Assignment.prototype.visit = function (visitor) { return visitor.visitAssignment(this); };
	    return Assignment;
	})(AST);
	exports.Assignment = Assignment;
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    function MethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    MethodCall.prototype.eval = function (context, locals) {
	        var evaluatedArgs = evalList(context, locals, this.args);
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) &&
	            locals.contains(this.name)) {
	            var fn = locals.get(this.name);
	            return lang_1.FunctionWrapper.apply(fn, evaluatedArgs);
	        }
	        else {
	            var evaluatedReceiver = this.receiver.eval(context, locals);
	            return this.fn(evaluatedReceiver, evaluatedArgs);
	        }
	    };
	    MethodCall.prototype.visit = function (visitor) { return visitor.visitMethodCall(this); };
	    return MethodCall;
	})(AST);
	exports.MethodCall = MethodCall;
	var SafeMethodCall = (function (_super) {
	    __extends(SafeMethodCall, _super);
	    function SafeMethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    SafeMethodCall.prototype.eval = function (context, locals) {
	        var evaluatedReceiver = this.receiver.eval(context, locals);
	        if (lang_1.isBlank(evaluatedReceiver))
	            return null;
	        var evaluatedArgs = evalList(context, locals, this.args);
	        return this.fn(evaluatedReceiver, evaluatedArgs);
	    };
	    SafeMethodCall.prototype.visit = function (visitor) { return visitor.visitSafeMethodCall(this); };
	    return SafeMethodCall;
	})(AST);
	exports.SafeMethodCall = SafeMethodCall;
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    function FunctionCall(target, args) {
	        _super.call(this);
	        this.target = target;
	        this.args = args;
	    }
	    FunctionCall.prototype.eval = function (context, locals) {
	        var obj = this.target.eval(context, locals);
	        if (!(obj instanceof Function)) {
	            throw new lang_1.BaseException(obj + " is not a function");
	        }
	        return lang_1.FunctionWrapper.apply(obj, evalList(context, locals, this.args));
	    };
	    FunctionCall.prototype.visit = function (visitor) { return visitor.visitFunctionCall(this); };
	    return FunctionCall;
	})(AST);
	exports.FunctionCall = FunctionCall;
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    function ASTWithSource(ast, source, location) {
	        _super.call(this);
	        this.ast = ast;
	        this.source = source;
	        this.location = location;
	    }
	    ASTWithSource.prototype.eval = function (context, locals) { return this.ast.eval(context, locals); };
	    Object.defineProperty(ASTWithSource.prototype, "isAssignable", {
	        get: function () { return this.ast.isAssignable; },
	        enumerable: true,
	        configurable: true
	    });
	    ASTWithSource.prototype.assign = function (context, locals, value) {
	        return this.ast.assign(context, locals, value);
	    };
	    ASTWithSource.prototype.visit = function (visitor) { return this.ast.visit(visitor); };
	    ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	    return ASTWithSource;
	})(AST);
	exports.ASTWithSource = ASTWithSource;
	var TemplateBinding = (function () {
	    function TemplateBinding(key, keyIsVar, name, expression) {
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	})();
	exports.TemplateBinding = TemplateBinding;
	var AstTransformer = (function () {
	    function AstTransformer() {
	    }
	    AstTransformer.prototype.visitImplicitReceiver = function (ast) { return ast; };
	    AstTransformer.prototype.visitInterpolation = function (ast) {
	        return new Interpolation(ast.strings, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast) {
	        return new LiteralPrimitive(ast.value);
	    };
	    AstTransformer.prototype.visitAccessMember = function (ast) {
	        return new AccessMember(ast.receiver.visit(this), ast.name, ast.getter, ast.setter);
	    };
	    AstTransformer.prototype.visitSafeAccessMember = function (ast) {
	        return new SafeAccessMember(ast.receiver.visit(this), ast.name, ast.getter, ast.setter);
	    };
	    AstTransformer.prototype.visitMethodCall = function (ast) {
	        return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitSafeMethodCall = function (ast) {
	        return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitFunctionCall = function (ast) {
	        return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitLiteralArray = function (ast) {
	        return new LiteralArray(this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralMap = function (ast) {
	        return new LiteralMap(ast.keys, this.visitAll(ast.values));
	    };
	    AstTransformer.prototype.visitBinary = function (ast) {
	        return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    AstTransformer.prototype.visitPrefixNot = function (ast) { return new PrefixNot(ast.expression.visit(this)); };
	    AstTransformer.prototype.visitConditional = function (ast) {
	        return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    AstTransformer.prototype.visitPipe = function (ast) {
	        return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitKeyedAccess = function (ast) {
	        return new KeyedAccess(ast.obj.visit(this), ast.key.visit(this));
	    };
	    AstTransformer.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    AstTransformer.prototype.visitChain = function (ast) { return new Chain(this.visitAll(ast.expressions)); };
	    AstTransformer.prototype.visitAssignment = function (ast) {
	        return new Assignment(ast.target.visit(this), ast.value.visit(this));
	    };
	    AstTransformer.prototype.visitIf = function (ast) {
	        var falseExp = lang_1.isPresent(ast.falseExp) ? ast.falseExp.visit(this) : null;
	        return new If(ast.condition.visit(this), ast.trueExp.visit(this), falseExp);
	    };
	    return AstTransformer;
	})();
	exports.AstTransformer = AstTransformer;
	var _evalListCache = [
	    [],
	    [0],
	    [0, 0],
	    [0, 0, 0],
	    [0, 0, 0, 0],
	    [0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0, 0, 0],
	    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	];
	function evalList(context, locals, exps) {
	    var length = exps.length;
	    if (length > 10) {
	        throw new lang_1.BaseException("Cannot have more than 10 argument");
	    }
	    var result = _evalListCache[length];
	    for (var i = 0; i < length; i++) {
	        result[i] = exps[i].eval(context, locals);
	    }
	    return result;
	}
	//# sourceMappingURL=ast.js.map

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var lang_2 = __webpack_require__(1);
	var pipe_1 = __webpack_require__(11);
	var IterableChangesFactory = (function () {
	    function IterableChangesFactory() {
	    }
	    IterableChangesFactory.prototype.supports = function (obj) { return IterableChanges.supportsObj(obj); };
	    IterableChangesFactory.prototype.create = function (cdRef) { return new IterableChanges(); };
	    IterableChangesFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], IterableChangesFactory);
	    return IterableChangesFactory;
	})();
	exports.IterableChangesFactory = IterableChangesFactory;
	var IterableChanges = (function (_super) {
	    __extends(IterableChanges, _super);
	    function IterableChanges() {
	        _super.call(this);
	        this._collection = null;
	        this._length = null;
	        // Keeps track of the used records at any point in time (during & across `_check()` calls)
	        this._linkedRecords = null;
	        // Keeps track of the removed records at any point in time during `_check()` calls.
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    IterableChanges.supportsObj = function (obj) { return collection_1.isListLikeIterable(obj); };
	    IterableChanges.prototype.supports = function (obj) { return IterableChanges.supportsObj(obj); };
	    Object.defineProperty(IterableChanges.prototype, "collection", {
	        get: function () { return this._collection; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IterableChanges.prototype, "length", {
	        get: function () { return this._length; },
	        enumerable: true,
	        configurable: true
	    });
	    IterableChanges.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachMovedItem = function (fn) {
	        var record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.transform = function (collection, args) {
	        if (args === void 0) { args = null; }
	        if (this.check(collection)) {
	            return pipe_1.WrappedValue.wrap(this);
	        }
	        else {
	            return null;
	        }
	    };
	    // todo(vicb): optim for UnmodifiableListView (frozen arrays)
	    IterableChanges.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var record = this._itHead;
	        var mayBeDirty = false;
	        var index;
	        var item;
	        if (lang_2.isArray(collection)) {
	            var list = collection;
	            this._length = collection.length;
	            for (index = 0; index < this._length; index++) {
	                item = list[index];
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                }
	                else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            collection_1.iterateListLike(collection, function (item) {
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = _this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                }
	                else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = _this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(IterableChanges.prototype, "isDirty", {
	        // CollectionChanges is considered dirty if it has any additions, moves or removals.
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     */
	    IterableChanges.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            var nextRecord;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     */
	    IterableChanges.prototype._mismatch = function (record, item, index) {
	        // The previous record after which we will append the current one.
	        var previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     */
	    IterableChanges.prototype._verifyReinsertion = function (record, item, index) {
	        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	     *
	     * - `record` The first excess {@link CollectionChangeRecord}.
	     */
	    IterableChanges.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	    };
	    IterableChanges.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    IterableChanges.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    IterableChanges.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    IterableChanges.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    IterableChanges.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var prev = record._prev;
	        var next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    IterableChanges.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype.toString = function () {
	        var record;
	        var list = [];
	        for (record = this._itHead; record !== null; record = record._next) {
	            list.push(record);
	        }
	        var previous = [];
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            previous.push(record);
	        }
	        var additions = [];
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            additions.push(record);
	        }
	        var moves = [];
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            moves.push(record);
	        }
	        var removals = [];
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            removals.push(record);
	        }
	        return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n";
	    };
	    return IterableChanges;
	})(pipe_1.BasePipe);
	exports.IterableChanges = IterableChanges;
	var CollectionChangeRecord = (function () {
	    function CollectionChangeRecord(item) {
	        this.item = item;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        this._nextPrevious = null;
	        this._prev = null;
	        this._next = null;
	        this._prevDup = null;
	        this._nextDup = null;
	        this._prevRemoved = null;
	        this._nextRemoved = null;
	        this._nextAdded = null;
	        this._nextMoved = null;
	    }
	    CollectionChangeRecord.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ?
	            lang_2.stringify(this.item) :
	            lang_2.stringify(this.item) + '[' + lang_2.stringify(this.previousIndex) + '->' +
	                lang_2.stringify(this.currentIndex) + ']';
	    };
	    return CollectionChangeRecord;
	})();
	exports.CollectionChangeRecord = CollectionChangeRecord;
	// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        this._head = null;
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    // Returns a CollectionChangeRecord having CollectionChangeRecord.item == item and
	    // CollectionChangeRecord.currentIndex >= afterIndex
	    _DuplicateItemRecordList.prototype.get = function (item, afterIndex) {
	        var record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                lang_2.looseIdentical(record.item, item)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var prev = record._prevDup;
	        var next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	})();
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    _DuplicateMap.prototype.put = function (record) {
	        // todo(vicb) handle corner cases
	        var key = lang_2.getMapKey(record.item);
	        var duplicates = this.map.get(key);
	        if (!lang_2.isPresent(duplicates)) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the CollectionChangeRecord value maybe one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     */
	    _DuplicateMap.prototype.get = function (value, afterIndex) {
	        if (afterIndex === void 0) { afterIndex = null; }
	        var key = lang_2.getMapKey(value);
	        var recordList = this.map.get(key);
	        return lang_2.isBlank(recordList) ? null : recordList.get(value, afterIndex);
	    };
	    /**
	     * Removes a {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var key = lang_2.getMapKey(record.item);
	        // todo(vicb)
	        // assert(this.map.containsKey(key));
	        var recordList = this.map.get(key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            collection_1.MapWrapper.delete(this.map, key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        get: function () { return collection_1.MapWrapper.size(this.map) === 0; },
	        enumerable: true,
	        configurable: true
	    });
	    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + lang_2.stringify(this.map) + ')'; };
	    return _DuplicateMap;
	})();
	//# sourceMappingURL=iterable_changes.js.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var ast_1 = __webpack_require__(61);
	var change_detection_util_1 = __webpack_require__(44);
	var dynamic_change_detector_1 = __webpack_require__(108);
	var directive_record_1 = __webpack_require__(107);
	var coalesce_1 = __webpack_require__(106);
	var proto_record_1 = __webpack_require__(46);
	var DynamicProtoChangeDetector = (function () {
	    function DynamicProtoChangeDetector(definition) {
	        this.definition = definition;
	        this._records = this._createRecords(definition);
	    }
	    DynamicProtoChangeDetector.prototype.instantiate = function (dispatcher) {
	        return new dynamic_change_detector_1.DynamicChangeDetector(this.definition.id, this.definition.strategy, dispatcher, this._records, this.definition.directiveRecords);
	    };
	    DynamicProtoChangeDetector.prototype._createRecords = function (definition) {
	        var recordBuilder = new ProtoRecordBuilder();
	        collection_1.ListWrapper.forEach(definition.bindingRecords, function (b) { recordBuilder.add(b, definition.variableNames); });
	        return coalesce_1.coalesce(recordBuilder.records);
	    };
	    return DynamicProtoChangeDetector;
	})();
	exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
	var ProtoRecordBuilder = (function () {
	    function ProtoRecordBuilder() {
	        this.records = [];
	    }
	    ProtoRecordBuilder.prototype.add = function (b, variableNames) {
	        if (variableNames === void 0) { variableNames = null; }
	        var oldLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
	            oldLast.lastInDirective = false;
	        }
	        this._appendRecords(b, variableNames);
	        var newLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(newLast) && newLast !== oldLast) {
	            newLast.lastInBinding = true;
	            newLast.lastInDirective = true;
	        }
	    };
	    ProtoRecordBuilder.prototype._appendRecords = function (b, variableNames) {
	        if (b.isDirectiveLifecycle()) {
	            this.records.push(new proto_record_1.ProtoRecord(proto_record_1.RecordType.DIRECTIVE_LIFECYCLE, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, null, false, false));
	        }
	        else {
	            _ConvertAstIntoProtoRecords.append(this.records, b, variableNames);
	        }
	    };
	    return ProtoRecordBuilder;
	})();
	exports.ProtoRecordBuilder = ProtoRecordBuilder;
	var _ConvertAstIntoProtoRecords = (function () {
	    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _expressionAsString, _variableNames) {
	        this._records = _records;
	        this._bindingRecord = _bindingRecord;
	        this._expressionAsString = _expressionAsString;
	        this._variableNames = _variableNames;
	    }
	    _ConvertAstIntoProtoRecords.append = function (records, b, variableNames) {
	        var c = new _ConvertAstIntoProtoRecords(records, b, b.ast.toString(), variableNames);
	        b.ast.visit(c);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function (ast) { return this._bindingRecord.implicitReceiver; };
	    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function (ast) {
	        var args = this._visitAll(ast.expressions);
	        return this._addRecord(proto_record_1.RecordType.INTERPOLATE, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function (ast) {
	        return this._addRecord(proto_record_1.RecordType.CONST, "literal", ast.value, [], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitAccessMember = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) &&
	            ast.receiver instanceof ast_1.ImplicitReceiver) {
	            return this._addRecord(proto_record_1.RecordType.LOCAL, ast.name, ast.name, [], null, receiver);
	        }
	        else {
	            return this._addRecord(proto_record_1.RecordType.PROPERTY, ast.name, ast.getter, [], null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitSafeAccessMember = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        return this._addRecord(proto_record_1.RecordType.SAFE_PROPERTY, ast.name, ast.getter, [], null, receiver);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
	            var target = this._addRecord(proto_record_1.RecordType.LOCAL, ast.name, ast.name, [], null, receiver);
	            return this._addRecord(proto_record_1.RecordType.INVOKE_CLOSURE, "closure", null, args, null, target);
	        }
	        else {
	            return this._addRecord(proto_record_1.RecordType.INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.SAFE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function (ast) {
	        var target = ast.target.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.INVOKE_CLOSURE, "closure", null, args, null, target);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function (ast) {
	        var primitiveName = "arrayFn" + ast.expressions.length;
	        return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function (ast) {
	        return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitBinary = function (ast) {
	        var left = ast.left.visit(this);
	        var right = ast.right.visit(this);
	        return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function (ast) {
	        var exp = ast.expression.visit(this);
	        return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitConditional = function (ast) {
	        var c = ast.condition.visit(this);
	        var t = ast.trueExp.visit(this);
	        var f = ast.falseExp.visit(this);
	        return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [c, t, f], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPipe = function (ast) {
	        var value = ast.exp.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RecordType.PIPE, ast.name, ast.name, args, null, value);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitKeyedAccess = function (ast) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        return this._addRecord(proto_record_1.RecordType.KEYED_ACCESS, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitAssignment = function (ast) { throw new lang_1.BaseException('Not supported'); };
	    _ConvertAstIntoProtoRecords.prototype.visitChain = function (ast) { throw new lang_1.BaseException('Not supported'); };
	    _ConvertAstIntoProtoRecords.prototype.visitIf = function (ast) { throw new lang_1.BaseException('Not supported'); };
	    _ConvertAstIntoProtoRecords.prototype._visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    _ConvertAstIntoProtoRecords.prototype._addRecord = function (type, name, funcOrValue, args, fixedArgs, context) {
	        var selfIndex = this._records.length + 1;
	        if (context instanceof directive_record_1.DirectiveIndex) {
	            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
	        }
	        else {
	            this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
	        }
	        return selfIndex;
	    };
	    return _ConvertAstIntoProtoRecords;
	})();
	function _arrayFn(length) {
	    switch (length) {
	        case 0:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
	        case 1:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
	        case 2:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
	        case 3:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
	        case 4:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
	        case 5:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
	        case 6:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
	        case 7:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
	        case 8:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
	        case 9:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
	        default:
	            throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
	    }
	}
	function _mapPrimitiveName(keys) {
	    var stringifiedKeys = collection_1.ListWrapper.join(collection_1.ListWrapper.map(keys, function (k) { return lang_1.isString(k) ? "\"" + k + "\"" : "" + k; }), ", ");
	    return "mapFn([" + stringifiedKeys + "])";
	}
	function _operationToPrimitiveName(operation) {
	    switch (operation) {
	        case '+':
	            return "operation_add";
	        case '-':
	            return "operation_subtract";
	        case '*':
	            return "operation_multiply";
	        case '/':
	            return "operation_divide";
	        case '%':
	            return "operation_remainder";
	        case '==':
	            return "operation_equals";
	        case '!=':
	            return "operation_not_equals";
	        case '===':
	            return "operation_identical";
	        case '!==':
	            return "operation_not_identical";
	        case '<':
	            return "operation_less_then";
	        case '>':
	            return "operation_greater_then";
	        case '<=':
	            return "operation_less_or_equals_then";
	        case '>=':
	            return "operation_greater_or_equals_then";
	        case '&&':
	            return "operation_logical_and";
	        case '||':
	            return "operation_logical_or";
	        default:
	            throw new lang_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function _operationToFunction(operation) {
	    switch (operation) {
	        case '+':
	            return change_detection_util_1.ChangeDetectionUtil.operation_add;
	        case '-':
	            return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
	        case '*':
	            return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
	        case '/':
	            return change_detection_util_1.ChangeDetectionUtil.operation_divide;
	        case '%':
	            return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
	        case '==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_equals;
	        case '!=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
	        case '===':
	            return change_detection_util_1.ChangeDetectionUtil.operation_identical;
	        case '!==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
	        case '<':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
	        case '>':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
	        case '<=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
	        case '>=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
	        case '&&':
	            return change_detection_util_1.ChangeDetectionUtil.operation_logical_and;
	        case '||':
	            return change_detection_util_1.ChangeDetectionUtil.operation_logical_or;
	        default:
	            throw new lang_1.BaseException("Unsupported operation " + operation);
	    }
	}
	function s(v) {
	    return lang_1.isPresent(v) ? "" + v : '';
	}
	function _interpolationFn(strings) {
	    var length = strings.length;
	    var c0 = length > 0 ? strings[0] : null;
	    var c1 = length > 1 ? strings[1] : null;
	    var c2 = length > 2 ? strings[2] : null;
	    var c3 = length > 3 ? strings[3] : null;
	    var c4 = length > 4 ? strings[4] : null;
	    var c5 = length > 5 ? strings[5] : null;
	    var c6 = length > 6 ? strings[6] : null;
	    var c7 = length > 7 ? strings[7] : null;
	    var c8 = length > 8 ? strings[8] : null;
	    var c9 = length > 9 ? strings[9] : null;
	    switch (length - 1) {
	        case 1:
	            return function (a1) { return c0 + s(a1) + c1; };
	        case 2:
	            return function (a1, a2) { return c0 + s(a1) + c1 + s(a2) + c2; };
	        case 3:
	            return function (a1, a2, a3) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3; };
	        case 4:
	            return function (a1, a2, a3, a4) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4; };
	        case 5:
	            return function (a1, a2, a3, a4, a5) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
	            };
	        case 6:
	            return function (a1, a2, a3, a4, a5, a6) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
	            };
	        case 7:
	            return function (a1, a2, a3, a4, a5, a6, a7) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7; };
	        case 8:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) +
	                c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) +
	                c8; };
	        case 9:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 +
	                s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) +
	                c7 + s(a8) + c8 + s(a9) + c9; };
	        default:
	            throw new lang_1.BaseException("Does not support more than 9 expressions");
	    }
	}
	//# sourceMappingURL=proto_change_detector.js.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var async_1 = __webpack_require__(5);
	var collection_1 = __webpack_require__(2);
	var directive_resolver_1 = __webpack_require__(66);
	var view_1 = __webpack_require__(70);
	var element_injector_1 = __webpack_require__(67);
	var view_resolver_1 = __webpack_require__(133);
	var component_url_mapper_1 = __webpack_require__(65);
	var proto_view_factory_1 = __webpack_require__(127);
	var url_resolver_1 = __webpack_require__(42);
	var app_root_url_1 = __webpack_require__(98);
	var renderApi = __webpack_require__(7);
	/**
	 * Cache that stores the AppProtoView of the template of a component.
	 * Used to prevent duplicate work and resolve cyclic dependencies.
	 */
	var CompilerCache = (function () {
	    function CompilerCache() {
	        this._cache = new collection_1.Map();
	        this._hostCache = new collection_1.Map();
	    }
	    CompilerCache.prototype.set = function (component, protoView) { this._cache.set(component, protoView); };
	    CompilerCache.prototype.get = function (component) {
	        var result = this._cache.get(component);
	        return lang_1.normalizeBlank(result);
	    };
	    CompilerCache.prototype.setHost = function (component, protoView) {
	        this._hostCache.set(component, protoView);
	    };
	    CompilerCache.prototype.getHost = function (component) {
	        var result = this._hostCache.get(component);
	        return lang_1.normalizeBlank(result);
	    };
	    CompilerCache.prototype.clear = function () {
	        this._cache.clear();
	        this._hostCache.clear();
	    };
	    CompilerCache = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], CompilerCache);
	    return CompilerCache;
	})();
	exports.CompilerCache = CompilerCache;
	/**
	 *
	 * ## URL Resolution
	 *
	 * ```
	 * var appRootUrl: AppRootUrl = ...;
	 * var componentUrlMapper: ComponentUrlMapper = ...;
	 * var urlResolver: UrlResolver = ...;
	 *
	 * var componentType: Type = ...;
	 * var componentAnnotation: ComponentAnnotation = ...;
	 * var viewAnnotation: ViewAnnotation = ...;
	 *
	 * // Resolving a URL
	 *
	 * var url = viewAnnotation.templateUrl;
	 * var componentUrl = componentUrlMapper.getUrl(componentType);
	 * var componentResolvedUrl = urlResolver.resolve(appRootUrl.value, componentUrl);
	 * var templateResolvedUrl = urlResolver.resolve(componetResolvedUrl, url);
	 * ```
	 */
	var Compiler = (function () {
	    /**
	     * @private
	     */
	    function Compiler(reader, cache, viewResolver, componentUrlMapper, urlResolver, render, protoViewFactory, appUrl) {
	        this._protoViewsToBeMerged = [];
	        this._reader = reader;
	        this._compilerCache = cache;
	        this._compiling = new collection_1.Map();
	        this._viewResolver = viewResolver;
	        this._componentUrlMapper = componentUrlMapper;
	        this._urlResolver = urlResolver;
	        this._appUrl = appUrl.value;
	        this._render = render;
	        this._protoViewFactory = protoViewFactory;
	    }
	    Compiler.prototype._bindDirective = function (directiveTypeOrBinding) {
	        if (directiveTypeOrBinding instanceof element_injector_1.DirectiveBinding) {
	            return directiveTypeOrBinding;
	        }
	        else if (directiveTypeOrBinding instanceof di_1.Binding) {
	            var annotation = this._reader.resolve(directiveTypeOrBinding.token);
	            return element_injector_1.DirectiveBinding.createFromBinding(directiveTypeOrBinding, annotation);
	        }
	        else {
	            var annotation = this._reader.resolve(directiveTypeOrBinding);
	            return element_injector_1.DirectiveBinding.createFromType(directiveTypeOrBinding, annotation);
	        }
	    };
	    // Create a hostView as if the compiler encountered <hostcmp></hostcmp>.
	    // Used for bootstrapping.
	    Compiler.prototype.compileInHost = function (componentTypeOrBinding) {
	        var _this = this;
	        var componentType = lang_1.isType(componentTypeOrBinding) ? componentTypeOrBinding :
	            componentTypeOrBinding.token;
	        var hostAppProtoView = this._compilerCache.getHost(componentType);
	        var hostPvPromise;
	        if (lang_1.isPresent(hostAppProtoView)) {
	            hostPvPromise = async_1.PromiseWrapper.resolve(hostAppProtoView);
	        }
	        else {
	            var componentBinding = this._bindDirective(componentTypeOrBinding);
	            Compiler._assertTypeIsComponent(componentBinding);
	            var directiveMetadata = componentBinding.metadata;
	            hostPvPromise =
	                this._render.compileHost(directiveMetadata)
	                    .then(function (hostRenderPv) {
	                    var protoView = _this._protoViewFactory.createAppProtoViews(componentBinding, hostRenderPv, [componentBinding]);
	                    _this._compilerCache.setHost(componentType, protoView);
	                    return _this._compileNestedProtoViews(hostRenderPv, protoView, componentType);
	                });
	        }
	        return hostPvPromise.then(function (hostAppProtoView) {
	            return _this._mergeUnmergedProtoViews().then(function (_) { return hostAppProtoView.ref; });
	        });
	    };
	    Compiler.prototype._mergeUnmergedProtoViews = function () {
	        var _this = this;
	        var protoViewsToBeMerged = this._protoViewsToBeMerged;
	        this._protoViewsToBeMerged = [];
	        return async_1.PromiseWrapper.all(protoViewsToBeMerged.map(function (appProtoView) {
	            return _this._render.mergeProtoViewsRecursively(_this._collectMergeRenderProtoViews(appProtoView))
	                .then(function (mergeResult) {
	                appProtoView.mergeMapping = new view_1.AppProtoViewMergeMapping(mergeResult);
	            });
	        }));
	    };
	    Compiler.prototype._collectMergeRenderProtoViews = function (appProtoView) {
	        var result = [appProtoView.render];
	        for (var i = 0; i < appProtoView.elementBinders.length; i++) {
	            var binder = appProtoView.elementBinders[i];
	            if (lang_1.isPresent(binder.nestedProtoView)) {
	                if (binder.hasStaticComponent() ||
	                    (binder.hasEmbeddedProtoView() && binder.nestedProtoView.isEmbeddedFragment)) {
	                    result.push(this._collectMergeRenderProtoViews(binder.nestedProtoView));
	                }
	                else {
	                    result.push(null);
	                }
	            }
	        }
	        return result;
	    };
	    Compiler.prototype._compile = function (componentBinding) {
	        var _this = this;
	        var component = componentBinding.key.token;
	        var protoView = this._compilerCache.get(component);
	        if (lang_1.isPresent(protoView)) {
	            // The component has already been compiled into an AppProtoView,
	            // returns a plain AppProtoView, not wrapped inside of a Promise.
	            // Needed for recursive components.
	            return protoView;
	        }
	        var resultPromise = this._compiling.get(component);
	        if (lang_1.isPresent(resultPromise)) {
	            // The component is already being compiled, attach to the existing Promise
	            // instead of re-compiling the component.
	            // It happens when a template references a component multiple times.
	            return resultPromise;
	        }
	        var view = this._viewResolver.resolve(component);
	        var directives = this._flattenDirectives(view);
	        for (var i = 0; i < directives.length; i++) {
	            if (!Compiler._isValidDirective(directives[i])) {
	                throw new lang_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        var boundDirectives = this._removeDuplicatedDirectives(collection_1.ListWrapper.map(directives, function (directive) { return _this._bindDirective(directive); }));
	        var renderTemplate = this._buildRenderTemplate(component, view, boundDirectives);
	        resultPromise = this._render.compile(renderTemplate)
	            .then(function (renderPv) {
	            var protoView = _this._protoViewFactory.createAppProtoViews(componentBinding, renderPv, boundDirectives);
	            // Populate the cache before compiling the nested components,
	            // so that components can reference themselves in their template.
	            _this._compilerCache.set(component, protoView);
	            collection_1.MapWrapper.delete(_this._compiling, component);
	            return _this._compileNestedProtoViews(renderPv, protoView, component);
	        });
	        this._compiling.set(component, resultPromise);
	        return resultPromise;
	    };
	    Compiler.prototype._removeDuplicatedDirectives = function (directives) {
	        var directivesMap = new collection_1.Map();
	        directives.forEach(function (dirBinding) { directivesMap.set(dirBinding.key.id, dirBinding); });
	        return collection_1.MapWrapper.values(directivesMap);
	    };
	    Compiler.prototype._compileNestedProtoViews = function (renderProtoView, appProtoView, componentType) {
	        var _this = this;
	        var nestedPVPromises = [];
	        this._loopComponentElementBinders(appProtoView, function (parentPv, elementBinder) {
	            var nestedComponent = elementBinder.componentDirective;
	            var elementBinderDone = function (nestedPv) { elementBinder.nestedProtoView = nestedPv; };
	            var nestedCall = _this._compile(nestedComponent);
	            if (lang_1.isPromise(nestedCall)) {
	                nestedPVPromises.push(nestedCall.then(elementBinderDone));
	            }
	            else {
	                elementBinderDone(nestedCall);
	            }
	        });
	        return async_1.PromiseWrapper.all(nestedPVPromises)
	            .then(function (_) {
	            _this._collectMergableProtoViews(appProtoView, componentType);
	            return appProtoView;
	        });
	    };
	    Compiler.prototype._collectMergableProtoViews = function (appProtoView, componentType) {
	        var isRecursive = false;
	        for (var i = 0; i < appProtoView.elementBinders.length; i++) {
	            var binder = appProtoView.elementBinders[i];
	            if (binder.hasStaticComponent()) {
	                if (lang_1.isBlank(binder.nestedProtoView.isRecursive)) {
	                    // cycle via a component. We are in the tail recursion,
	                    // so all components should have their isRecursive flag set already.
	                    isRecursive = true;
	                    break;
	                }
	            }
	            else if (binder.hasEmbeddedProtoView()) {
	                this._collectMergableProtoViews(binder.nestedProtoView, componentType);
	            }
	        }
	        if (isRecursive) {
	            if (appProtoView.isEmbeddedFragment) {
	                throw new lang_1.BaseException("<ng-content> is used within the recursive path of " + lang_1.stringify(componentType));
	            }
	            if (appProtoView.type === renderApi.ViewType.COMPONENT) {
	                throw new lang_1.BaseException("Unconditional component cycle in " + lang_1.stringify(componentType));
	            }
	        }
	        if (appProtoView.type === renderApi.ViewType.EMBEDDED ||
	            appProtoView.type === renderApi.ViewType.HOST) {
	            this._protoViewsToBeMerged.push(appProtoView);
	        }
	        appProtoView.isRecursive = isRecursive;
	    };
	    Compiler.prototype._loopComponentElementBinders = function (appProtoView, callback) {
	        var _this = this;
	        appProtoView.elementBinders.forEach(function (elementBinder) {
	            if (lang_1.isPresent(elementBinder.componentDirective)) {
	                callback(appProtoView, elementBinder);
	            }
	            else if (lang_1.isPresent(elementBinder.nestedProtoView)) {
	                _this._loopComponentElementBinders(elementBinder.nestedProtoView, callback);
	            }
	        });
	    };
	    Compiler.prototype._buildRenderTemplate = function (component, view, directives) {
	        var _this = this;
	        var componentUrl = this._urlResolver.resolve(this._appUrl, this._componentUrlMapper.getUrl(component));
	        var templateAbsUrl = null;
	        var styleAbsUrls = null;
	        if (lang_1.isPresent(view.templateUrl)) {
	            templateAbsUrl = this._urlResolver.resolve(componentUrl, view.templateUrl);
	        }
	        else if (lang_1.isPresent(view.template)) {
	            // Note: If we have an inline template, we also need to send
	            // the url for the component to the render so that it
	            // is able to resolve urls in stylesheets.
	            templateAbsUrl = componentUrl;
	        }
	        if (lang_1.isPresent(view.styleUrls)) {
	            styleAbsUrls =
	                collection_1.ListWrapper.map(view.styleUrls, function (url) { return _this._urlResolver.resolve(componentUrl, url); });
	        }
	        return new renderApi.ViewDefinition({
	            componentId: lang_1.stringify(component),
	            templateAbsUrl: templateAbsUrl, template: view.template,
	            styleAbsUrls: styleAbsUrls,
	            styles: view.styles,
	            directives: collection_1.ListWrapper.map(directives, function (directiveBinding) { return directiveBinding.metadata; })
	        });
	    };
	    Compiler.prototype._flattenDirectives = function (template) {
	        if (lang_1.isBlank(template.directives))
	            return [];
	        var directives = [];
	        this._flattenList(template.directives, directives);
	        return directives;
	    };
	    Compiler.prototype._flattenList = function (tree, out) {
	        for (var i = 0; i < tree.length; i++) {
	            var item = di_1.resolveForwardRef(tree[i]);
	            if (lang_1.isArray(item)) {
	                this._flattenList(item, out);
	            }
	            else {
	                out.push(item);
	            }
	        }
	    };
	    Compiler._isValidDirective = function (value) {
	        return lang_1.isPresent(value) && (value instanceof lang_1.Type || value instanceof di_1.Binding);
	    };
	    Compiler._assertTypeIsComponent = function (directiveBinding) {
	        if (directiveBinding.metadata.type !== renderApi.DirectiveMetadata.COMPONENT_TYPE) {
	            throw new lang_1.BaseException("Could not load '" + lang_1.stringify(directiveBinding.key.token) + "' because it is not a component.");
	        }
	    };
	    Compiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, CompilerCache, view_resolver_1.ViewResolver, component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, renderApi.RenderCompiler, proto_view_factory_1.ProtoViewFactory, app_root_url_1.AppRootUrl])
	    ], Compiler);
	    return Compiler;
	})();
	exports.Compiler = Compiler;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	/**
	 * Resolve a {@link Type} from a {@link Component} into a URL.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var ComponentUrlMapper = (function () {
	    function ComponentUrlMapper() {
	    }
	    /**
	     * Returns the base URL to the component source file.
	     * The returned URL could be:
	     * - an absolute URL,
	     * - a path relative to the application
	     */
	    ComponentUrlMapper.prototype.getUrl = function (component) { return './'; };
	    ComponentUrlMapper = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ComponentUrlMapper);
	    return ComponentUrlMapper;
	})();
	exports.ComponentUrlMapper = ComponentUrlMapper;
	var RuntimeComponentUrlMapper = (function (_super) {
	    __extends(RuntimeComponentUrlMapper, _super);
	    function RuntimeComponentUrlMapper() {
	        _super.call(this);
	        this._componentUrls = new collection_1.Map();
	    }
	    RuntimeComponentUrlMapper.prototype.setComponentUrl = function (component, url) { this._componentUrls.set(component, url); };
	    RuntimeComponentUrlMapper.prototype.getUrl = function (component) {
	        var url = this._componentUrls.get(component);
	        if (lang_1.isPresent(url))
	            return url;
	        return _super.prototype.getUrl.call(this, component);
	    };
	    return RuntimeComponentUrlMapper;
	})(ComponentUrlMapper);
	exports.RuntimeComponentUrlMapper = RuntimeComponentUrlMapper;
	//# sourceMappingURL=component_url_mapper.js.map

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var annotations_1 = __webpack_require__(47);
	var reflection_1 = __webpack_require__(9);
	/**
	 * Resolve a {@link Type} for {@link Directive}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var DirectiveResolver = (function () {
	    function DirectiveResolver() {
	    }
	    /**
	     * Return {@link Directive} for a given {@link Type}.
	     */
	    DirectiveResolver.prototype.resolve = function (type) {
	        var annotations = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
	        if (lang_1.isPresent(annotations)) {
	            for (var i = 0; i < annotations.length; i++) {
	                var annotation = annotations[i];
	                if (annotation instanceof annotations_1.Directive) {
	                    return annotation;
	                }
	            }
	        }
	        throw new lang_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
	    };
	    DirectiveResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DirectiveResolver);
	    return DirectiveResolver;
	})();
	exports.DirectiveResolver = DirectiveResolver;
	//# sourceMappingURL=directive_resolver.js.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var async_1 = __webpack_require__(5);
	var collection_1 = __webpack_require__(2);
	var di_1 = __webpack_require__(3);
	var injector_1 = __webpack_require__(137);
	var di_2 = __webpack_require__(124);
	var avmModule = __webpack_require__(49);
	var view_container_ref_1 = __webpack_require__(129);
	var element_ref_1 = __webpack_require__(68);
	var template_ref_1 = __webpack_require__(69);
	var annotations_1 = __webpack_require__(47);
	var directive_lifecycle_reflector_1 = __webpack_require__(173);
	var change_detection_1 = __webpack_require__(12);
	var query_list_1 = __webpack_require__(128);
	var reflection_1 = __webpack_require__(9);
	var api_1 = __webpack_require__(7);
	var _staticKeys;
	var StaticKeys = (function () {
	    function StaticKeys() {
	        this.viewManagerId = di_1.Key.get(avmModule.AppViewManager).id;
	        this.templateRefId = di_1.Key.get(template_ref_1.TemplateRef).id;
	        this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
	        this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
	        this.elementRefId = di_1.Key.get(element_ref_1.ElementRef).id;
	        // not an id because the public API of injector works only with keys and tokens
	        this.pipesKey = di_1.Key.get(change_detection_1.Pipes);
	    }
	    StaticKeys.instance = function () {
	        if (lang_1.isBlank(_staticKeys))
	            _staticKeys = new StaticKeys();
	        return _staticKeys;
	    };
	    return StaticKeys;
	})();
	exports.StaticKeys = StaticKeys;
	var TreeNode = (function () {
	    function TreeNode(parent) {
	        this._head = null;
	        this._tail = null;
	        this._next = null;
	        if (lang_1.isPresent(parent))
	            parent.addChild(this);
	    }
	    /**
	     * Adds a child to the parent node. The child MUST NOT be a part of a tree.
	     */
	    TreeNode.prototype.addChild = function (child) {
	        if (lang_1.isPresent(this._tail)) {
	            this._tail._next = child;
	            this._tail = child;
	        }
	        else {
	            this._tail = this._head = child;
	        }
	        child._next = null;
	        child._parent = this;
	    };
	    /**
	     * Adds a child to the parent node after a given sibling.
	     * The child MUST NOT be a part of a tree and the sibling must be present.
	     */
	    TreeNode.prototype.addChildAfter = function (child, prevSibling) {
	        if (lang_1.isBlank(prevSibling)) {
	            var prevHead = this._head;
	            this._head = child;
	            child._next = prevHead;
	            if (lang_1.isBlank(this._tail))
	                this._tail = child;
	        }
	        else if (lang_1.isBlank(prevSibling._next)) {
	            this.addChild(child);
	            return;
	        }
	        else {
	            child._next = prevSibling._next;
	            prevSibling._next = child;
	        }
	        child._parent = this;
	    };
	    /**
	     * Detaches a node from the parent's tree.
	     */
	    TreeNode.prototype.remove = function () {
	        if (lang_1.isBlank(this.parent))
	            return;
	        var nextSibling = this._next;
	        var prevSibling = this._findPrev();
	        if (lang_1.isBlank(prevSibling)) {
	            this.parent._head = this._next;
	        }
	        else {
	            prevSibling._next = this._next;
	        }
	        if (lang_1.isBlank(nextSibling)) {
	            this._parent._tail = prevSibling;
	        }
	        this._parent = null;
	        this._next = null;
	    };
	    /**
	     * Finds a previous sibling or returns null if first child.
	     * Assumes the node has a parent.
	     * TODO(rado): replace with DoublyLinkedList to avoid O(n) here.
	     */
	    TreeNode.prototype._findPrev = function () {
	        var node = this.parent._head;
	        if (node == this)
	            return null;
	        while (node._next !== this)
	            node = node._next;
	        return node;
	    };
	    Object.defineProperty(TreeNode.prototype, "parent", {
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeNode.prototype, "children", {
	        // TODO(rado): replace with a function call, does too much work for a getter.
	        get: function () {
	            var res = [];
	            var child = this._head;
	            while (child != null) {
	                res.push(child);
	                child = child._next;
	            }
	            return res;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeNode;
	})();
	exports.TreeNode = TreeNode;
	var DirectiveDependency = (function (_super) {
	    __extends(DirectiveDependency, _super);
	    function DirectiveDependency(key, optional, visibility, properties, attributeName, queryDecorator) {
	        _super.call(this, key, optional, visibility, properties);
	        this.attributeName = attributeName;
	        this.queryDecorator = queryDecorator;
	        this._verify();
	    }
	    DirectiveDependency.prototype._verify = function () {
	        var count = 0;
	        if (lang_1.isPresent(this.queryDecorator))
	            count++;
	        if (lang_1.isPresent(this.attributeName))
	            count++;
	        if (count > 1)
	            throw new lang_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
	    };
	    DirectiveDependency.createFrom = function (d) {
	        return new DirectiveDependency(d.key, d.optional, d.visibility, d.properties, DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
	    };
	    DirectiveDependency._attributeName = function (properties) {
	        var p = collection_1.ListWrapper.find(properties, function (p) { return p instanceof di_2.Attribute; });
	        return lang_1.isPresent(p) ? p.attributeName : null;
	    };
	    DirectiveDependency._query = function (properties) {
	        return collection_1.ListWrapper.find(properties, function (p) { return p instanceof di_2.Query; });
	    };
	    return DirectiveDependency;
	})(di_1.Dependency);
	exports.DirectiveDependency = DirectiveDependency;
	var DirectiveBinding = (function (_super) {
	    __extends(DirectiveBinding, _super);
	    function DirectiveBinding(key, factory, dependencies, resolvedHostInjectables, resolvedViewInjectables, metadata) {
	        _super.call(this, key, factory, dependencies);
	        this.resolvedHostInjectables = resolvedHostInjectables;
	        this.resolvedViewInjectables = resolvedViewInjectables;
	        this.metadata = metadata;
	    }
	    Object.defineProperty(DirectiveBinding.prototype, "callOnDestroy", {
	        get: function () { return this.metadata.callOnDestroy; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "callOnChange", {
	        get: function () { return this.metadata.callOnChange; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "callOnAllChangesDone", {
	        get: function () { return this.metadata.callOnAllChangesDone; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "displayName", {
	        get: function () { return this.key.displayName; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "eventEmitters", {
	        get: function () {
	            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.events) ? this.metadata.events : [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "hostActions", {
	        get: function () {
	            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.hostActions) ?
	                this.metadata.hostActions :
	                new Map();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, "changeDetection", {
	        get: function () { return this.metadata.changeDetection; },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveBinding.createFromBinding = function (binding, ann) {
	        if (lang_1.isBlank(ann)) {
	            ann = new annotations_1.Directive();
	        }
	        var rb = binding.resolve();
	        var deps = collection_1.ListWrapper.map(rb.dependencies, DirectiveDependency.createFrom);
	        var resolvedHostInjectables = lang_1.isPresent(ann.hostInjector) ? di_1.Injector.resolve(ann.hostInjector) : [];
	        var resolvedViewInjectables = ann instanceof annotations_1.Component && lang_1.isPresent(ann.viewInjector) ?
	            di_1.Injector.resolve(ann.viewInjector) :
	            [];
	        var metadata = api_1.DirectiveMetadata.create({
	            id: lang_1.stringify(rb.key.token),
	            type: ann instanceof annotations_1.Component ? api_1.DirectiveMetadata.COMPONENT_TYPE :
	                api_1.DirectiveMetadata.DIRECTIVE_TYPE,
	            selector: ann.selector,
	            compileChildren: ann.compileChildren,
	            events: ann.events,
	            host: lang_1.isPresent(ann.host) ? collection_1.MapWrapper.createFromStringMap(ann.host) : null,
	            properties: ann.properties,
	            readAttributes: DirectiveBinding._readAttributes(deps),
	            callOnDestroy: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.LifecycleEvent.onDestroy, rb.key.token, ann),
	            callOnChange: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.LifecycleEvent.onChange, rb.key.token, ann),
	            callOnCheck: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.LifecycleEvent.onCheck, rb.key.token, ann),
	            callOnInit: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.LifecycleEvent.onInit, rb.key.token, ann),
	            callOnAllChangesDone: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.LifecycleEvent.onAllChangesDone, rb.key.token, ann),
	            changeDetection: ann instanceof annotations_1.Component ? ann.changeDetection : null,
	            exportAs: ann.exportAs
	        });
	        return new DirectiveBinding(rb.key, rb.factory, deps, resolvedHostInjectables, resolvedViewInjectables, metadata);
	    };
	    DirectiveBinding._readAttributes = function (deps) {
	        var readAttributes = [];
	        collection_1.ListWrapper.forEach(deps, function (dep) {
	            if (lang_1.isPresent(dep.attributeName)) {
	                readAttributes.push(dep.attributeName);
	            }
	        });
	        return readAttributes;
	    };
	    DirectiveBinding.createFromType = function (type, annotation) {
	        var binding = new di_1.Binding(type, { toClass: type });
	        return DirectiveBinding.createFromBinding(binding, annotation);
	    };
	    return DirectiveBinding;
	})(di_1.ResolvedBinding);
	exports.DirectiveBinding = DirectiveBinding;
	// TODO(rado): benchmark and consider rolling in as ElementInjector fields.
	var PreBuiltObjects = (function () {
	    function PreBuiltObjects(viewManager, view, elementRef, templateRef) {
	        this.viewManager = viewManager;
	        this.view = view;
	        this.elementRef = elementRef;
	        this.templateRef = templateRef;
	    }
	    return PreBuiltObjects;
	})();
	exports.PreBuiltObjects = PreBuiltObjects;
	var EventEmitterAccessor = (function () {
	    function EventEmitterAccessor(eventName, getter) {
	        this.eventName = eventName;
	        this.getter = getter;
	    }
	    EventEmitterAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
	        var _this = this;
	        var eventEmitter = this.getter(directive);
	        return async_1.ObservableWrapper.subscribe(eventEmitter, function (eventObj) { return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex); });
	    };
	    return EventEmitterAccessor;
	})();
	exports.EventEmitterAccessor = EventEmitterAccessor;
	var HostActionAccessor = (function () {
	    function HostActionAccessor(methodName, getter) {
	        this.methodName = methodName;
	        this.getter = getter;
	    }
	    HostActionAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
	        var _this = this;
	        var eventEmitter = this.getter(directive);
	        return async_1.ObservableWrapper.subscribe(eventEmitter, function (actionArgs) { return view.invokeElementMethod(boundElementIndex, _this.methodName, actionArgs); });
	    };
	    return HostActionAccessor;
	})();
	exports.HostActionAccessor = HostActionAccessor;
	function _createEventEmitterAccessors(bwv) {
	    var binding = bwv.binding;
	    if (!(binding instanceof DirectiveBinding))
	        return [];
	    var db = binding;
	    return collection_1.ListWrapper.map(db.eventEmitters, function (eventConfig) {
	        var fieldName;
	        var eventName;
	        var colonIdx = eventConfig.indexOf(':');
	        if (colonIdx > -1) {
	            // long format: 'fieldName: eventName'
	            fieldName = lang_1.StringWrapper.substring(eventConfig, 0, colonIdx).trim();
	            eventName = lang_1.StringWrapper.substring(eventConfig, colonIdx + 1).trim();
	        }
	        else {
	            // short format: 'name' when fieldName and eventName are the same
	            fieldName = eventName = eventConfig;
	        }
	        return new EventEmitterAccessor(eventName, reflection_1.reflector.getter(fieldName));
	    });
	}
	function _createHostActionAccessors(bwv) {
	    var binding = bwv.binding;
	    if (!(binding instanceof DirectiveBinding))
	        return [];
	    var res = [];
	    var db = binding;
	    collection_1.MapWrapper.forEach(db.hostActions, function (actionExpression, actionName) {
	        res.push(new HostActionAccessor(actionExpression, reflection_1.reflector.getter(actionName)));
	    });
	    return res;
	}
	var ProtoElementInjector = (function () {
	    function ProtoElementInjector(parent, index, bwv, distanceToParent, _firstBindingIsComponent, directiveVariableBindings) {
	        this.parent = parent;
	        this.index = index;
	        this.distanceToParent = distanceToParent;
	        this._firstBindingIsComponent = _firstBindingIsComponent;
	        this.directiveVariableBindings = directiveVariableBindings;
	        var length = bwv.length;
	        this.protoInjector = new di_1.ProtoInjector(bwv);
	        this.eventEmitterAccessors = collection_1.ListWrapper.createFixedSize(length);
	        this.hostActionAccessors = collection_1.ListWrapper.createFixedSize(length);
	        for (var i = 0; i < length; ++i) {
	            this.eventEmitterAccessors[i] = _createEventEmitterAccessors(bwv[i]);
	            this.hostActionAccessors[i] = _createHostActionAccessors(bwv[i]);
	        }
	    }
	    ProtoElementInjector.create = function (parent, index, bindings, firstBindingIsComponent, distanceToParent, directiveVariableBindings) {
	        var bd = [];
	        ProtoElementInjector._createDirectiveBindingWithVisibility(bindings, bd, firstBindingIsComponent);
	        if (firstBindingIsComponent) {
	            ProtoElementInjector._createViewInjectorBindingWithVisibility(bindings, bd);
	        }
	        ProtoElementInjector._createHostInjectorBindingWithVisibility(bindings, bd, firstBindingIsComponent);
	        return new ProtoElementInjector(parent, index, bd, distanceToParent, firstBindingIsComponent, directiveVariableBindings);
	    };
	    ProtoElementInjector._createDirectiveBindingWithVisibility = function (dirBindings, bd, firstBindingIsComponent) {
	        collection_1.ListWrapper.forEach(dirBindings, function (dirBinding) {
	            bd.push(ProtoElementInjector._createBindingWithVisibility(firstBindingIsComponent, dirBinding, dirBindings, dirBinding));
	        });
	    };
	    ProtoElementInjector._createHostInjectorBindingWithVisibility = function (dirBindings, bd, firstBindingIsComponent) {
	        collection_1.ListWrapper.forEach(dirBindings, function (dirBinding) {
	            collection_1.ListWrapper.forEach(dirBinding.resolvedHostInjectables, function (b) {
	                bd.push(ProtoElementInjector._createBindingWithVisibility(firstBindingIsComponent, dirBinding, dirBindings, b));
	            });
	        });
	    };
	    ProtoElementInjector._createBindingWithVisibility = function (firstBindingIsComponent, dirBinding, dirBindings, binding) {
	        var isComponent = firstBindingIsComponent && dirBindings[0] === dirBinding;
	        return new injector_1.BindingWithVisibility(binding, isComponent ? di_1.PUBLIC_AND_PRIVATE : di_1.PUBLIC);
	    };
	    ProtoElementInjector._createViewInjectorBindingWithVisibility = function (bindings, bd) {
	        var db = bindings[0];
	        collection_1.ListWrapper.forEach(db.resolvedViewInjectables, function (b) { return bd.push(new injector_1.BindingWithVisibility(b, di_1.PRIVATE)); });
	    };
	    ProtoElementInjector.prototype.instantiate = function (parent) {
	        return new ElementInjector(this, parent);
	    };
	    ProtoElementInjector.prototype.directParent = function () { return this.distanceToParent < 2 ? this.parent : null; };
	    Object.defineProperty(ProtoElementInjector.prototype, "hasBindings", {
	        get: function () { return this.eventEmitterAccessors.length > 0; },
	        enumerable: true,
	        configurable: true
	    });
	    ProtoElementInjector.prototype.getBindingAtIndex = function (index) { return this.protoInjector.getBindingAtIndex(index); };
	    return ProtoElementInjector;
	})();
	exports.ProtoElementInjector = ProtoElementInjector;
	var ElementInjector = (function (_super) {
	    __extends(ElementInjector, _super);
	    function ElementInjector(_proto, parent) {
	        _super.call(this, parent);
	        this._proto = _proto;
	        this._preBuiltObjects = null;
	        this._injector = new di_1.Injector(this._proto.protoInjector, null, this);
	        // we couple ourselves to the injector strategy to avoid polymoprhic calls
	        var injectorStrategy = this._injector.internalStrategy;
	        this._strategy = injectorStrategy instanceof injector_1.InjectorInlineStrategy ?
	            new ElementInjectorInlineStrategy(injectorStrategy, this) :
	            new ElementInjectorDynamicStrategy(injectorStrategy, this);
	        this.hydrated = false;
	        this._buildQueries();
	        this._addParentQueries();
	    }
	    ElementInjector.prototype.dehydrate = function () {
	        this.hydrated = false;
	        this._host = null;
	        this._preBuiltObjects = null;
	        this._strategy.callOnDestroy();
	        this._strategy.dehydrate();
	    };
	    ElementInjector.prototype.onAllChangesDone = function () {
	        if (lang_1.isPresent(this._query0) && this._query0.originator === this) {
	            this._query0.list.fireCallbacks();
	        }
	        if (lang_1.isPresent(this._query1) && this._query1.originator === this) {
	            this._query1.list.fireCallbacks();
	        }
	        if (lang_1.isPresent(this._query2) && this._query2.originator === this) {
	            this._query2.list.fireCallbacks();
	        }
	    };
	    ElementInjector.prototype.hydrate = function (imperativelyCreatedInjector, host, preBuiltObjects) {
	        this._host = host;
	        this._preBuiltObjects = preBuiltObjects;
	        this._reattachInjectors(imperativelyCreatedInjector);
	        this._strategy.hydrate();
	        if (lang_1.isPresent(host)) {
	            this._addViewQueries(host);
	        }
	        this._addDirectivesToQueries();
	        this._addVarBindingsToQueries();
	        this.hydrated = true;
	    };
	    ElementInjector.prototype._reattachInjectors = function (imperativelyCreatedInjector) {
	        // Dynamically-loaded component in the template. Not a root ElementInjector.
	        if (lang_1.isPresent(this._parent)) {
	            if (lang_1.isPresent(imperativelyCreatedInjector)) {
	                // The imperative injector is similar to having an element between
	                // the dynamic-loaded component and its parent => no boundaries.
	                this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
	                this._reattachInjector(imperativelyCreatedInjector, this._parent._injector, false);
	            }
	            else {
	                this._reattachInjector(this._injector, this._parent._injector, false);
	            }
	        }
	        else if (lang_1.isPresent(this._host)) {
	            // The imperative injector is similar to having an element between
	            // the dynamic-loaded component and its parent => no boundary between
	            // the component and imperativelyCreatedInjector.
	            // But since it is a root ElementInjector, we need to create a boundary
	            // between imperativelyCreatedInjector and _host.
	            if (lang_1.isPresent(imperativelyCreatedInjector)) {
	                this._reattachInjector(this._injector, imperativelyCreatedInjector, false);
	                this._reattachInjector(imperativelyCreatedInjector, this._host._injector, true);
	            }
	            else {
	                this._reattachInjector(this._injector, this._host._injector, true);
	            }
	        }
	        else {
	            if (lang_1.isPresent(imperativelyCreatedInjector)) {
	                this._reattachInjector(this._injector, imperativelyCreatedInjector, true);
	            }
	        }
	    };
	    ElementInjector.prototype._reattachInjector = function (injector, parentInjector, isBoundary) {
	        injector.internalStrategy.attach(parentInjector, isBoundary);
	    };
	    ElementInjector.prototype.getPipes = function () {
	        var pipesKey = StaticKeys.instance().pipesKey;
	        return this._injector.getOptional(pipesKey);
	    };
	    ElementInjector.prototype.hasVariableBinding = function (name) {
	        var vb = this._proto.directiveVariableBindings;
	        return lang_1.isPresent(vb) && vb.has(name);
	    };
	    ElementInjector.prototype.getVariableBinding = function (name) {
	        var index = this._proto.directiveVariableBindings.get(name);
	        return lang_1.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
	    };
	    ElementInjector.prototype.get = function (token) { return this._injector.get(token); };
	    ElementInjector.prototype.hasDirective = function (type) { return lang_1.isPresent(this._injector.getOptional(type)); };
	    ElementInjector.prototype.getEventEmitterAccessors = function () {
	        return this._proto.eventEmitterAccessors;
	    };
	    ElementInjector.prototype.getHostActionAccessors = function () {
	        return this._proto.hostActionAccessors;
	    };
	    ElementInjector.prototype.getDirectiveVariableBindings = function () {
	        return this._proto.directiveVariableBindings;
	    };
	    ElementInjector.prototype.getComponent = function () { return this._strategy.getComponent(); };
	    ElementInjector.prototype.getElementRef = function () { return this._preBuiltObjects.elementRef; };
	    ElementInjector.prototype.getViewContainerRef = function () {
	        return new view_container_ref_1.ViewContainerRef(this._preBuiltObjects.viewManager, this.getElementRef());
	    };
	    ElementInjector.prototype.directParent = function () { return this._proto.distanceToParent < 2 ? this.parent : null; };
	    ElementInjector.prototype.isComponentKey = function (key) { return this._strategy.isComponentKey(key); };
	    ElementInjector.prototype.getDependency = function (injector, binding, dep) {
	        var key = dep.key;
	        if (!(dep instanceof DirectiveDependency))
	            return di_1.undefinedValue;
	        if (!(binding instanceof DirectiveBinding))
	            return di_1.undefinedValue;
	        var dirDep = dep;
	        var dirBin = binding;
	        var staticKeys = StaticKeys.instance();
	        if (key.id === staticKeys.viewManagerId)
	            return this._preBuiltObjects.viewManager;
	        if (lang_1.isPresent(dirDep.attributeName))
	            return this._buildAttribute(dirDep);
	        if (lang_1.isPresent(dirDep.queryDecorator))
	            return this._findQuery(dirDep.queryDecorator).list;
	        if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
	            // We provide the component's view change detector to components and
	            // the surrounding component's change detector to directives.
	            if (dirBin.metadata.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
	                var componentView = this._preBuiltObjects.view.getNestedView(this._preBuiltObjects.elementRef.boundElementIndex);
	                return componentView.changeDetector.ref;
	            }
	            else {
	                return this._preBuiltObjects.view.changeDetector.ref;
	            }
	        }
	        if (dirDep.key.id === StaticKeys.instance().elementRefId) {
	            return this.getElementRef();
	        }
	        if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
	            return this.getViewContainerRef();
	        }
	        if (dirDep.key.id === StaticKeys.instance().templateRefId) {
	            if (lang_1.isBlank(this._preBuiltObjects.templateRef)) {
	                if (dirDep.optional) {
	                    return null;
	                }
	                throw new di_1.NoBindingError(dirDep.key);
	            }
	            return this._preBuiltObjects.templateRef;
	        }
	        return di_1.undefinedValue;
	    };
	    ElementInjector.prototype._buildAttribute = function (dep) {
	        var attributes = this._proto.attributes;
	        if (lang_1.isPresent(attributes) && attributes.has(dep.attributeName)) {
	            return attributes.get(dep.attributeName);
	        }
	        else {
	            return null;
	        }
	    };
	    ElementInjector.prototype._buildQueriesForDeps = function (deps) {
	        for (var i = 0; i < deps.length; i++) {
	            var dep = deps[i];
	            if (lang_1.isPresent(dep.queryDecorator)) {
	                this._createQueryRef(dep.queryDecorator);
	            }
	        }
	    };
	    ElementInjector.prototype._addViewQueries = function (host) {
	        if (lang_1.isPresent(host._query0) && host._query0.originator == host)
	            this._addViewQuery(host._query0);
	        if (lang_1.isPresent(host._query1) && host._query1.originator == host)
	            this._addViewQuery(host._query1);
	        if (lang_1.isPresent(host._query2) && host._query2.originator == host)
	            this._addViewQuery(host._query2);
	    };
	    ElementInjector.prototype._addViewQuery = function (queryRef) {
	        // TODO(rado): Replace this.parent check with distanceToParent = 1 when
	        // https://github.com/angular/angular/issues/2707 is fixed.
	        if (!queryRef.query.descendants && lang_1.isPresent(this.parent))
	            return;
	        this._assignQueryRef(queryRef);
	    };
	    ElementInjector.prototype._addVarBindingsToQueries = function () {
	        this._addVarBindingsToQuery(this._query0);
	        this._addVarBindingsToQuery(this._query1);
	        this._addVarBindingsToQuery(this._query2);
	    };
	    ElementInjector.prototype._addDirectivesToQueries = function () {
	        this._addDirectivesToQuery(this._query0);
	        this._addDirectivesToQuery(this._query1);
	        this._addDirectivesToQuery(this._query2);
	    };
	    ElementInjector.prototype._addVarBindingsToQuery = function (queryRef) {
	        if (lang_1.isBlank(queryRef) || !queryRef.query.isVarBindingQuery)
	            return;
	        var vb = queryRef.query.varBindings;
	        for (var i = 0; i < vb.length; ++i) {
	            if (this.hasVariableBinding(vb[i])) {
	                queryRef.list.add(this.getVariableBinding(vb[i]));
	            }
	        }
	    };
	    ElementInjector.prototype._addDirectivesToQuery = function (queryRef) {
	        if (lang_1.isBlank(queryRef) || queryRef.query.isVarBindingQuery)
	            return;
	        var matched = [];
	        this.addDirectivesMatchingQuery(queryRef.query, matched);
	        matched.forEach(function (s) { return queryRef.list.add(s); });
	    };
	    ElementInjector.prototype._createQueryRef = function (query) {
	        var queryList = new query_list_1.QueryList();
	        if (lang_1.isBlank(this._query0)) {
	            this._query0 = new QueryRef(query, queryList, this);
	        }
	        else if (lang_1.isBlank(this._query1)) {
	            this._query1 = new QueryRef(query, queryList, this);
	        }
	        else if (lang_1.isBlank(this._query2)) {
	            this._query2 = new QueryRef(query, queryList, this);
	        }
	        else {
	            throw new QueryError();
	        }
	    };
	    ElementInjector.prototype.addDirectivesMatchingQuery = function (query, list) {
	        this._strategy.addDirectivesMatchingQuery(query, list);
	    };
	    ElementInjector.prototype._buildQueries = function () {
	        if (lang_1.isPresent(this._proto)) {
	            this._strategy.buildQueries();
	        }
	    };
	    ElementInjector.prototype._findQuery = function (query) {
	        if (lang_1.isPresent(this._query0) && this._query0.query === query) {
	            return this._query0;
	        }
	        if (lang_1.isPresent(this._query1) && this._query1.query === query) {
	            return this._query1;
	        }
	        if (lang_1.isPresent(this._query2) && this._query2.query === query) {
	            return this._query2;
	        }
	        throw new lang_1.BaseException("Cannot find query for directive " + query + ".");
	    };
	    ElementInjector.prototype._hasQuery = function (query) {
	        return this._query0 == query || this._query1 == query || this._query2 == query;
	    };
	    ElementInjector.prototype.link = function (parent) {
	        parent.addChild(this);
	        this._addParentQueries();
	    };
	    ElementInjector.prototype.linkAfter = function (parent, prevSibling) {
	        parent.addChildAfter(this, prevSibling);
	        this._addParentQueries();
	    };
	    ElementInjector.prototype._addParentQueries = function () {
	        if (lang_1.isBlank(this.parent))
	            return;
	        if (lang_1.isPresent(this.parent._query0) && !this.parent._query0.query.isViewQuery) {
	            this._addQueryToTree(this.parent._query0);
	            if (this.hydrated)
	                this.parent._query0.update();
	        }
	        if (lang_1.isPresent(this.parent._query1) && !this.parent._query1.query.isViewQuery) {
	            this._addQueryToTree(this.parent._query1);
	            if (this.hydrated)
	                this.parent._query1.update();
	        }
	        if (lang_1.isPresent(this.parent._query2) && !this.parent._query2.query.isViewQuery) {
	            this._addQueryToTree(this.parent._query2);
	            if (this.hydrated)
	                this.parent._query2.update();
	        }
	    };
	    ElementInjector.prototype.unlink = function () {
	        var queriesToUpdate = [];
	        if (lang_1.isPresent(this.parent._query0)) {
	            this._pruneQueryFromTree(this.parent._query0);
	            queriesToUpdate.push(this.parent._query0);
	        }
	        if (lang_1.isPresent(this.parent._query1)) {
	            this._pruneQueryFromTree(this.parent._query1);
	            queriesToUpdate.push(this.parent._query1);
	        }
	        if (lang_1.isPresent(this.parent._query2)) {
	            this._pruneQueryFromTree(this.parent._query2);
	            queriesToUpdate.push(this.parent._query2);
	        }
	        this.remove();
	        collection_1.ListWrapper.forEach(queriesToUpdate, function (q) { return q.update(); });
	    };
	    ElementInjector.prototype._pruneQueryFromTree = function (query) {
	        this._removeQueryRef(query);
	        var child = this._head;
	        while (lang_1.isPresent(child)) {
	            child._pruneQueryFromTree(query);
	            child = child._next;
	        }
	    };
	    ElementInjector.prototype._addQueryToTree = function (queryRef) {
	        if (queryRef.query.descendants == false) {
	            if (this == queryRef.originator) {
	                this._addQueryToTreeSelfAndRecurse(queryRef);
	            }
	            else if (this.parent == queryRef.originator) {
	                this._assignQueryRef(queryRef);
	            }
	        }
	        else {
	            this._addQueryToTreeSelfAndRecurse(queryRef);
	        }
	    };
	    ElementInjector.prototype._addQueryToTreeSelfAndRecurse = function (queryRef) {
	        this._assignQueryRef(queryRef);
	        var child = this._head;
	        while (lang_1.isPresent(child)) {
	            child._addQueryToTree(queryRef);
	            child = child._next;
	        }
	    };
	    ElementInjector.prototype._assignQueryRef = function (query) {
	        if (lang_1.isBlank(this._query0)) {
	            this._query0 = query;
	            return;
	        }
	        else if (lang_1.isBlank(this._query1)) {
	            this._query1 = query;
	            return;
	        }
	        else if (lang_1.isBlank(this._query2)) {
	            this._query2 = query;
	            return;
	        }
	        throw new QueryError();
	    };
	    ElementInjector.prototype._removeQueryRef = function (query) {
	        if (this._query0 == query)
	            this._query0 = null;
	        if (this._query1 == query)
	            this._query1 = null;
	        if (this._query2 == query)
	            this._query2 = null;
	    };
	    ElementInjector.prototype.getDirectiveAtIndex = function (index) { return this._injector.getAt(index); };
	    ElementInjector.prototype.hasInstances = function () { return this._proto.hasBindings && this.hydrated; };
	    ElementInjector.prototype.getHost = function () { return this._host; };
	    ElementInjector.prototype.getBoundElementIndex = function () { return this._proto.index; };
	    return ElementInjector;
	})(TreeNode);
	exports.ElementInjector = ElementInjector;
	/**
	 * Strategy used by the `ElementInjector` when the number of bindings is 10 or less.
	 * In such a case, inlining fields is benefitial for performances.
	 */
	var ElementInjectorInlineStrategy = (function () {
	    function ElementInjectorInlineStrategy(injectorStrategy, _ei) {
	        this.injectorStrategy = injectorStrategy;
	        this._ei = _ei;
	    }
	    ElementInjectorInlineStrategy.prototype.hydrate = function () {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        i.resetContructionCounter();
	        if (p.binding0 instanceof DirectiveBinding && lang_1.isPresent(p.keyId0) && i.obj0 === di_1.undefinedValue)
	            i.obj0 = i.instantiateBinding(p.binding0, p.visibility0);
	        if (p.binding1 instanceof DirectiveBinding && lang_1.isPresent(p.keyId1) && i.obj1 === di_1.undefinedValue)
	            i.obj1 = i.instantiateBinding(p.binding1, p.visibility1);
	        if (p.binding2 instanceof DirectiveBinding && lang_1.isPresent(p.keyId2) && i.obj2 === di_1.undefinedValue)
	            i.obj2 = i.instantiateBinding(p.binding2, p.visibility2);
	        if (p.binding3 instanceof DirectiveBinding && lang_1.isPresent(p.keyId3) && i.obj3 === di_1.undefinedValue)
	            i.obj3 = i.instantiateBinding(p.binding3, p.visibility3);
	        if (p.binding4 instanceof DirectiveBinding && lang_1.isPresent(p.keyId4) && i.obj4 === di_1.undefinedValue)
	            i.obj4 = i.instantiateBinding(p.binding4, p.visibility4);
	        if (p.binding5 instanceof DirectiveBinding && lang_1.isPresent(p.keyId5) && i.obj5 === di_1.undefinedValue)
	            i.obj5 = i.instantiateBinding(p.binding5, p.visibility5);
	        if (p.binding6 instanceof DirectiveBinding && lang_1.isPresent(p.keyId6) && i.obj6 === di_1.undefinedValue)
	            i.obj6 = i.instantiateBinding(p.binding6, p.visibility6);
	        if (p.binding7 instanceof DirectiveBinding && lang_1.isPresent(p.keyId7) && i.obj7 === di_1.undefinedValue)
	            i.obj7 = i.instantiateBinding(p.binding7, p.visibility7);
	        if (p.binding8 instanceof DirectiveBinding && lang_1.isPresent(p.keyId8) && i.obj8 === di_1.undefinedValue)
	            i.obj8 = i.instantiateBinding(p.binding8, p.visibility8);
	        if (p.binding9 instanceof DirectiveBinding && lang_1.isPresent(p.keyId9) && i.obj9 === di_1.undefinedValue)
	            i.obj9 = i.instantiateBinding(p.binding9, p.visibility9);
	    };
	    ElementInjectorInlineStrategy.prototype.dehydrate = function () {
	        var i = this.injectorStrategy;
	        i.obj0 = di_1.undefinedValue;
	        i.obj1 = di_1.undefinedValue;
	        i.obj2 = di_1.undefinedValue;
	        i.obj3 = di_1.undefinedValue;
	        i.obj4 = di_1.undefinedValue;
	        i.obj5 = di_1.undefinedValue;
	        i.obj6 = di_1.undefinedValue;
	        i.obj7 = di_1.undefinedValue;
	        i.obj8 = di_1.undefinedValue;
	        i.obj9 = di_1.undefinedValue;
	    };
	    ElementInjectorInlineStrategy.prototype.callOnDestroy = function () {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        if (p.binding0 instanceof DirectiveBinding && p.binding0.callOnDestroy) {
	            i.obj0.onDestroy();
	        }
	        if (p.binding1 instanceof DirectiveBinding && p.binding1.callOnDestroy) {
	            i.obj1.onDestroy();
	        }
	        if (p.binding2 instanceof DirectiveBinding && p.binding2.callOnDestroy) {
	            i.obj2.onDestroy();
	        }
	        if (p.binding3 instanceof DirectiveBinding && p.binding3.callOnDestroy) {
	            i.obj3.onDestroy();
	        }
	        if (p.binding4 instanceof DirectiveBinding && p.binding4.callOnDestroy) {
	            i.obj4.onDestroy();
	        }
	        if (p.binding5 instanceof DirectiveBinding && p.binding5.callOnDestroy) {
	            i.obj5.onDestroy();
	        }
	        if (p.binding6 instanceof DirectiveBinding && p.binding6.callOnDestroy) {
	            i.obj6.onDestroy();
	        }
	        if (p.binding7 instanceof DirectiveBinding && p.binding7.callOnDestroy) {
	            i.obj7.onDestroy();
	        }
	        if (p.binding8 instanceof DirectiveBinding && p.binding8.callOnDestroy) {
	            i.obj8.onDestroy();
	        }
	        if (p.binding9 instanceof DirectiveBinding && p.binding9.callOnDestroy) {
	            i.obj9.onDestroy();
	        }
	    };
	    ElementInjectorInlineStrategy.prototype.getComponent = function () { return this.injectorStrategy.obj0; };
	    ElementInjectorInlineStrategy.prototype.isComponentKey = function (key) {
	        return this._ei._proto._firstBindingIsComponent && lang_1.isPresent(key) &&
	            key.id === this.injectorStrategy.protoStrategy.keyId0;
	    };
	    ElementInjectorInlineStrategy.prototype.buildQueries = function () {
	        var p = this.injectorStrategy.protoStrategy;
	        if (p.binding0 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding0.dependencies);
	        }
	        if (p.binding1 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding1.dependencies);
	        }
	        if (p.binding2 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding2.dependencies);
	        }
	        if (p.binding3 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding3.dependencies);
	        }
	        if (p.binding4 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding4.dependencies);
	        }
	        if (p.binding5 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding5.dependencies);
	        }
	        if (p.binding6 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding6.dependencies);
	        }
	        if (p.binding7 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding7.dependencies);
	        }
	        if (p.binding8 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding8.dependencies);
	        }
	        if (p.binding9 instanceof DirectiveBinding) {
	            this._ei._buildQueriesForDeps(p.binding9.dependencies);
	        }
	    };
	    ElementInjectorInlineStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var i = this.injectorStrategy;
	        var p = i.protoStrategy;
	        if (lang_1.isPresent(p.binding0) && p.binding0.key.token === query.selector) {
	            if (i.obj0 === di_1.undefinedValue)
	                i.obj0 = i.instantiateBinding(p.binding0, p.visibility0);
	            list.push(i.obj0);
	        }
	        if (lang_1.isPresent(p.binding1) && p.binding1.key.token === query.selector) {
	            if (i.obj1 === di_1.undefinedValue)
	                i.obj1 = i.instantiateBinding(p.binding1, p.visibility1);
	            list.push(i.obj1);
	        }
	        if (lang_1.isPresent(p.binding2) && p.binding2.key.token === query.selector) {
	            if (i.obj2 === di_1.undefinedValue)
	                i.obj2 = i.instantiateBinding(p.binding2, p.visibility2);
	            list.push(i.obj2);
	        }
	        if (lang_1.isPresent(p.binding3) && p.binding3.key.token === query.selector) {
	            if (i.obj3 === di_1.undefinedValue)
	                i.obj3 = i.instantiateBinding(p.binding3, p.visibility3);
	            list.push(i.obj3);
	        }
	        if (lang_1.isPresent(p.binding4) && p.binding4.key.token === query.selector) {
	            if (i.obj4 === di_1.undefinedValue)
	                i.obj4 = i.instantiateBinding(p.binding4, p.visibility4);
	            list.push(i.obj4);
	        }
	        if (lang_1.isPresent(p.binding5) && p.binding5.key.token === query.selector) {
	            if (i.obj5 === di_1.undefinedValue)
	                i.obj5 = i.instantiateBinding(p.binding5, p.visibility5);
	            list.push(i.obj5);
	        }
	        if (lang_1.isPresent(p.binding6) && p.binding6.key.token === query.selector) {
	            if (i.obj6 === di_1.undefinedValue)
	                i.obj6 = i.instantiateBinding(p.binding6, p.visibility6);
	            list.push(i.obj6);
	        }
	        if (lang_1.isPresent(p.binding7) && p.binding7.key.token === query.selector) {
	            if (i.obj7 === di_1.undefinedValue)
	                i.obj7 = i.instantiateBinding(p.binding7, p.visibility7);
	            list.push(i.obj7);
	        }
	        if (lang_1.isPresent(p.binding8) && p.binding8.key.token === query.selector) {
	            if (i.obj8 === di_1.undefinedValue)
	                i.obj8 = i.instantiateBinding(p.binding8, p.visibility8);
	            list.push(i.obj8);
	        }
	        if (lang_1.isPresent(p.binding9) && p.binding9.key.token === query.selector) {
	            if (i.obj9 === di_1.undefinedValue)
	                i.obj9 = i.instantiateBinding(p.binding9, p.visibility9);
	            list.push(i.obj9);
	        }
	    };
	    ElementInjectorInlineStrategy.prototype.getComponentBinding = function () {
	        var p = this.injectorStrategy.protoStrategy;
	        return p.binding0;
	    };
	    return ElementInjectorInlineStrategy;
	})();
	/**
	 * Strategy used by the `ElementInjector` when the number of bindings is 10 or less.
	 * In such a case, inlining fields is benefitial for performances.
	 */
	var ElementInjectorDynamicStrategy = (function () {
	    function ElementInjectorDynamicStrategy(injectorStrategy, _ei) {
	        this.injectorStrategy = injectorStrategy;
	        this._ei = _ei;
	    }
	    ElementInjectorDynamicStrategy.prototype.hydrate = function () {
	        var inj = this.injectorStrategy;
	        var p = inj.protoStrategy;
	        for (var i = 0; i < p.keyIds.length; i++) {
	            if (p.bindings[i] instanceof DirectiveBinding && lang_1.isPresent(p.keyIds[i]) &&
	                inj.objs[i] === di_1.undefinedValue) {
	                inj.objs[i] = inj.instantiateBinding(p.bindings[i], p.visibilities[i]);
	            }
	        }
	    };
	    ElementInjectorDynamicStrategy.prototype.dehydrate = function () {
	        var inj = this.injectorStrategy;
	        collection_1.ListWrapper.fill(inj.objs, di_1.undefinedValue);
	    };
	    ElementInjectorDynamicStrategy.prototype.callOnDestroy = function () {
	        var ist = this.injectorStrategy;
	        var p = ist.protoStrategy;
	        for (var i = 0; i < p.bindings.length; i++) {
	            if (p.bindings[i] instanceof DirectiveBinding &&
	                p.bindings[i].callOnDestroy) {
	                ist.objs[i].onDestroy();
	            }
	        }
	    };
	    ElementInjectorDynamicStrategy.prototype.getComponent = function () { return this.injectorStrategy.objs[0]; };
	    ElementInjectorDynamicStrategy.prototype.isComponentKey = function (key) {
	        var p = this.injectorStrategy.protoStrategy;
	        return this._ei._proto._firstBindingIsComponent && lang_1.isPresent(key) && key.id === p.keyIds[0];
	    };
	    ElementInjectorDynamicStrategy.prototype.buildQueries = function () {
	        var inj = this.injectorStrategy;
	        var p = inj.protoStrategy;
	        for (var i = 0; i < p.bindings.length; i++) {
	            if (p.bindings[i] instanceof DirectiveBinding) {
	                this._ei._buildQueriesForDeps(p.bindings[i].dependencies);
	            }
	        }
	    };
	    ElementInjectorDynamicStrategy.prototype.addDirectivesMatchingQuery = function (query, list) {
	        var ist = this.injectorStrategy;
	        var p = ist.protoStrategy;
	        for (var i = 0; i < p.bindings.length; i++) {
	            if (p.bindings[i].key.token === query.selector) {
	                if (ist.objs[i] === di_1.undefinedValue) {
	                    ist.objs[i] = ist.instantiateBinding(p.bindings[i], p.visibilities[i]);
	                }
	                list.push(ist.objs[i]);
	            }
	        }
	    };
	    ElementInjectorDynamicStrategy.prototype.getComponentBinding = function () {
	        var p = this.injectorStrategy.protoStrategy;
	        return p.bindings[0];
	    };
	    return ElementInjectorDynamicStrategy;
	})();
	var QueryError = (function (_super) {
	    __extends(QueryError, _super);
	    // TODO(rado): pass the names of the active directives.
	    function QueryError() {
	        _super.call(this);
	        this.message = 'Only 3 queries can be concurrently active in a template.';
	    }
	    QueryError.prototype.toString = function () { return this.message; };
	    return QueryError;
	})(lang_1.BaseException);
	exports.QueryError = QueryError;
	var QueryRef = (function () {
	    function QueryRef(query, list, originator) {
	        this.query = query;
	        this.list = list;
	        this.originator = originator;
	    }
	    QueryRef.prototype.update = function () {
	        var aggregator = [];
	        this.visit(this.originator, aggregator);
	        this.list.reset(aggregator);
	    };
	    QueryRef.prototype.visit = function (inj, aggregator) {
	        if (lang_1.isBlank(inj) || !inj._hasQuery(this))
	            return;
	        if (this.query.isVarBindingQuery) {
	            this._aggregateVariableBindings(inj, aggregator);
	        }
	        else {
	            this._aggregateDirective(inj, aggregator);
	        }
	        var child = inj._head;
	        while (lang_1.isPresent(child)) {
	            this.visit(child, aggregator);
	            child = child._next;
	        }
	    };
	    QueryRef.prototype._aggregateVariableBindings = function (inj, aggregator) {
	        var vb = this.query.varBindings;
	        for (var i = 0; i < vb.length; ++i) {
	            if (inj.hasVariableBinding(vb[i])) {
	                aggregator.push(inj.getVariableBinding(vb[i]));
	            }
	        }
	    };
	    QueryRef.prototype._aggregateDirective = function (inj, aggregator) {
	        inj.addDirectivesMatchingQuery(this.query, aggregator);
	    };
	    return QueryRef;
	})();
	exports.QueryRef = QueryRef;
	//# sourceMappingURL=element_injector.js.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	/**
	 * Reference to the element.
	 *
	 * Represents an opaque reference to the underlying element. The element is a DOM ELement in
	 * a Browser, but may represent other types on other rendering platforms. In the browser the
	 * `ElementRef` can be sent to the web-worker. Web Workers can not have references to the
	 * DOM Elements.
	 */
	var ElementRef = (function () {
	    function ElementRef(parentView, boundElementIndex, renderBoundElementIndex, _renderer) {
	        this._renderer = _renderer;
	        this.parentView = parentView;
	        this.boundElementIndex = boundElementIndex;
	        this.renderBoundElementIndex = renderBoundElementIndex;
	    }
	    Object.defineProperty(ElementRef.prototype, "renderView", {
	        /**
	         *
	         */
	        get: function () { return this.parentView.render; },
	        // TODO(tbosch): remove this once Typescript supports declaring interfaces
	        // that contain getters
	        // https://github.com/Microsoft/TypeScript/issues/3745
	        set: function (viewRef) { throw new lang_1.BaseException('Abstract setter'); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ElementRef.prototype, "nativeElement", {
	        /**
	         * Returns the native Element implementation.
	         *
	         * In the browser this represents the DOM Element.
	         *
	         * The `nativeElement` can be used as an escape hatch when direct DOM manipulation is needed. Use
	         * this with caution, as it creates tight coupling between your application and the Browser, which
	         * will not work in WebWorkers.
	         *
	         * NOTE: This method will return null in the webworker scenario!
	         */
	        get: function () { return this._renderer.getNativeElementSync(this); },
	        enumerable: true,
	        configurable: true
	    });
	    return ElementRef;
	})();
	exports.ElementRef = ElementRef;
	//# sourceMappingURL=element_ref.js.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var view_ref_1 = __webpack_require__(21);
	/**
	 * Reference to a template within a component.
	 *
	 * Represents an opaque reference to the underlying template that can
	 * be instantiated using the {@Link ViewContainerRef}.
	 */
	var TemplateRef = (function () {
	    function TemplateRef(elementRef) {
	        this.elementRef = elementRef;
	    }
	    TemplateRef.prototype._getProtoView = function () {
	        var parentView = view_ref_1.internalView(this.elementRef.parentView);
	        return parentView.proto
	            .elementBinders[this.elementRef.boundElementIndex - parentView.elementOffset]
	            .nestedProtoView;
	    };
	    Object.defineProperty(TemplateRef.prototype, "protoViewRef", {
	        get: function () { return this._getProtoView().ref; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Whether this template has a local variable with the given name
	     */
	    TemplateRef.prototype.hasLocal = function (name) { return this._getProtoView().protoLocals.has(name); };
	    return TemplateRef;
	})();
	exports.TemplateRef = TemplateRef;
	//# sourceMappingURL=template_ref.js.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var change_detection_1 = __webpack_require__(12);
	var element_binder_1 = __webpack_require__(174);
	var lang_1 = __webpack_require__(1);
	var view_ref_1 = __webpack_require__(21);
	var AppProtoViewMergeMapping = (function () {
	    function AppProtoViewMergeMapping(renderProtoViewMergeMapping) {
	        this.renderProtoViewRef = renderProtoViewMergeMapping.mergedProtoViewRef;
	        this.renderFragmentCount = renderProtoViewMergeMapping.fragmentCount;
	        this.renderElementIndices = renderProtoViewMergeMapping.mappedElementIndices;
	        this.renderInverseElementIndices =
	            inverseIndexMapping(this.renderElementIndices, this.renderElementIndices.length);
	        this.renderTextIndices = renderProtoViewMergeMapping.mappedTextIndices;
	        this.hostElementIndicesByViewIndex = renderProtoViewMergeMapping.hostElementIndicesByViewIndex;
	        this.nestedViewIndicesByElementIndex =
	            inverseIndexMapping(this.hostElementIndicesByViewIndex, this.renderElementIndices.length);
	        this.nestedViewCountByViewIndex = renderProtoViewMergeMapping.nestedViewCountByViewIndex;
	    }
	    return AppProtoViewMergeMapping;
	})();
	exports.AppProtoViewMergeMapping = AppProtoViewMergeMapping;
	function inverseIndexMapping(input, resultLength) {
	    var result = collection_1.ListWrapper.createFixedSize(resultLength);
	    for (var i = 0; i < input.length; i++) {
	        var value = input[i];
	        if (lang_1.isPresent(value)) {
	            result[input[i]] = i;
	        }
	    }
	    return result;
	}
	var AppViewContainer = (function () {
	    function AppViewContainer() {
	        // The order in this list matches the DOM order.
	        this.views = [];
	    }
	    return AppViewContainer;
	})();
	exports.AppViewContainer = AppViewContainer;
	/**
	 * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	 *
	 */
	var AppView = (function () {
	    function AppView(renderer, proto, mainMergeMapping, viewOffset, elementOffset, textOffset, protoLocals, render, renderFragment) {
	        this.renderer = renderer;
	        this.proto = proto;
	        this.mainMergeMapping = mainMergeMapping;
	        this.viewOffset = viewOffset;
	        this.elementOffset = elementOffset;
	        this.textOffset = textOffset;
	        this.render = render;
	        this.renderFragment = renderFragment;
	        // AppViews that have been merged in depth first order.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.views = null;
	        // ElementInjectors of all AppViews in views grouped by view.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.elementInjectors = null;
	        // ViewContainers of all AppViews in views grouped by view.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.viewContainers = null;
	        // PreBuiltObjects of all AppViews in views grouped by view.
	        // This list is shared between all merged views. Use this.elementOffset to get the local
	        // entries.
	        this.preBuiltObjects = null;
	        this.changeDetector = null;
	        /**
	         * The context against which data-binding expressions in this view are evaluated against.
	         * This is always a component instance.
	         */
	        this.context = null;
	        this.ref = new view_ref_1.ViewRef(this);
	        this.locals = new change_detection_1.Locals(null, collection_1.MapWrapper.clone(protoLocals)); // TODO optimize this
	    }
	    AppView.prototype.init = function (changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers) {
	        this.changeDetector = changeDetector;
	        this.elementInjectors = elementInjectors;
	        this.rootElementInjectors = rootElementInjectors;
	        this.preBuiltObjects = preBuiltObjects;
	        this.views = views;
	        this.elementRefs = elementRefs;
	        this.viewContainers = viewContainers;
	    };
	    AppView.prototype.setLocal = function (contextName, value) {
	        if (!this.hydrated())
	            throw new lang_1.BaseException('Cannot set locals on dehydrated view.');
	        if (!this.proto.variableBindings.has(contextName)) {
	            return;
	        }
	        var templateName = this.proto.variableBindings.get(contextName);
	        this.locals.set(templateName, value);
	    };
	    AppView.prototype.hydrated = function () { return lang_1.isPresent(this.context); };
	    /**
	     * Triggers the event handlers for the element and the directives.
	     *
	     * This method is intended to be called from directive EventEmitters.
	     *
	     * @param {string} eventName
	     * @param {*} eventObj
	     * @param {int} boundElementIndex
	     */
	    AppView.prototype.triggerEventHandlers = function (eventName, eventObj, boundElementIndex) {
	        var locals = new collection_1.Map();
	        locals.set('$event', eventObj);
	        this.dispatchEvent(boundElementIndex, eventName, locals);
	    };
	    // dispatch to element injector or text nodes based on context
	    AppView.prototype.notifyOnBinding = function (b, currentValue) {
	        if (b.isTextNode()) {
	            this.renderer.setText(this.render, this.mainMergeMapping.renderTextIndices[b.elementIndex + this.textOffset], currentValue);
	        }
	        else {
	            var elementRef = this.elementRefs[this.elementOffset + b.elementIndex];
	            if (b.isElementProperty()) {
	                this.renderer.setElementProperty(elementRef, b.propertyName, currentValue);
	            }
	            else if (b.isElementAttribute()) {
	                this.renderer.setElementAttribute(elementRef, b.propertyName, currentValue);
	            }
	            else if (b.isElementClass()) {
	                this.renderer.setElementClass(elementRef, b.propertyName, currentValue);
	            }
	            else if (b.isElementStyle()) {
	                var unit = lang_1.isPresent(b.propertyUnit) ? b.propertyUnit : '';
	                this.renderer.setElementStyle(elementRef, b.propertyName, "" + currentValue + unit);
	            }
	            else {
	                throw new lang_1.BaseException('Unsupported directive record');
	            }
	        }
	    };
	    AppView.prototype.notifyOnAllChangesDone = function () {
	        var eiCount = this.proto.elementBinders.length;
	        var ei = this.elementInjectors;
	        for (var i = eiCount - 1; i >= 0; i--) {
	            if (lang_1.isPresent(ei[i + this.elementOffset]))
	                ei[i + this.elementOffset].onAllChangesDone();
	        }
	    };
	    AppView.prototype.getDirectiveFor = function (directive) {
	        var elementInjector = this.elementInjectors[this.elementOffset + directive.elementIndex];
	        return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
	    };
	    AppView.prototype.getNestedView = function (boundElementIndex) {
	        var viewIndex = this.mainMergeMapping.nestedViewIndicesByElementIndex[boundElementIndex];
	        return lang_1.isPresent(viewIndex) ? this.views[viewIndex] : null;
	    };
	    AppView.prototype.getDetectorFor = function (directive) {
	        var childView = this.getNestedView(this.elementOffset + directive.elementIndex);
	        return lang_1.isPresent(childView) ? childView.changeDetector : null;
	    };
	    AppView.prototype.invokeElementMethod = function (elementIndex, methodName, args) {
	        this.renderer.invokeElementMethod(this.elementRefs[elementIndex], methodName, args);
	    };
	    // implementation of RenderEventDispatcher#dispatchRenderEvent
	    AppView.prototype.dispatchRenderEvent = function (renderElementIndex, eventName, locals) {
	        var elementRef = this.elementRefs[this.mainMergeMapping.renderInverseElementIndices[renderElementIndex]];
	        var view = view_ref_1.internalView(elementRef.parentView);
	        return view.dispatchEvent(elementRef.boundElementIndex, eventName, locals);
	    };
	    // returns false if preventDefault must be applied to the DOM event
	    AppView.prototype.dispatchEvent = function (boundElementIndex, eventName, locals) {
	        var _this = this;
	        // Most of the time the event will be fired only when the view is in the live document.
	        // However, in a rare circumstance the view might get dehydrated, in between the event
	        // queuing up and firing.
	        var allowDefaultBehavior = true;
	        if (this.hydrated()) {
	            var elBinder = this.proto.elementBinders[boundElementIndex - this.elementOffset];
	            if (lang_1.isBlank(elBinder.hostListeners))
	                return allowDefaultBehavior;
	            var eventMap = elBinder.hostListeners[eventName];
	            if (lang_1.isBlank(eventMap))
	                return allowDefaultBehavior;
	            collection_1.MapWrapper.forEach(eventMap, function (expr, directiveIndex) {
	                var context;
	                if (directiveIndex === -1) {
	                    context = _this.context;
	                }
	                else {
	                    context = _this.elementInjectors[boundElementIndex].getDirectiveAtIndex(directiveIndex);
	                }
	                var result = expr.eval(context, new change_detection_1.Locals(_this.locals, locals));
	                if (lang_1.isPresent(result)) {
	                    allowDefaultBehavior = allowDefaultBehavior && result == true;
	                }
	            });
	        }
	        return allowDefaultBehavior;
	    };
	    return AppView;
	})();
	exports.AppView = AppView;
	/**
	 *
	 */
	var AppProtoView = (function () {
	    function AppProtoView(type, isEmbeddedFragment, render, protoChangeDetector, variableBindings, variableLocations, textBindingCount) {
	        var _this = this;
	        this.type = type;
	        this.isEmbeddedFragment = isEmbeddedFragment;
	        this.render = render;
	        this.protoChangeDetector = protoChangeDetector;
	        this.variableBindings = variableBindings;
	        this.variableLocations = variableLocations;
	        this.textBindingCount = textBindingCount;
	        this.elementBinders = [];
	        this.protoLocals = new collection_1.Map();
	        this.isRecursive = null;
	        this.ref = new view_ref_1.ProtoViewRef(this);
	        if (lang_1.isPresent(variableBindings)) {
	            collection_1.MapWrapper.forEach(variableBindings, function (templateName, _) { _this.protoLocals.set(templateName, null); });
	        }
	    }
	    AppProtoView.prototype.bindElement = function (parent, distanceToParent, protoElementInjector, componentDirective) {
	        if (componentDirective === void 0) { componentDirective = null; }
	        var elBinder = new element_binder_1.ElementBinder(this.elementBinders.length, parent, distanceToParent, protoElementInjector, componentDirective);
	        this.elementBinders.push(elBinder);
	        return elBinder;
	    };
	    /**
	     * Adds an event binding for the last created ElementBinder via bindElement.
	     *
	     * If the directive index is a positive integer, the event is evaluated in the context of
	     * the given directive.
	     *
	     * If the directive index is -1, the event is evaluated in the context of the enclosing view.
	     *
	     * @param {string} eventName
	     * @param {AST} expression
	     * @param {int} directiveIndex The directive index in the binder or -1 when the event is not bound
	     *                             to a directive
	     */
	    AppProtoView.prototype.bindEvent = function (eventBindings, boundElementIndex, directiveIndex) {
	        if (directiveIndex === void 0) { directiveIndex = -1; }
	        var elBinder = this.elementBinders[boundElementIndex];
	        var events = elBinder.hostListeners;
	        if (lang_1.isBlank(events)) {
	            events = collection_1.StringMapWrapper.create();
	            elBinder.hostListeners = events;
	        }
	        for (var i = 0; i < eventBindings.length; i++) {
	            var eventBinding = eventBindings[i];
	            var eventName = eventBinding.fullName;
	            var event = collection_1.StringMapWrapper.get(events, eventName);
	            if (lang_1.isBlank(event)) {
	                event = new collection_1.Map();
	                collection_1.StringMapWrapper.set(events, eventName, event);
	            }
	            event.set(directiveIndex, eventBinding.source);
	        }
	    };
	    return AppProtoView;
	})();
	exports.AppProtoView = AppProtoView;
	//# sourceMappingURL=view.js.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	function findFirstClosedCycle(keys) {
	    var res = [];
	    for (var i = 0; i < keys.length; ++i) {
	        if (collection_1.ListWrapper.contains(res, keys[i])) {
	            res.push(keys[i]);
	            return res;
	        }
	        else {
	            res.push(keys[i]);
	        }
	    }
	    return res;
	}
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
	        var tokenStrs = collection_1.ListWrapper.map(reversed, function (k) { return lang_1.stringify(k.token); });
	        return " (" + tokenStrs.join(' -> ') + ")";
	    }
	    else {
	        return "";
	    }
	}
	/**
	 * Base class for all errors arising from misconfigured bindings.
	 */
	var AbstractBindingError = (function (_super) {
	    __extends(AbstractBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function AbstractBindingError(key, constructResolvingMessage, originalException, originalStack) {
	        _super.call(this, null, originalException, originalStack);
	        this.keys = [key];
	        this.constructResolvingMessage = constructResolvingMessage;
	        this.message = this.constructResolvingMessage(this.keys);
	    }
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    AbstractBindingError.prototype.addKey = function (key) {
	        this.keys.push(key);
	        this.message = this.constructResolvingMessage(this.keys);
	    };
	    AbstractBindingError.prototype.toString = function () { return this.message; };
	    return AbstractBindingError;
	})(lang_1.BaseException);
	exports.AbstractBindingError = AbstractBindingError;
	/**
	 * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
	 * {@link Injector} does not have a {@link Binding} for {@link Key}.
	 */
	var NoBindingError = (function (_super) {
	    __extends(NoBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function NoBindingError(key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return "No provider for " + first + "!" + constructResolvingPath(keys);
	        });
	    }
	    return NoBindingError;
	})(AbstractBindingError);
	exports.NoBindingError = NoBindingError;
	/**
	 * Thrown when trying to retrieve an async {@link Binding} using the sync API.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   bind(Number).toAsyncFactory(() => {
	 *     return new Promise((resolve) => resolve(1 + 2));
	 *   }),
	 *   bind(String).toFactory((v) => { return "Value: " + v; }, [String])
	 * ]);
	 *
	 * injector.asyncGet(String).then((v) => expect(v).toBe('Value: 3'));
	 * expect(() => {
	 *   injector.get(String);
	 * }).toThrowError(AsycBindingError);
	 * ```
	 *
	 * The above example throws because `String` depends on `Number` which is async. If any binding in
	 * the dependency graph is async then the graph can only be retrieved using the `asyncGet` API.
	 */
	var AsyncBindingError = (function (_super) {
	    __extends(AsyncBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function AsyncBindingError(key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return "Cannot instantiate " + first + " synchronously. It is provided as a promise!" + constructResolvingPath(keys);
	        });
	    }
	    return AsyncBindingError;
	})(AbstractBindingError);
	exports.AsyncBindingError = AsyncBindingError;
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ## Example:
	 *
	 * ```javascript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 * class B {
	 *   constructor(a:A) {}
	 * }
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 */
	var CyclicDependencyError = (function (_super) {
	    __extends(CyclicDependencyError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function CyclicDependencyError(key) {
	        _super.call(this, key, function (keys) {
	            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	        });
	    }
	    return CyclicDependencyError;
	})(AbstractBindingError);
	exports.CyclicDependencyError = CyclicDependencyError;
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 */
	var InstantiationError = (function (_super) {
	    __extends(InstantiationError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function InstantiationError(originalException, originalStack, key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return ("Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ".") +
	                (" ORIGINAL ERROR: " + originalException) + ("\n\n ORIGINAL STACK: " + originalStack);
	        }, originalException, originalStack);
	        this.causeKey = key;
	    }
	    return InstantiationError;
	})(AbstractBindingError);
	exports.InstantiationError = InstantiationError;
	/**
	 * Thrown when an object other then {@link Binding} (or `Type`) is passed to {@link Injector}
	 * creation.
	 */
	var InvalidBindingError = (function (_super) {
	    __extends(InvalidBindingError, _super);
	    function InvalidBindingError(binding) {
	        _super.call(this);
	        this.message = "Invalid binding - only instances of Binding and Type are allowed, got: " +
	            binding.toString();
	    }
	    InvalidBindingError.prototype.toString = function () { return this.message; };
	    return InvalidBindingError;
	})(lang_1.BaseException);
	exports.InvalidBindingError = InvalidBindingError;
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 */
	var NoAnnotationError = (function (_super) {
	    __extends(NoAnnotationError, _super);
	    function NoAnnotationError(typeOrFunc, params) {
	        _super.call(this);
	        var signature = [];
	        for (var i = 0, ii = params.length; i < ii; i++) {
	            var parameter = params[i];
	            if (lang_1.isBlank(parameter) || parameter.length == 0) {
	                signature.push('?');
	            }
	            else {
	                signature.push(collection_1.ListWrapper.map(parameter, lang_1.stringify).join(' '));
	            }
	        }
	        this.message = "Cannot resolve all parameters for " + lang_1.stringify(typeOrFunc) + "(" +
	            signature.join(', ') + "). " +
	            'Make sure they all have valid type or annotations.';
	    }
	    NoAnnotationError.prototype.toString = function () { return this.message; };
	    return NoAnnotationError;
	})(lang_1.BaseException);
	exports.NoAnnotationError = NoAnnotationError;
	/**
	 * Thrown when getting an object by index.
	 */
	var OutOfBoundsError = (function (_super) {
	    __extends(OutOfBoundsError, _super);
	    function OutOfBoundsError(index) {
	        _super.call(this);
	        this.message = "Index " + index + " is out-of-bounds.";
	    }
	    OutOfBoundsError.prototype.toString = function () { return this.message; };
	    return OutOfBoundsError;
	})(lang_1.BaseException);
	exports.OutOfBoundsError = OutOfBoundsError;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var type_literal_1 = __webpack_require__(138);
	var forward_ref_1 = __webpack_require__(51);
	var type_literal_2 = __webpack_require__(138);
	exports.TypeLiteral = type_literal_2.TypeLiteral;
	/**
	 * A unique object used for retrieving items from the {@link Injector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`, usually the `Type` of the instance.
	 *
	 * Keys are used internally by the {@link Injector} because their system-wide unique `id`s allow the
	 * injector to index in arrays rather than looking up items in maps.
	 */
	var Key = (function () {
	    /**
	     * @private
	     */
	    function Key(token, id) {
	        this.token = token;
	        this.id = id;
	        if (lang_1.isBlank(token)) {
	            throw new lang_1.BaseException('Token must be defined!');
	        }
	    }
	    Object.defineProperty(Key.prototype, "displayName", {
	        get: function () { return lang_1.stringify(this.token); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     */
	    Key.get = function (token) { return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token)); };
	    Object.defineProperty(Key, "numberOfKeys", {
	        /**
	         * @returns the number of keys registered in the system.
	         */
	        get: function () { return _globalKeyRegistry.numberOfKeys; },
	        enumerable: true,
	        configurable: true
	    });
	    return Key;
	})();
	exports.Key = Key;
	/**
	 * @private
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof Key)
	            return token;
	        // TODO: workaround for https://github.com/Microsoft/TypeScript/issues/3123
	        var theToken = token;
	        if (token instanceof type_literal_1.TypeLiteral) {
	            theToken = token.type;
	        }
	        token = theToken;
	        if (this._allKeys.has(token)) {
	            return this._allKeys.get(token);
	        }
	        var newKey = new Key(token, Key.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        get: function () { return collection_1.MapWrapper.size(this._allKeys); },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	})();
	exports.KeyRegistry = KeyRegistry;
	var _globalKeyRegistry = new KeyRegistry();
	//# sourceMappingURL=key.js.map

/***/ },
/* 73 */
/***/ function(module, exports) {

	'use strict';var AbstractControlDirective = (function () {
	    function AbstractControlDirective() {
	    }
	    Object.defineProperty(AbstractControlDirective.prototype, "control", {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "value", {
	        get: function () { return this.control.value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
	        get: function () { return this.control.valid; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
	        get: function () { return this.control.errors; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
	        get: function () { return this.control.pristine; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
	        get: function () { return this.control.dirty; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
	        get: function () { return this.control.touched; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
	        get: function () { return this.control.untouched; },
	        enumerable: true,
	        configurable: true
	    });
	    return AbstractControlDirective;
	})();
	exports.AbstractControlDirective = AbstractControlDirective;
	//# sourceMappingURL=abstract_control_directive.js.map

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var render_1 = __webpack_require__(43);
	var annotations_1 = __webpack_require__(8);
	var core_1 = __webpack_require__(13);
	var ng_control_1 = __webpack_require__(19);
	var lang_1 = __webpack_require__(1);
	var shared_1 = __webpack_require__(14);
	/**
	 * The accessor for writing a value and listening to changes on a checkbox input element.
	 *
	 *  # Example
	 *  ```
	 *  <input type="checkbox" [ng-control]="rememberLogin">
	 *  ```
	 */
	var CheckboxControlValueAccessor = (function () {
	    function CheckboxControlValueAccessor(cd, renderer, elementRef) {
	        this.cd = cd;
	        this.renderer = renderer;
	        this.elementRef = elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        cd.valueAccessor = this;
	    }
	    CheckboxControlValueAccessor.prototype.writeValue = function (value) { shared_1.setProperty(this.renderer, this.elementRef, "checked", value); };
	    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassUntouched", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassTouched", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassPristine", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassDirty", {
	        get: function () { return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassValid", {
	        get: function () { return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassInvalid", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    CheckboxControlValueAccessor = __decorate([
	        annotations_1.Directive({
	            selector: 'input[type=checkbox][ng-control],input[type=checkbox][ng-form-control],input[type=checkbox][ng-model]',
	            host: {
	                '(change)': 'onChange($event.target.checked)',
	                '(blur)': 'onTouched()',
	                '[class.ng-untouched]': 'ngClassUntouched',
	                '[class.ng-touched]': 'ngClassTouched',
	                '[class.ng-pristine]': 'ngClassPristine',
	                '[class.ng-dirty]': 'ngClassDirty',
	                '[class.ng-valid]': 'ngClassValid',
	                '[class.ng-invalid]': 'ngClassInvalid'
	            }
	        }), 
	        __metadata('design:paramtypes', [ng_control_1.NgControl, render_1.Renderer, core_1.ElementRef])
	    ], CheckboxControlValueAccessor);
	    return CheckboxControlValueAccessor;
	})();
	exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	//# sourceMappingURL=checkbox_value_accessor.js.map

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var render_1 = __webpack_require__(43);
	var annotations_1 = __webpack_require__(8);
	var core_1 = __webpack_require__(13);
	var ng_control_1 = __webpack_require__(19);
	var lang_1 = __webpack_require__(1);
	var shared_1 = __webpack_require__(14);
	/**
	 * The default accessor for writing a value and listening to changes that is used by the
	 * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
	 *
	 *  # Example
	 *  ```
	 *  <input type="text" [(ng-model)]="searchQuery">
	 *  ```
	 */
	var DefaultValueAccessor = (function () {
	    function DefaultValueAccessor(cd, renderer, elementRef) {
	        this.cd = cd;
	        this.renderer = renderer;
	        this.elementRef = elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        cd.valueAccessor = this;
	    }
	    DefaultValueAccessor.prototype.writeValue = function (value) {
	        // both this.value and setProperty are required at the moment
	        // remove when a proper imperative API is provided
	        var normalizedValue = lang_1.isBlank(value) ? '' : value;
	        shared_1.setProperty(this.renderer, this.elementRef, 'value', normalizedValue);
	    };
	    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassUntouched", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassTouched", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassPristine", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassDirty", {
	        get: function () { return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassValid", {
	        get: function () { return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassInvalid", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    DefaultValueAccessor = __decorate([
	        annotations_1.Directive({
	            selector: 'input:not([type=checkbox])[ng-control],textarea[ng-control],input:not([type=checkbox])[ng-form-control],textarea[ng-form-control],input:not([type=checkbox])[ng-model],textarea[ng-model]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()',
	                '[class.ng-untouched]': 'ngClassUntouched',
	                '[class.ng-touched]': 'ngClassTouched',
	                '[class.ng-pristine]': 'ngClassPristine',
	                '[class.ng-dirty]': 'ngClassDirty',
	                '[class.ng-valid]': 'ngClassValid',
	                '[class.ng-invalid]': 'ngClassInvalid'
	            }
	        }), 
	        __metadata('design:paramtypes', [ng_control_1.NgControl, render_1.Renderer, core_1.ElementRef])
	    ], DefaultValueAccessor);
	    return DefaultValueAccessor;
	})();
	exports.DefaultValueAccessor = DefaultValueAccessor;
	//# sourceMappingURL=default_value_accessor.js.map

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var angular2_1 = __webpack_require__(4);
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var control_container_1 = __webpack_require__(32);
	var shared_1 = __webpack_require__(14);
	var controlGroupBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, { toAlias: di_1.forwardRef(function () { return NgControlGroup; }) }));
	/**
	 * Creates and binds a control group to a DOM element.
	 *
	 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
	 *
	 * # Example
	 *
	 * In this example, we create the credentials and personal control groups.
	 * We can work with each group separately: check its validity, get its value, listen to its changes.
	 *
	 *  ```
	 * @Component({selector: "signup-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: `
	 *              <form #f="form" (submit)='onSignUp(f.value)'>
	 *                <div ng-control-group='credentials' #credentials="form">
	 *                  Login <input type='text' ng-control='login'>
	 *                  Password <input type='password' ng-control='password'>
	 *                </div>
	 *                <div *ng-if="!credentials.valid">Credentials are invalid</div>
	 *
	 *                <div ng-control-group='personal'>
	 *                  Name <input type='text' ng-control='name'>
	 *                </div>
	 *                <button type='submit'>Sign Up!</button>
	 *              </form>
	 *      `})
	 * class SignupComp {
	 *  onSignUp(value) {
	 *    // value === {personal: {name: 'some name'},
	 *    //  credentials: {login: 'some login', password: 'some password'}}
	 *  }
	 * }
	 *
	 *  ```
	 */
	var NgControlGroup = (function (_super) {
	    __extends(NgControlGroup, _super);
	    function NgControlGroup(_parent) {
	        _super.call(this);
	        this._parent = _parent;
	    }
	    NgControlGroup.prototype.onInit = function () { this.formDirective.addControlGroup(this); };
	    NgControlGroup.prototype.onDestroy = function () { this.formDirective.removeControlGroup(this); };
	    Object.defineProperty(NgControlGroup.prototype, "control", {
	        get: function () { return this.formDirective.getControlGroup(this); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "path", {
	        get: function () { return shared_1.controlPath(this.name, this._parent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlGroup.prototype, "formDirective", {
	        get: function () { return this._parent.formDirective; },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlGroup = __decorate([
	        angular2_1.Directive({
	            selector: '[ng-control-group]',
	            hostInjector: [controlGroupBinding],
	            properties: ['name: ng-control-group'],
	            lifecycle: [angular2_1.LifecycleEvent.onInit, angular2_1.LifecycleEvent.onDestroy],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Ancestor()), 
	        __metadata('design:paramtypes', [control_container_1.ControlContainer])
	    ], NgControlGroup);
	    return NgControlGroup;
	})(control_container_1.ControlContainer);
	exports.NgControlGroup = NgControlGroup;
	//# sourceMappingURL=ng_control_group.js.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(1);
	var async_1 = __webpack_require__(5);
	var angular2_1 = __webpack_require__(4);
	var di_1 = __webpack_require__(3);
	var control_container_1 = __webpack_require__(32);
	var ng_control_1 = __webpack_require__(19);
	var validators_1 = __webpack_require__(28);
	var shared_1 = __webpack_require__(14);
	var controlNameBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, { toAlias: di_1.forwardRef(function () { return NgControlName; }) }));
	/**
	 * Creates and binds a control with a specified name to a DOM element.
	 *
	 * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
	
	 * # Example
	 *
	 * In this example, we create the login and password controls.
	 * We can work with each control separately: check its validity, get its value, listen to its
	 changes.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: `
	 *              <form #f="form" (submit)='onLogIn(f.value)'>
	 *                Login <input type='text' ng-control='login' #l="form">
	 *                <div *ng-if="!l.valid">Login is invalid</div>
	 *
	 *                Password <input type='password' ng-control='password'>
	
	 *                <button type='submit'>Log in!</button>
	 *              </form>
	 *      `})
	 * class LoginComp {
	 *  onLogIn(value) {
	 *    // value === {login: 'some login', password: 'some password'}
	 *  }
	 * }
	 *  ```
	 *
	 * We can also use ng-model to bind a domain model to the form.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: `
	 *              <form (submit)='onLogIn()'>
	 *                Login <input type='text' ng-control='login' [(ng-model)]="credentials.login">
	 *                Password <input type='password' ng-control='password'
	 [(ng-model)]="credentials.password">
	 *                <button type='submit'>Log in!</button>
	 *              </form>
	 *      `})
	 * class LoginComp {
	 *  credentials: {login:string, password:string};
	 *
	 *  onLogIn() {
	 *    // this.credentials.login === "some login"
	 *    // this.credentials.password === "some password"
	 *  }
	 * }
	 *  ```
	 */
	var NgControlName = (function (_super) {
	    __extends(NgControlName, _super);
	    // Scope the query once https://github.com/angular/angular/issues/2603 is fixed
	    function NgControlName(parent, ngValidators) {
	        _super.call(this);
	        this.update = new async_1.EventEmitter();
	        this._added = false;
	        this._parent = parent;
	        this.ngValidators = ngValidators;
	    }
	    NgControlName.prototype.onChange = function (c) {
	        if (!this._added) {
	            this.formDirective.addControl(this);
	            this._added = true;
	        }
	        if (shared_1.isPropertyUpdated(c, this.viewModel)) {
	            this.viewModel = this.model;
	            this.formDirective.updateModel(this, this.model);
	        }
	    };
	    NgControlName.prototype.onDestroy = function () { this.formDirective.removeControl(this); };
	    NgControlName.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callNext(this.update, newValue);
	    };
	    Object.defineProperty(NgControlName.prototype, "path", {
	        get: function () { return shared_1.controlPath(this.name, this._parent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "formDirective", {
	        get: function () { return this._parent.formDirective; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "control", {
	        get: function () { return this.formDirective.getControl(this); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControlName.prototype, "validator", {
	        get: function () { return shared_1.composeNgValidator(this.ngValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    NgControlName = __decorate([
	        angular2_1.Directive({
	            selector: '[ng-control]',
	            hostInjector: [controlNameBinding],
	            properties: ['name: ngControl', 'model: ngModel'],
	            events: ['update: ngModel'],
	            lifecycle: [angular2_1.LifecycleEvent.onDestroy, angular2_1.LifecycleEvent.onChange],
	            exportAs: 'form'
	        }),
	        __param(0, di_1.Ancestor()),
	        __param(1, angular2_1.Query(validators_1.NgValidator)), 
	        __metadata('design:paramtypes', [control_container_1.ControlContainer, angular2_1.QueryList])
	    ], NgControlName);
	    return NgControlName;
	})(ng_control_1.NgControl);
	exports.NgControlName = NgControlName;
	//# sourceMappingURL=ng_control_name.js.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var async_1 = __webpack_require__(5);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var annotations_1 = __webpack_require__(8);
	var di_1 = __webpack_require__(3);
	var control_container_1 = __webpack_require__(32);
	var model_1 = __webpack_require__(52);
	var shared_1 = __webpack_require__(14);
	var formDirectiveBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, { toAlias: di_1.forwardRef(function () { return NgForm; }) }));
	/**
	 * Creates and binds a form object to a DOM element.
	 *
	 * # Example
	 *
	 *  ```
	 * @Component({selector: "signup-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: `
	 *              <form #f="form" (submit)='onSignUp(f.value)'>
	 *                <div ng-control-group='credentials' #credentials="form">
	 *                  Login <input type='text' ng-control='login'>
	 *                  Password <input type='password' ng-control='password'>
	 *                </div>
	 *                <div *ng-if="!credentials.valid">Credentials are invalid</div>
	 *
	 *                <div ng-control-group='personal'>
	 *                  Name <input type='text' ng-control='name'>
	 *                </div>
	 *                <button type='submit'>Sign Up!</button>
	 *              </form>
	 *      `})
	 * class SignupComp {
	 *  onSignUp(value) {
	 *    // value === {personal: {name: 'some name'},
	 *    //  credentials: {login: 'some login', password: 'some password'}}
	 *  }
	 * }
	 *
	 *  ```
	 */
	var NgForm = (function (_super) {
	    __extends(NgForm, _super);
	    function NgForm() {
	        _super.call(this);
	        this.ngSubmit = new async_1.EventEmitter();
	        this.form = new model_1.ControlGroup({});
	    }
	    Object.defineProperty(NgForm.prototype, "formDirective", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "controls", {
	        get: function () { return this.form.controls; },
	        enumerable: true,
	        configurable: true
	    });
	    NgForm.prototype.addControl = function (dir) {
	        var _this = this;
	        this._later(function (_) {
	            var container = _this._findContainer(dir.path);
	            var c = new model_1.Control();
	            shared_1.setUpControl(c, dir);
	            container.addControl(dir.name, c);
	            c.updateValidity();
	        });
	    };
	    NgForm.prototype.getControl = function (dir) { return this.form.find(dir.path); };
	    NgForm.prototype.removeControl = function (dir) {
	        var _this = this;
	        this._later(function (_) {
	            var container = _this._findContainer(dir.path);
	            if (lang_1.isPresent(container)) {
	                container.removeControl(dir.name);
	                container.updateValidity();
	            }
	        });
	    };
	    NgForm.prototype.addControlGroup = function (dir) {
	        var _this = this;
	        this._later(function (_) {
	            var container = _this._findContainer(dir.path);
	            var c = new model_1.ControlGroup({});
	            container.addControl(dir.name, c);
	            c.updateValidity();
	        });
	    };
	    NgForm.prototype.removeControlGroup = function (dir) {
	        var _this = this;
	        this._later(function (_) {
	            var container = _this._findContainer(dir.path);
	            if (lang_1.isPresent(container)) {
	                container.removeControl(dir.name);
	                container.updateValidity();
	            }
	        });
	    };
	    NgForm.prototype.getControlGroup = function (dir) {
	        return this.form.find(dir.path);
	    };
	    NgForm.prototype.updateModel = function (dir, value) {
	        var _this = this;
	        this._later(function (_) {
	            var c = _this.form.find(dir.path);
	            c.updateValue(value);
	        });
	    };
	    NgForm.prototype.onSubmit = function () {
	        async_1.ObservableWrapper.callNext(this.ngSubmit, null);
	        return false;
	    };
	    NgForm.prototype._findContainer = function (path) {
	        collection_1.ListWrapper.removeLast(path);
	        return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
	    };
	    NgForm.prototype._later = function (fn) {
	        var c = async_1.PromiseWrapper.completer();
	        async_1.PromiseWrapper.then(c.promise, fn, function (_) { });
	        c.resolve(null);
	    };
	    NgForm = __decorate([
	        annotations_1.Directive({
	            selector: 'form:not([ng-no-form]):not([ng-form-model]),ng-form,[ng-form]',
	            hostInjector: [formDirectiveBinding],
	            host: {
	                '(submit)': 'onSubmit()',
	            },
	            events: ['ngSubmit'],
	            exportAs: 'form'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgForm);
	    return NgForm;
	})(control_container_1.ControlContainer);
	exports.NgForm = NgForm;
	//# sourceMappingURL=ng_form.js.map

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(1);
	var async_1 = __webpack_require__(5);
	var angular2_1 = __webpack_require__(4);
	var di_1 = __webpack_require__(3);
	var ng_control_1 = __webpack_require__(19);
	var validators_1 = __webpack_require__(28);
	var shared_1 = __webpack_require__(14);
	var formControlBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, { toAlias: di_1.forwardRef(function () { return NgFormControl; }) }));
	/**
	 * Binds an existing control to a DOM element.
	 *
	 * # Example
	 *
	 * In this example, we bind the control to an input element. When the value of the input element
	 * changes, the value of
	 * the control will reflect that change. Likewise, if the value of the control changes, the input
	 * element reflects that
	 * change.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: "<input type='text' [ng-form-control]='loginControl'>"
	 *      })
	 * class LoginComp {
	 *  loginControl:Control;
	 *
	 *  constructor() {
	 *    this.loginControl = new Control('');
	 *  }
	 * }
	 *
	 *  ```
	 *
	 * We can also use ng-model to bind a domain model to the form.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: "<input type='text' [ng-form-control]='loginControl' [(ng-model)]='login'>"
	 *      })
	 * class LoginComp {
	 *  loginControl:Control;
	 *  login:string;
	 *
	 *  constructor() {
	 *    this.loginControl = new Control('');
	 *  }
	 * }
	 *  ```
	 */
	var NgFormControl = (function (_super) {
	    __extends(NgFormControl, _super);
	    // Scope the query once https://github.com/angular/angular/issues/2603 is fixed
	    function NgFormControl(ngValidators) {
	        _super.call(this);
	        this.update = new async_1.EventEmitter();
	        this._added = false;
	        this.ngValidators = ngValidators;
	    }
	    NgFormControl.prototype.onChange = function (c) {
	        if (!this._added) {
	            shared_1.setUpControl(this.form, this);
	            this.form.updateValidity();
	            this._added = true;
	        }
	        if (shared_1.isPropertyUpdated(c, this.viewModel)) {
	            this.form.updateValue(this.model);
	        }
	    };
	    Object.defineProperty(NgFormControl.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormControl.prototype, "validator", {
	        get: function () { return shared_1.composeNgValidator(this.ngValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    NgFormControl.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callNext(this.update, newValue);
	    };
	    NgFormControl = __decorate([
	        angular2_1.Directive({
	            selector: '[ng-form-control]',
	            hostInjector: [formControlBinding],
	            properties: ['form: ngFormControl', 'model: ngModel'],
	            events: ['update: ngModel'],
	            lifecycle: [angular2_1.LifecycleEvent.onChange],
	            exportAs: 'form'
	        }),
	        __param(0, angular2_1.Query(validators_1.NgValidator)), 
	        __metadata('design:paramtypes', [angular2_1.QueryList])
	    ], NgFormControl);
	    return NgFormControl;
	})(ng_control_1.NgControl);
	exports.NgFormControl = NgFormControl;
	//# sourceMappingURL=ng_form_control.js.map

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var async_1 = __webpack_require__(5);
	var angular2_1 = __webpack_require__(4);
	var di_1 = __webpack_require__(3);
	var control_container_1 = __webpack_require__(32);
	var shared_1 = __webpack_require__(14);
	var formDirectiveBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, { toAlias: di_1.forwardRef(function () { return NgFormModel; }) }));
	/**
	 * Binds an existing control group to a DOM element.
	 *
	 * # Example
	 *
	 * In this example, we bind the control group to the form element, and we bind the login and
	 * password controls to the
	 * login and password elements.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: "<form [ng-form-model]='loginForm'>" +
	 *              "Login <input type='text' ng-control='login'>" +
	 *              "Password <input type='password' ng-control='password'>" +
	 *              "<button (click)="onLogin()">Login</button>" +
	 *              "</form>"
	 *      })
	 * class LoginComp {
	 *  loginForm:ControlGroup;
	 *
	 *  constructor() {
	 *    this.loginForm = new ControlGroup({
	 *      login: new Control(""),
	 *      password: new Control("")
	 *    });
	 *  }
	 *
	 *  onLogin() {
	 *    // this.loginForm.value
	 *  }
	 * }
	 *
	 *  ```
	 *
	 * We can also use ng-model to bind a domain model to the form.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: "<form [ng-form-model]='loginForm'>" +
	 *              "Login <input type='text' ng-control='login' [(ng-model)]='login'>" +
	 *              "Password <input type='password' ng-control='password' [(ng-model)]='password'>" +
	 *              "<button (click)="onLogin()">Login</button>" +
	 *              "</form>"
	 *      })
	 * class LoginComp {
	 *  credentials:{login:string, password:string}
	 *  loginForm:ControlGroup;
	 *
	 *  constructor() {
	 *    this.loginForm = new ControlGroup({
	 *      login: new Control(""),
	 *      password: new Control("")
	 *    });
	 *  }
	 *
	 *  onLogin() {
	 *    // this.credentials.login === 'some login'
	 *    // this.credentials.password === 'some password'
	 *  }
	 * }
	 *  ```
	 */
	var NgFormModel = (function (_super) {
	    __extends(NgFormModel, _super);
	    function NgFormModel() {
	        _super.apply(this, arguments);
	        this.form = null;
	        this.directives = [];
	        this.ngSubmit = new async_1.EventEmitter();
	    }
	    NgFormModel.prototype.onChange = function (_) { this._updateDomValue(); };
	    Object.defineProperty(NgFormModel.prototype, "formDirective", {
	        get: function () { return this; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormModel.prototype, "control", {
	        get: function () { return this.form; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgFormModel.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    NgFormModel.prototype.addControl = function (dir) {
	        var c = this.form.find(dir.path);
	        shared_1.setUpControl(c, dir);
	        c.updateValidity();
	        this.directives.push(dir);
	    };
	    NgFormModel.prototype.getControl = function (dir) { return this.form.find(dir.path); };
	    NgFormModel.prototype.removeControl = function (dir) { collection_1.ListWrapper.remove(this.directives, dir); };
	    NgFormModel.prototype.addControlGroup = function (dir) { };
	    NgFormModel.prototype.removeControlGroup = function (dir) { };
	    NgFormModel.prototype.getControlGroup = function (dir) {
	        return this.form.find(dir.path);
	    };
	    NgFormModel.prototype.updateModel = function (dir, value) {
	        var c = this.form.find(dir.path);
	        c.updateValue(value);
	    };
	    NgFormModel.prototype.onSubmit = function () {
	        async_1.ObservableWrapper.callNext(this.ngSubmit, null);
	        return false;
	    };
	    NgFormModel.prototype._updateDomValue = function () {
	        var _this = this;
	        collection_1.ListWrapper.forEach(this.directives, function (dir) {
	            var c = _this.form.find(dir.path);
	            dir.valueAccessor.writeValue(c.value);
	        });
	    };
	    NgFormModel = __decorate([
	        angular2_1.Directive({
	            selector: '[ng-form-model]',
	            hostInjector: [formDirectiveBinding],
	            properties: ['form: ng-form-model'],
	            lifecycle: [angular2_1.LifecycleEvent.onChange],
	            host: {
	                '(submit)': 'onSubmit()',
	            },
	            events: ['ngSubmit'],
	            exportAs: 'form'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgFormModel);
	    return NgFormModel;
	})(control_container_1.ControlContainer);
	exports.NgFormModel = NgFormModel;
	//# sourceMappingURL=ng_form_model.js.map

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var lang_1 = __webpack_require__(1);
	var async_1 = __webpack_require__(5);
	var angular2_1 = __webpack_require__(4);
	var di_1 = __webpack_require__(3);
	var ng_control_1 = __webpack_require__(19);
	var model_1 = __webpack_require__(52);
	var validators_1 = __webpack_require__(28);
	var shared_1 = __webpack_require__(14);
	var formControlBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, { toAlias: di_1.forwardRef(function () { return NgModel; }) }));
	/**
	 * Binds a domain model to the form.
	 *
	 * # Example
	 *  ```
	 * @Component({selector: "search-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      template: `
	              <input type='text' [(ng-model)]="searchQuery">
	 *      `})
	 * class SearchComp {
	 *  searchQuery: string;
	 * }
	 *  ```
	 */
	var NgModel = (function (_super) {
	    __extends(NgModel, _super);
	    // Scope the query once https://github.com/angular/angular/issues/2603 is fixed
	    function NgModel(ngValidators) {
	        _super.call(this);
	        this._control = new model_1.Control();
	        this._added = false;
	        this.update = new async_1.EventEmitter();
	        this.ngValidators = ngValidators;
	    }
	    NgModel.prototype.onChange = function (c) {
	        if (!this._added) {
	            shared_1.setUpControl(this._control, this);
	            this._control.updateValidity();
	            this._added = true;
	        }
	        if (shared_1.isPropertyUpdated(c, this.viewModel)) {
	            this._control.updateValue(this.model);
	        }
	    };
	    Object.defineProperty(NgModel.prototype, "control", {
	        get: function () { return this._control; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "path", {
	        get: function () { return []; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "validator", {
	        get: function () { return shared_1.composeNgValidator(this.ngValidators); },
	        enumerable: true,
	        configurable: true
	    });
	    NgModel.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        async_1.ObservableWrapper.callNext(this.update, newValue);
	    };
	    NgModel = __decorate([
	        angular2_1.Directive({
	            selector: '[ng-model]:not([ng-control]):not([ng-form-control])',
	            hostInjector: [formControlBinding],
	            properties: ['model: ngModel'],
	            events: ['update: ngModel'],
	            lifecycle: [angular2_1.LifecycleEvent.onChange],
	            exportAs: 'form'
	        }),
	        __param(0, angular2_1.Query(validators_1.NgValidator)), 
	        __metadata('design:paramtypes', [angular2_1.QueryList])
	    ], NgModel);
	    return NgModel;
	})(ng_control_1.NgControl);
	exports.NgModel = NgModel;
	//# sourceMappingURL=ng_model.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var render_1 = __webpack_require__(43);
	var angular2_1 = __webpack_require__(4);
	var ng_control_1 = __webpack_require__(19);
	var lang_1 = __webpack_require__(1);
	var shared_1 = __webpack_require__(14);
	/**
	 * Marks <option> as dynamic, so Angular can be notified when options change.
	 *
	 * #Example:
	 * ```
	 * <select ng-control="city">
	 *   <option *ng-for="#c of cities" [value]="c"></option>
	 * </select>
	 * ``
	 */
	var NgSelectOption = (function () {
	    function NgSelectOption() {
	    }
	    NgSelectOption = __decorate([
	        angular2_1.Directive({ selector: 'option' }), 
	        __metadata('design:paramtypes', [])
	    ], NgSelectOption);
	    return NgSelectOption;
	})();
	exports.NgSelectOption = NgSelectOption;
	/**
	 * The accessor for writing a value and listening to changes on a select element.
	 */
	var SelectControlValueAccessor = (function () {
	    function SelectControlValueAccessor(cd, renderer, elementRef, query) {
	        this.cd = cd;
	        this.renderer = renderer;
	        this.elementRef = elementRef;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        cd.valueAccessor = this;
	        this._updateValueWhenListOfOptionsChanges(query);
	    }
	    SelectControlValueAccessor.prototype.writeValue = function (value) {
	        this.value = value;
	        shared_1.setProperty(this.renderer, this.elementRef, "value", value);
	    };
	    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassUntouched", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassTouched", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassPristine", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassDirty", {
	        get: function () { return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassValid", {
	        get: function () { return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassInvalid", {
	        get: function () {
	            return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SelectControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function (query) {
	        var _this = this;
	        query.onChange(function () { return _this.writeValue(_this.value); });
	    };
	    SelectControlValueAccessor = __decorate([
	        angular2_1.Directive({
	            selector: 'select[ng-control],select[ng-form-control],select[ng-model]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()',
	                '[class.ng-untouched]': 'ngClassUntouched',
	                '[class.ng-touched]': 'ngClassTouched',
	                '[class.ng-pristine]': 'ngClassPristine',
	                '[class.ng-dirty]': 'ngClassDirty',
	                '[class.ng-valid]': 'ngClassValid',
	                '[class.ng-invalid]': 'ngClassInvalid'
	            }
	        }),
	        __param(3, angular2_1.Query(NgSelectOption, { descendants: true })), 
	        __metadata('design:paramtypes', [ng_control_1.NgControl, render_1.Renderer, angular2_1.ElementRef, angular2_1.QueryList])
	    ], SelectControlValueAccessor);
	    return SelectControlValueAccessor;
	})();
	exports.SelectControlValueAccessor = SelectControlValueAccessor;
	//# sourceMappingURL=select_control_value_accessor.js.map

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var headers_1 = __webpack_require__(55);
	var enums_1 = __webpack_require__(22);
	var di_1 = __webpack_require__(3);
	/**
	 * Creates a request options object similar to the `RequestInit` description
	 * in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#requestinit) to be optionally provided when instantiating a
	 * {@link Request}.
	 *
	 * All values are null by default.
	 */
	var RequestOptions = (function () {
	    function RequestOptions(_a) {
	        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, mode = _b.mode, credentials = _b.credentials, cache = _b.cache, url = _b.url;
	        this.method = lang_1.isPresent(method) ? method : null;
	        this.headers = lang_1.isPresent(headers) ? headers : null;
	        this.body = lang_1.isPresent(body) ? body : null;
	        this.mode = lang_1.isPresent(mode) ? mode : null;
	        this.credentials = lang_1.isPresent(credentials) ? credentials : null;
	        this.cache = lang_1.isPresent(cache) ? cache : null;
	        this.url = lang_1.isPresent(url) ? url : null;
	    }
	    /**
	     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
	     * existing values.
	     */
	    RequestOptions.prototype.merge = function (options) {
	        return new RequestOptions({
	            method: lang_1.isPresent(options) && lang_1.isPresent(options.method) ? options.method : this.method,
	            headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
	            body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
	            mode: lang_1.isPresent(options) && lang_1.isPresent(options.mode) ? options.mode : this.mode,
	            credentials: lang_1.isPresent(options) && lang_1.isPresent(options.credentials) ? options.credentials :
	                this.credentials,
	            cache: lang_1.isPresent(options) && lang_1.isPresent(options.cache) ? options.cache : this.cache,
	            url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url
	        });
	    };
	    return RequestOptions;
	})();
	exports.RequestOptions = RequestOptions;
	/**
	 * Injectable version of {@link RequestOptions}, with overridable default values.
	 *
	 * #Example
	 *
	 * ```
	 * import {Http, BaseRequestOptions, Request} from 'angular2/http';
	 * ...
	 * class MyComponent {
	 *   constructor(baseRequestOptions:BaseRequestOptions, http:Http) {
	 *     var options = baseRequestOptions.merge({body: 'foobar', url: 'https://foo'});
	 *     var request = new Request(options);
	 *     http.request(request).subscribe(res => this.bars = res.json());
	 *   }
	 * }
	 *
	 * ```
	 */
	var BaseRequestOptions = (function (_super) {
	    __extends(BaseRequestOptions, _super);
	    function BaseRequestOptions() {
	        _super.call(this, { method: enums_1.RequestMethods.GET, headers: new headers_1.Headers(), mode: enums_1.RequestModesOpts.Cors });
	    }
	    BaseRequestOptions = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BaseRequestOptions);
	    return BaseRequestOptions;
	})(RequestOptions);
	exports.BaseRequestOptions = BaseRequestOptions;
	//# sourceMappingURL=base_request_options.js.map

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var headers_1 = __webpack_require__(55);
	var lang_1 = __webpack_require__(1);
	// TODO(jeffbcross): properly implement body accessors
	/**
	 * Creates `Request` instances from provided values.
	 *
	 * The Request's interface is inspired by the Request constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#request-class),
	 * but is considered a static value whose body can be accessed many times. There are other
	 * differences in the implementation, but this is the most significant.
	 */
	var Request = (function () {
	    function Request(requestOptions) {
	        // TODO: assert that url is present
	        this.url = requestOptions.url;
	        this._body = requestOptions.body;
	        this.method = requestOptions.method;
	        // TODO(jeffbcross): implement behavior
	        this.mode = requestOptions.mode;
	        // Defaults to 'omit', consistent with browser
	        // TODO(jeffbcross): implement behavior
	        this.credentials = requestOptions.credentials;
	        this.headers = new headers_1.Headers(requestOptions.headers);
	        this.cache = requestOptions.cache;
	    }
	    /**
	     * Returns the request's body as string, assuming that body exists. If body is undefined, return
	     * empty
	     * string.
	     */
	    Request.prototype.text = function () { return lang_1.isPresent(this._body) ? this._body.toString() : ''; };
	    return Request;
	})();
	exports.Request = Request;
	//# sourceMappingURL=static_request.js.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var http_utils_1 = __webpack_require__(187);
	/**
	 * Creates `Response` instances from provided values.
	 *
	 * Though this object isn't
	 * usually instantiated by end-users, it is the primary object interacted with when it comes time to
	 * add data to a view.
	 *
	 * #Example
	 *
	 * ```
	 * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
	 * ```
	 *
	 * The Response's interface is inspired by the Response constructor defined in the [Fetch
	 * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
	 * can be accessed many times. There are other differences in the implementation, but this is the
	 * most significant.
	 */
	var Response = (function () {
	    function Response(responseOptions) {
	        this._body = responseOptions.body;
	        this.status = responseOptions.status;
	        this.statusText = responseOptions.statusText;
	        this.headers = responseOptions.headers;
	        this.type = responseOptions.type;
	        this.url = responseOptions.url;
	    }
	    /**
	     * Not yet implemented
	     */
	    // TODO: Blob return type
	    Response.prototype.blob = function () { throw new lang_1.BaseException('"blob()" method not implemented on Response superclass'); };
	    /**
	     * Attempts to return body as parsed `JSON` object, or raises an exception.
	     */
	    Response.prototype.json = function () {
	        var jsonResponse;
	        if (http_utils_1.isJsObject(this._body)) {
	            jsonResponse = this._body;
	        }
	        else if (lang_1.isString(this._body)) {
	            jsonResponse = lang_1.Json.parse(this._body);
	        }
	        return jsonResponse;
	    };
	    /**
	     * Returns the body as a string, presuming `toString()` can be called on the response body.
	     */
	    Response.prototype.text = function () { return this._body.toString(); };
	    /**
	     * Not yet implemented
	     */
	    // TODO: ArrayBuffer return type
	    Response.prototype.arrayBuffer = function () {
	        throw new lang_1.BaseException('"arrayBuffer()" method not implemented on Response superclass');
	    };
	    return Response;
	})();
	exports.Response = Response;
	//# sourceMappingURL=static_response.js.map

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';// Some of the code comes from WebComponents.JS
	// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var url_resolver_1 = __webpack_require__(42);
	/**
	 * Rewrites URLs by resolving '@import' and 'url()' URLs from the given base URL.
	 */
	var StyleUrlResolver = (function () {
	    function StyleUrlResolver(_resolver) {
	        this._resolver = _resolver;
	    }
	    StyleUrlResolver.prototype.resolveUrls = function (cssText, baseUrl) {
	        cssText = this._replaceUrls(cssText, _cssUrlRe, baseUrl);
	        cssText = this._replaceUrls(cssText, _cssImportRe, baseUrl);
	        return cssText;
	    };
	    StyleUrlResolver.prototype._replaceUrls = function (cssText, re, baseUrl) {
	        var _this = this;
	        return lang_1.StringWrapper.replaceAllMapped(cssText, re, function (m) {
	            var pre = m[1];
	            var url = lang_1.StringWrapper.replaceAll(m[2], _quoteRe, '');
	            var post = m[3];
	            var resolvedUrl = _this._resolver.resolve(baseUrl, url);
	            return pre + "'" + resolvedUrl + "'" + post;
	        });
	    };
	    StyleUrlResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [url_resolver_1.UrlResolver])
	    ], StyleUrlResolver);
	    return StyleUrlResolver;
	})();
	exports.StyleUrlResolver = StyleUrlResolver;
	var _cssUrlRe = /(url\()([^)]*)(\))/g;
	var _cssImportRe = /(@import[\s]+(?!url\())['"]([^'"]*)['"](.*;)/g;
	var _quoteRe = /['"]/g;
	//# sourceMappingURL=style_url_resolver.js.map

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var async_1 = __webpack_require__(5);
	var dom_adapter_1 = __webpack_require__(6);
	var xhr_1 = __webpack_require__(58);
	var style_inliner_1 = __webpack_require__(152);
	var style_url_resolver_1 = __webpack_require__(86);
	/**
	 * Strategy to load component views.
	 * TODO: Make public API once we are more confident in this approach.
	 */
	var ViewLoader = (function () {
	    function ViewLoader(_xhr, _styleInliner, _styleUrlResolver) {
	        this._xhr = _xhr;
	        this._styleInliner = _styleInliner;
	        this._styleUrlResolver = _styleUrlResolver;
	        this._cache = new collection_1.Map();
	    }
	    ViewLoader.prototype.load = function (view) {
	        var _this = this;
	        var tplElAndStyles = [this._loadHtml(view)];
	        if (lang_1.isPresent(view.styles)) {
	            view.styles.forEach(function (cssText) {
	                var textOrPromise = _this._resolveAndInlineCssText(cssText, view.templateAbsUrl);
	                tplElAndStyles.push(textOrPromise);
	            });
	        }
	        if (lang_1.isPresent(view.styleAbsUrls)) {
	            view.styleAbsUrls.forEach(function (url) {
	                var promise = _this._loadText(url).then(function (cssText) { return _this._resolveAndInlineCssText(cssText, view.templateAbsUrl); });
	                tplElAndStyles.push(promise);
	            });
	        }
	        // Inline the styles from the @View annotation and return a template element
	        return async_1.PromiseWrapper.all(tplElAndStyles)
	            .then(function (res) {
	            var tplEl = res[0];
	            var cssTexts = collection_1.ListWrapper.slice(res, 1);
	            _insertCssTexts(dom_adapter_1.DOM.content(tplEl), cssTexts);
	            return tplEl;
	        });
	    };
	    ViewLoader.prototype._loadText = function (url) {
	        var response = this._cache.get(url);
	        if (lang_1.isBlank(response)) {
	            // TODO(vicb): change error when TS gets fixed
	            // https://github.com/angular/angular/issues/2280
	            // throw new BaseException(`Failed to fetch url "${url}"`);
	            response = async_1.PromiseWrapper.catchError(this._xhr.get(url), function (_) { return async_1.PromiseWrapper.reject(new lang_1.BaseException("Failed to fetch url \"" + url + "\""), null); });
	            this._cache.set(url, response);
	        }
	        return response;
	    };
	    // Load the html and inline any style tags
	    ViewLoader.prototype._loadHtml = function (view) {
	        var _this = this;
	        var html;
	        // Load the HTML
	        if (lang_1.isPresent(view.template)) {
	            html = async_1.PromiseWrapper.resolve(view.template);
	        }
	        else if (lang_1.isPresent(view.templateAbsUrl)) {
	            html = this._loadText(view.templateAbsUrl);
	        }
	        else {
	            throw new lang_1.BaseException('View should have either the templateUrl or template property set');
	        }
	        return html.then(function (html) {
	            var tplEl = dom_adapter_1.DOM.createTemplate(html);
	            // Replace $baseUrl with the base url for the template
	            var templateAbsUrl = view.templateAbsUrl;
	            if (lang_1.isPresent(templateAbsUrl) && templateAbsUrl.indexOf("/") >= 0) {
	                var baseUrl = templateAbsUrl.substring(0, templateAbsUrl.lastIndexOf("/"));
	                _this._substituteBaseUrl(dom_adapter_1.DOM.content(tplEl), baseUrl);
	            }
	            // Inline the style tags from the html
	            var styleEls = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(tplEl), 'STYLE');
	            var promises = [];
	            for (var i = 0; i < styleEls.length; i++) {
	                var promise = _this._resolveAndInlineElement(styleEls[i], view.templateAbsUrl);
	                if (lang_1.isPromise(promise)) {
	                    promises.push(promise);
	                }
	            }
	            return promises.length > 0 ? async_1.PromiseWrapper.all(promises).then(function (_) { return tplEl; }) : tplEl;
	        });
	    };
	    /**
	     * Replace all occurrences of $baseUrl in the attributes of an element and its
	     * children with the base URL of the template.
	     *
	     * @param element The element to process
	     * @param baseUrl The base URL of the template.
	     * @private
	     */
	    ViewLoader.prototype._substituteBaseUrl = function (element, baseUrl) {
	        if (dom_adapter_1.DOM.isElementNode(element)) {
	            var attrs = dom_adapter_1.DOM.attributeMap(element);
	            collection_1.MapWrapper.forEach(attrs, function (v, k) {
	                if (lang_1.isPresent(v) && v.indexOf('$baseUrl') >= 0) {
	                    dom_adapter_1.DOM.setAttribute(element, k, lang_1.StringWrapper.replaceAll(v, /\$baseUrl/g, baseUrl));
	                }
	            });
	        }
	        var children = dom_adapter_1.DOM.childNodes(element);
	        for (var i = 0; i < children.length; i++) {
	            if (dom_adapter_1.DOM.isElementNode(children[i])) {
	                this._substituteBaseUrl(children[i], baseUrl);
	            }
	        }
	    };
	    /**
	     * Inlines a style element.
	     *
	     * @param styleEl The style element
	     * @param baseUrl The base url
	     * @returns {Promise<any>} null when no @import rule exist in the css or a Promise
	     * @private
	     */
	    ViewLoader.prototype._resolveAndInlineElement = function (styleEl, baseUrl) {
	        var textOrPromise = this._resolveAndInlineCssText(dom_adapter_1.DOM.getText(styleEl), baseUrl);
	        if (lang_1.isPromise(textOrPromise)) {
	            return textOrPromise.then(function (css) { dom_adapter_1.DOM.setText(styleEl, css); });
	        }
	        else {
	            dom_adapter_1.DOM.setText(styleEl, textOrPromise);
	            return null;
	        }
	    };
	    ViewLoader.prototype._resolveAndInlineCssText = function (cssText, baseUrl) {
	        cssText = this._styleUrlResolver.resolveUrls(cssText, baseUrl);
	        return this._styleInliner.inlineImports(cssText, baseUrl);
	    };
	    ViewLoader = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, style_inliner_1.StyleInliner, style_url_resolver_1.StyleUrlResolver])
	    ], ViewLoader);
	    return ViewLoader;
	})();
	exports.ViewLoader = ViewLoader;
	function _insertCssTexts(element, cssTexts) {
	    if (cssTexts.length == 0)
	        return;
	    var insertBefore = dom_adapter_1.DOM.firstChild(element);
	    for (var i = cssTexts.length - 1; i >= 0; i--) {
	        var styleEl = dom_adapter_1.DOM.createStyleElement(cssTexts[i]);
	        if (lang_1.isPresent(insertBefore)) {
	            dom_adapter_1.DOM.insertBefore(insertBefore, styleEl);
	        }
	        else {
	            dom_adapter_1.DOM.appendChild(element, styleEl);
	        }
	        insertBefore = styleEl;
	    }
	}
	//# sourceMappingURL=view_loader.js.map

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var event_manager_1 = __webpack_require__(57);
	var proto_view_1 = __webpack_require__(90);
	var view_1 = __webpack_require__(209);
	var fragment_1 = __webpack_require__(206);
	var util_1 = __webpack_require__(20);
	var api_1 = __webpack_require__(7);
	exports.DOCUMENT_TOKEN = lang_1.CONST_EXPR(new di_1.OpaqueToken('DocumentToken'));
	exports.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES = lang_1.CONST_EXPR(new di_1.OpaqueToken('DomReflectPropertiesAsAttributes'));
	var REFLECT_PREFIX = 'ng-reflect-';
	var DomRenderer = (function (_super) {
	    __extends(DomRenderer, _super);
	    function DomRenderer(_eventManager, document, reflectPropertiesAsAttributes) {
	        _super.call(this);
	        this._eventManager = _eventManager;
	        this._reflectPropertiesAsAttributes = reflectPropertiesAsAttributes;
	        this._document = document;
	    }
	    DomRenderer.prototype.createRootHostView = function (hostProtoViewRef, fragmentCount, hostElementSelector) {
	        var hostProtoView = proto_view_1.resolveInternalDomProtoView(hostProtoViewRef);
	        var element = dom_adapter_1.DOM.querySelector(this._document, hostElementSelector);
	        if (lang_1.isBlank(element)) {
	            throw new lang_1.BaseException("The selector \"" + hostElementSelector + "\" did not match any elements");
	        }
	        return this._createView(hostProtoView, element);
	    };
	    DomRenderer.prototype.createView = function (protoViewRef, fragmentCount) {
	        var protoView = proto_view_1.resolveInternalDomProtoView(protoViewRef);
	        return this._createView(protoView, null);
	    };
	    DomRenderer.prototype.destroyView = function (viewRef) {
	        // noop for now
	    };
	    DomRenderer.prototype.getNativeElementSync = function (location) {
	        if (lang_1.isBlank(location.renderBoundElementIndex)) {
	            return null;
	        }
	        return view_1.resolveInternalDomView(location.renderView)
	            .boundElements[location.renderBoundElementIndex];
	    };
	    DomRenderer.prototype.getRootNodes = function (fragment) {
	        return fragment_1.resolveInternalDomFragment(fragment);
	    };
	    DomRenderer.prototype.attachFragmentAfterFragment = function (previousFragmentRef, fragmentRef) {
	        var previousFragmentNodes = fragment_1.resolveInternalDomFragment(previousFragmentRef);
	        if (previousFragmentNodes.length > 0) {
	            var sibling = previousFragmentNodes[previousFragmentNodes.length - 1];
	            moveNodesAfterSibling(sibling, fragment_1.resolveInternalDomFragment(fragmentRef));
	        }
	    };
	    DomRenderer.prototype.attachFragmentAfterElement = function (elementRef, fragmentRef) {
	        if (lang_1.isBlank(elementRef.renderBoundElementIndex)) {
	            return;
	        }
	        var parentView = view_1.resolveInternalDomView(elementRef.renderView);
	        var element = parentView.boundElements[elementRef.renderBoundElementIndex];
	        moveNodesAfterSibling(element, fragment_1.resolveInternalDomFragment(fragmentRef));
	    };
	    DomRenderer.prototype.detachFragment = function (fragmentRef) {
	        var fragmentNodes = fragment_1.resolveInternalDomFragment(fragmentRef);
	        for (var i = 0; i < fragmentNodes.length; i++) {
	            dom_adapter_1.DOM.remove(fragmentNodes[i]);
	        }
	    };
	    DomRenderer.prototype.hydrateView = function (viewRef) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        if (view.hydrated)
	            throw new lang_1.BaseException('The view is already hydrated.');
	        view.hydrated = true;
	        // add global events
	        view.eventHandlerRemovers = [];
	        var binders = view.proto.elementBinders;
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            if (lang_1.isPresent(binder.globalEvents)) {
	                for (var i = 0; i < binder.globalEvents.length; i++) {
	                    var globalEvent = binder.globalEvents[i];
	                    var remover = this._createGlobalEventListener(view, binderIdx, globalEvent.name, globalEvent.target, globalEvent.fullName);
	                    view.eventHandlerRemovers.push(remover);
	                }
	            }
	        }
	    };
	    DomRenderer.prototype.dehydrateView = function (viewRef) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        // remove global events
	        for (var i = 0; i < view.eventHandlerRemovers.length; i++) {
	            view.eventHandlerRemovers[i]();
	        }
	        view.eventHandlerRemovers = null;
	        view.hydrated = false;
	    };
	    DomRenderer.prototype.setElementProperty = function (location, propertyName, propertyValue) {
	        if (lang_1.isBlank(location.renderBoundElementIndex)) {
	            return;
	        }
	        var view = view_1.resolveInternalDomView(location.renderView);
	        view.setElementProperty(location.renderBoundElementIndex, propertyName, propertyValue);
	        // Reflect the property value as an attribute value with ng-reflect- prefix.
	        if (this._reflectPropertiesAsAttributes) {
	            this.setElementAttribute(location, "" + REFLECT_PREFIX + util_1.camelCaseToDashCase(propertyName), propertyValue);
	        }
	    };
	    DomRenderer.prototype.setElementAttribute = function (location, attributeName, attributeValue) {
	        if (lang_1.isBlank(location.renderBoundElementIndex)) {
	            return;
	        }
	        var view = view_1.resolveInternalDomView(location.renderView);
	        view.setElementAttribute(location.renderBoundElementIndex, attributeName, attributeValue);
	    };
	    DomRenderer.prototype.setElementClass = function (location, className, isAdd) {
	        if (lang_1.isBlank(location.renderBoundElementIndex)) {
	            return;
	        }
	        var view = view_1.resolveInternalDomView(location.renderView);
	        view.setElementClass(location.renderBoundElementIndex, className, isAdd);
	    };
	    DomRenderer.prototype.setElementStyle = function (location, styleName, styleValue) {
	        if (lang_1.isBlank(location.renderBoundElementIndex)) {
	            return;
	        }
	        var view = view_1.resolveInternalDomView(location.renderView);
	        view.setElementStyle(location.renderBoundElementIndex, styleName, styleValue);
	    };
	    DomRenderer.prototype.invokeElementMethod = function (location, methodName, args) {
	        if (lang_1.isBlank(location.renderBoundElementIndex)) {
	            return;
	        }
	        var view = view_1.resolveInternalDomView(location.renderView);
	        view.invokeElementMethod(location.renderBoundElementIndex, methodName, args);
	    };
	    DomRenderer.prototype.setText = function (viewRef, textNodeIndex, text) {
	        if (lang_1.isBlank(textNodeIndex)) {
	            return;
	        }
	        var view = view_1.resolveInternalDomView(viewRef);
	        dom_adapter_1.DOM.setText(view.boundTextNodes[textNodeIndex], text);
	    };
	    DomRenderer.prototype.setEventDispatcher = function (viewRef, dispatcher /*api.EventDispatcher*/) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        view.eventDispatcher = dispatcher;
	    };
	    DomRenderer.prototype._createView = function (protoView, inplaceElement) {
	        var clonedProtoView = util_1.cloneAndQueryProtoView(protoView, true);
	        var boundElements = clonedProtoView.boundElements;
	        // adopt inplaceElement
	        if (lang_1.isPresent(inplaceElement)) {
	            if (protoView.fragmentsRootNodeCount[0] !== 1) {
	                throw new lang_1.BaseException('Root proto views can only contain one element!');
	            }
	            dom_adapter_1.DOM.clearNodes(inplaceElement);
	            var tempRoot = clonedProtoView.fragments[0][0];
	            moveChildNodes(tempRoot, inplaceElement);
	            if (boundElements.length > 0 && boundElements[0] === tempRoot) {
	                boundElements[0] = inplaceElement;
	            }
	            clonedProtoView.fragments[0][0] = inplaceElement;
	        }
	        var view = new view_1.DomView(protoView, clonedProtoView.boundTextNodes, boundElements);
	        var binders = protoView.elementBinders;
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            var element = boundElements[binderIdx];
	            // native shadow DOM
	            if (binder.hasNativeShadowRoot) {
	                var shadowRootWrapper = dom_adapter_1.DOM.firstChild(element);
	                moveChildNodes(shadowRootWrapper, dom_adapter_1.DOM.createShadowRoot(element));
	                dom_adapter_1.DOM.remove(shadowRootWrapper);
	            }
	            // events
	            if (lang_1.isPresent(binder.eventLocals) && lang_1.isPresent(binder.localEvents)) {
	                for (var i = 0; i < binder.localEvents.length; i++) {
	                    this._createEventListener(view, element, binderIdx, binder.localEvents[i].name, binder.eventLocals);
	                }
	            }
	        }
	        return new api_1.RenderViewWithFragments(new view_1.DomViewRef(view), clonedProtoView.fragments.map(function (nodes) { return new fragment_1.DomFragmentRef(nodes); }));
	    };
	    DomRenderer.prototype._createEventListener = function (view, element, elementIndex, eventName, eventLocals) {
	        this._eventManager.addEventListener(element, eventName, function (event) { view.dispatchEvent(elementIndex, eventName, event); });
	    };
	    DomRenderer.prototype._createGlobalEventListener = function (view, elementIndex, eventName, eventTarget, fullName) {
	        return this._eventManager.addGlobalEventListener(eventTarget, eventName, function (event) { view.dispatchEvent(elementIndex, fullName, event); });
	    };
	    DomRenderer = __decorate([
	        di_1.Injectable(),
	        __param(1, di_1.Inject(exports.DOCUMENT_TOKEN)),
	        __param(2, di_1.Inject(exports.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES)), 
	        __metadata('design:paramtypes', [event_manager_1.EventManager, Object, Boolean])
	    ], DomRenderer);
	    return DomRenderer;
	})(api_1.Renderer);
	exports.DomRenderer = DomRenderer;
	function moveNodesAfterSibling(sibling, nodes) {
	    if (nodes.length > 0 && lang_1.isPresent(dom_adapter_1.DOM.parentElement(sibling))) {
	        for (var i = 0; i < nodes.length; i++) {
	            dom_adapter_1.DOM.insertBefore(sibling, nodes[i]);
	        }
	        dom_adapter_1.DOM.insertBefore(nodes[nodes.length - 1], sibling);
	    }
	}
	function moveChildNodes(source, target) {
	    var currChild = dom_adapter_1.DOM.firstChild(source);
	    while (lang_1.isPresent(currChild)) {
	        var nextChild = dom_adapter_1.DOM.nextSibling(currChild);
	        dom_adapter_1.DOM.appendChild(target, currChild);
	        currChild = nextChild;
	    }
	}
	//# sourceMappingURL=dom_renderer.js.map

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(6);
	var shadow_dom_strategy_1 = __webpack_require__(33);
	var util_1 = __webpack_require__(153);
	/**
	 * This strategy emulates the Shadow DOM for the templates, styles **excluded**:
	 * - components templates are added as children of their component element,
	 * - styles are moved from the templates to the styleHost (i.e. the document head).
	 *
	 * Notes:
	 * - styles are **not** scoped to their component and will apply to the whole document,
	 * - you can **not** use shadow DOM specific selectors in the styles
	 */
	var EmulatedUnscopedShadowDomStrategy = (function (_super) {
	    __extends(EmulatedUnscopedShadowDomStrategy, _super);
	    function EmulatedUnscopedShadowDomStrategy(styleHost) {
	        _super.call(this);
	        this.styleHost = styleHost;
	    }
	    EmulatedUnscopedShadowDomStrategy.prototype.hasNativeContentElement = function () { return false; };
	    EmulatedUnscopedShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        util_1.insertSharedStyleText(cssText, this.styleHost, styleEl);
	    };
	    return EmulatedUnscopedShadowDomStrategy;
	})(shadow_dom_strategy_1.ShadowDomStrategy);
	exports.EmulatedUnscopedShadowDomStrategy = EmulatedUnscopedShadowDomStrategy;
	//# sourceMappingURL=emulated_unscoped_shadow_dom_strategy.js.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var api_1 = __webpack_require__(7);
	var dom_adapter_1 = __webpack_require__(6);
	function resolveInternalDomProtoView(protoViewRef) {
	    return protoViewRef._protoView;
	}
	exports.resolveInternalDomProtoView = resolveInternalDomProtoView;
	var DomProtoViewRef = (function (_super) {
	    __extends(DomProtoViewRef, _super);
	    function DomProtoViewRef(_protoView) {
	        _super.call(this);
	        this._protoView = _protoView;
	    }
	    return DomProtoViewRef;
	})(api_1.RenderProtoViewRef);
	exports.DomProtoViewRef = DomProtoViewRef;
	var DomProtoView = (function () {
	    function DomProtoView(type, rootElement, elementBinders, rootTextNodeIndices, boundTextNodeCount, fragmentsRootNodeCount, isSingleElementFragment) {
	        this.type = type;
	        this.rootElement = rootElement;
	        this.elementBinders = elementBinders;
	        this.rootTextNodeIndices = rootTextNodeIndices;
	        this.boundTextNodeCount = boundTextNodeCount;
	        this.fragmentsRootNodeCount = fragmentsRootNodeCount;
	        this.isSingleElementFragment = isSingleElementFragment;
	    }
	    DomProtoView.create = function (type, rootElement, fragmentsRootNodeCount, rootTextNodeIndices, elementBinders) {
	        var boundTextNodeCount = rootTextNodeIndices.length;
	        for (var i = 0; i < elementBinders.length; i++) {
	            boundTextNodeCount += elementBinders[i].textNodeIndices.length;
	        }
	        var isSingleElementFragment = fragmentsRootNodeCount.length === 1 &&
	            fragmentsRootNodeCount[0] === 1 &&
	            dom_adapter_1.DOM.isElementNode(dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.content(rootElement)));
	        return new DomProtoView(type, rootElement, elementBinders, rootTextNodeIndices, boundTextNodeCount, fragmentsRootNodeCount, isSingleElementFragment);
	    };
	    return DomProtoView;
	})();
	exports.DomProtoView = DomProtoView;
	//# sourceMappingURL=proto_view.js.map

/***/ },
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	/**
	 * Specifies app root url for the application.
	 *
	 * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var AppRootUrl = (function () {
	    function AppRootUrl() {
	    }
	    Object.defineProperty(AppRootUrl.prototype, "value", {
	        /**
	         * Returns the base URL of the currently running application.
	         */
	        get: function () {
	            if (lang_1.isBlank(this._value)) {
	                var a = dom_adapter_1.DOM.createElement('a');
	                dom_adapter_1.DOM.resolveAndSetHref(a, './', null);
	                this._value = dom_adapter_1.DOM.getHref(a);
	            }
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AppRootUrl = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], AppRootUrl);
	    return AppRootUrl;
	})();
	exports.AppRootUrl = AppRootUrl;
	//# sourceMappingURL=app_root_url.js.map

/***/ },
/* 99 */,
/* 100 */,
/* 101 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(259);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(258);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(101)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var change_detector_ref_1 = __webpack_require__(105);
	var exceptions_1 = __webpack_require__(60);
	var constants_1 = __webpack_require__(30);
	var AbstractChangeDetector = (function () {
	    function AbstractChangeDetector(id) {
	        this.id = id;
	        this.lightDomChildren = [];
	        this.shadowDomChildren = [];
	        this.mode = null;
	        this.ref = new change_detector_ref_1.ChangeDetectorRef(this);
	    }
	    AbstractChangeDetector.prototype.addChild = function (cd) {
	        this.lightDomChildren.push(cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeChild = function (cd) { collection_1.ListWrapper.remove(this.lightDomChildren, cd); };
	    AbstractChangeDetector.prototype.addShadowDomChild = function (cd) {
	        this.shadowDomChildren.push(cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeShadowDomChild = function (cd) { collection_1.ListWrapper.remove(this.shadowDomChildren, cd); };
	    AbstractChangeDetector.prototype.remove = function () { this.parent.removeChild(this); };
	    AbstractChangeDetector.prototype.detectChanges = function () { this._detectChanges(false); };
	    AbstractChangeDetector.prototype.checkNoChanges = function () { this._detectChanges(true); };
	    AbstractChangeDetector.prototype._detectChanges = function (throwOnChange) {
	        if (this.mode === constants_1.DETACHED || this.mode === constants_1.CHECKED)
	            return;
	        this.detectChangesInRecords(throwOnChange);
	        this._detectChangesInLightDomChildren(throwOnChange);
	        if (throwOnChange === false)
	            this.callOnAllChangesDone();
	        this._detectChangesInShadowDomChildren(throwOnChange);
	        if (this.mode === constants_1.CHECK_ONCE)
	            this.mode = constants_1.CHECKED;
	    };
	    AbstractChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) { };
	    AbstractChangeDetector.prototype.hydrate = function (context, locals, directives, pipes) { };
	    AbstractChangeDetector.prototype.dehydrate = function () { };
	    AbstractChangeDetector.prototype.callOnAllChangesDone = function () { };
	    AbstractChangeDetector.prototype._detectChangesInLightDomChildren = function (throwOnChange) {
	        var c = this.lightDomChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i]._detectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype._detectChangesInShadowDomChildren = function (throwOnChange) {
	        var c = this.shadowDomChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i]._detectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype.markAsCheckOnce = function () { this.mode = constants_1.CHECK_ONCE; };
	    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function () {
	        var c = this;
	        while (lang_1.isPresent(c) && c.mode != constants_1.DETACHED) {
	            if (c.mode === constants_1.CHECKED)
	                c.mode = constants_1.CHECK_ONCE;
	            c = c.parent;
	        }
	    };
	    AbstractChangeDetector.prototype.throwError = function (proto, exception, stack) {
	        throw new exceptions_1.ChangeDetectionError(proto, exception, stack);
	    };
	    return AbstractChangeDetector;
	})();
	exports.AbstractChangeDetector = AbstractChangeDetector;
	//# sourceMappingURL=abstract_change_detector.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var jit_proto_change_detector_1 = __webpack_require__(168);
	var pregen_proto_change_detector_1 = __webpack_require__(171);
	var proto_change_detector_1 = __webpack_require__(63);
	var pipes_1 = __webpack_require__(45);
	var iterable_changes_1 = __webpack_require__(62);
	var keyvalue_changes_1 = __webpack_require__(113);
	var observable_pipe_1 = __webpack_require__(118);
	var promise_pipe_1 = __webpack_require__(119);
	var uppercase_pipe_1 = __webpack_require__(120);
	var lowercase_pipe_1 = __webpack_require__(115);
	var json_pipe_1 = __webpack_require__(112);
	var limit_to_pipe_1 = __webpack_require__(114);
	var date_pipe_1 = __webpack_require__(111);
	var number_pipe_1 = __webpack_require__(117);
	var null_pipe_1 = __webpack_require__(116);
	var interfaces_1 = __webpack_require__(109);
	var di_1 = __webpack_require__(3);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	exports.keyValDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new keyvalue_changes_1.KeyValueChangesFactory()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	exports.iterableDiff = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new iterable_changes_1.IterableChangesFactory()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Async binding to such types as Observable.
	 */
	exports.async = lang_1.CONST_EXPR([
	    lang_1.CONST_EXPR(new observable_pipe_1.ObservablePipeFactory()),
	    lang_1.CONST_EXPR(new promise_pipe_1.PromisePipeFactory()),
	    lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())
	]);
	/**
	 * Uppercase text transform.
	 */
	exports.uppercase = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new uppercase_pipe_1.UpperCaseFactory()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Lowercase text transform.
	 */
	exports.lowercase = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new lowercase_pipe_1.LowerCaseFactory()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Json stringify transform.
	 */
	exports.json = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new json_pipe_1.JsonPipe()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * LimitTo text transform.
	 */
	exports.limitTo = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new limit_to_pipe_1.LimitToPipeFactory()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Number number transform.
	 */
	exports.decimal = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new number_pipe_1.DecimalPipe()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Percent number transform.
	 */
	exports.percent = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new number_pipe_1.PercentPipe()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Currency number transform.
	 */
	exports.currency = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new number_pipe_1.CurrencyPipe()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	/**
	 * Date/time formatter.
	 */
	exports.date = lang_1.CONST_EXPR([lang_1.CONST_EXPR(new date_pipe_1.DatePipe()), lang_1.CONST_EXPR(new null_pipe_1.NullPipeFactory())]);
	exports.defaultPipes = lang_1.CONST_EXPR(new pipes_1.Pipes({
	    "iterableDiff": exports.iterableDiff,
	    "keyValDiff": exports.keyValDiff,
	    "async": exports.async,
	    "uppercase": exports.uppercase,
	    "lowercase": exports.lowercase,
	    "json": exports.json,
	    "limitTo": exports.limitTo,
	    "number": exports.decimal,
	    "percent": exports.percent,
	    "currency": exports.currency,
	    "date": exports.date
	}));
	/**
	 * Map from {@link ChangeDetectorDefinition#id} to a factory method which takes a
	 * {@link Pipes} and a {@link ChangeDetectorDefinition} and generates a
	 * {@link ProtoChangeDetector} associated with the definition.
	 */
	// TODO(kegluneq): Use PregenProtoChangeDetectorFactory rather than Function once possible in
	// dart2js. See https://github.com/dart-lang/sdk/issues/23630 for details.
	exports.preGeneratedProtoDetectors = {};
	exports.PROTO_CHANGE_DETECTOR_KEY = lang_1.CONST_EXPR(new di_1.OpaqueToken('ProtoChangeDetectors'));
	/**
	 * Implements change detection using a map of pregenerated proto detectors.
	 */
	var PreGeneratedChangeDetection = (function (_super) {
	    __extends(PreGeneratedChangeDetection, _super);
	    function PreGeneratedChangeDetection(protoChangeDetectorsForTest) {
	        _super.call(this);
	        this._dynamicChangeDetection = new DynamicChangeDetection();
	        this._protoChangeDetectorFactories = lang_1.isPresent(protoChangeDetectorsForTest) ?
	            protoChangeDetectorsForTest :
	            exports.preGeneratedProtoDetectors;
	    }
	    PreGeneratedChangeDetection.isSupported = function () { return pregen_proto_change_detector_1.PregenProtoChangeDetector.isSupported(); };
	    PreGeneratedChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        var id = definition.id;
	        if (collection_1.StringMapWrapper.contains(this._protoChangeDetectorFactories, id)) {
	            return collection_1.StringMapWrapper.get(this._protoChangeDetectorFactories, id)(definition);
	        }
	        return this._dynamicChangeDetection.createProtoChangeDetector(definition);
	    };
	    PreGeneratedChangeDetection = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(exports.PROTO_CHANGE_DETECTOR_KEY)),
	        __param(0, di_1.Optional()), 
	        __metadata('design:paramtypes', [Object])
	    ], PreGeneratedChangeDetection);
	    return PreGeneratedChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.PreGeneratedChangeDetection = PreGeneratedChangeDetection;
	/**
	 * Implements change detection that does not require `eval()`.
	 *
	 * This is slower than {@link JitChangeDetection}.
	 */
	var DynamicChangeDetection = (function (_super) {
	    __extends(DynamicChangeDetection, _super);
	    function DynamicChangeDetection() {
	        _super.apply(this, arguments);
	    }
	    DynamicChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return new proto_change_detector_1.DynamicProtoChangeDetector(definition);
	    };
	    DynamicChangeDetection = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], DynamicChangeDetection);
	    return DynamicChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.DynamicChangeDetection = DynamicChangeDetection;
	/**
	 * Implements faster change detection by generating source code.
	 *
	 * This requires `eval()`. For change detection that does not require `eval()`, see
	 * {@link DynamicChangeDetection} and {@link PreGeneratedChangeDetection}.
	 */
	var JitChangeDetection = (function (_super) {
	    __extends(JitChangeDetection, _super);
	    function JitChangeDetection() {
	        _super.apply(this, arguments);
	    }
	    JitChangeDetection.isSupported = function () { return jit_proto_change_detector_1.JitProtoChangeDetector.isSupported(); };
	    JitChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return new jit_proto_change_detector_1.JitProtoChangeDetector(definition);
	    };
	    JitChangeDetection = __decorate([
	        di_1.Injectable(),
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], JitChangeDetection);
	    return JitChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.JitChangeDetection = JitChangeDetection;
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var constants_1 = __webpack_require__(30);
	/**
	 * Controls change detection.
	 *
	 * {@link ChangeDetectorRef} allows requesting checks for detectors that rely on observables. It
	 *also allows detaching and
	 * attaching change detector subtrees.
	 */
	var ChangeDetectorRef = (function () {
	    function ChangeDetectorRef(_cd) {
	        this._cd = _cd;
	    }
	    /**
	     * Request to check all ON_PUSH ancestors.
	     */
	    ChangeDetectorRef.prototype.requestCheck = function () { this._cd.markPathToRootAsCheckOnce(); };
	    /**
	     * Detaches the change detector from the change detector tree.
	     *
	     * The detached change detector will not be checked until it is reattached.
	     */
	    ChangeDetectorRef.prototype.detach = function () { this._cd.mode = constants_1.DETACHED; };
	    /**
	     * Reattach the change detector to the change detector tree.
	     *
	     * This also requests a check of this change detector. This reattached change detector will be
	     *checked during the
	     * next change detection run.
	     */
	    ChangeDetectorRef.prototype.reattach = function () {
	        this._cd.mode = constants_1.CHECK_ALWAYS;
	        this.requestCheck();
	    };
	    return ChangeDetectorRef;
	})();
	exports.ChangeDetectorRef = ChangeDetectorRef;
	//# sourceMappingURL=change_detector_ref.js.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var proto_record_1 = __webpack_require__(46);
	/**
	 * Removes "duplicate" records. It assuming that record evaluation does not
	 * have side-effects.
	 *
	 * Records that are not last in bindings are removed and all the indices
	 * of the records that depend on them are updated.
	 *
	 * Records that are last in bindings CANNOT be removed, and instead are
	 * replaced with very cheap SELF records.
	 */
	function coalesce(records) {
	    var res = [];
	    var indexMap = new collection_1.Map();
	    for (var i = 0; i < records.length; ++i) {
	        var r = records[i];
	        var record = _replaceIndices(r, res.length + 1, indexMap);
	        var matchingRecord = _findMatching(record, res);
	        if (lang_1.isPresent(matchingRecord) && record.lastInBinding) {
	            res.push(_selfRecord(record, matchingRecord.selfIndex, res.length + 1));
	            indexMap.set(r.selfIndex, matchingRecord.selfIndex);
	        }
	        else if (lang_1.isPresent(matchingRecord) && !record.lastInBinding) {
	            indexMap.set(r.selfIndex, matchingRecord.selfIndex);
	        }
	        else {
	            res.push(record);
	            indexMap.set(r.selfIndex, record.selfIndex);
	        }
	    }
	    return res;
	}
	exports.coalesce = coalesce;
	function _selfRecord(r, contextIndex, selfIndex) {
	    return new proto_record_1.ProtoRecord(proto_record_1.RecordType.SELF, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	function _findMatching(r, rs) {
	    return collection_1.ListWrapper.find(rs, function (rr) { return rr.mode !== proto_record_1.RecordType.DIRECTIVE_LIFECYCLE && _sameDirIndex(rr, r) &&
	        rr.mode === r.mode && lang_1.looseIdentical(rr.funcOrValue, r.funcOrValue) &&
	        rr.contextIndex === r.contextIndex && lang_1.looseIdentical(rr.name, r.name) &&
	        collection_1.ListWrapper.equals(rr.args, r.args); });
	}
	function _sameDirIndex(a, b) {
	    var di1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.directiveIndex;
	    var ei1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.elementIndex;
	    var di2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.directiveIndex;
	    var ei2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.elementIndex;
	    return di1 === di2 && ei1 === ei2;
	}
	function _replaceIndices(r, selfIndex, indexMap) {
	    var args = collection_1.ListWrapper.map(r.args, function (a) { return _map(indexMap, a); });
	    var contextIndex = _map(indexMap, r.contextIndex);
	    return new proto_record_1.ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	function _map(indexMap, value) {
	    var r = indexMap.get(value);
	    return lang_1.isPresent(r) ? r : value;
	}
	//# sourceMappingURL=coalesce.js.map

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var constants_1 = __webpack_require__(30);
	var lang_1 = __webpack_require__(1);
	var DirectiveIndex = (function () {
	    function DirectiveIndex(elementIndex, directiveIndex) {
	        this.elementIndex = elementIndex;
	        this.directiveIndex = directiveIndex;
	    }
	    Object.defineProperty(DirectiveIndex.prototype, "name", {
	        get: function () { return this.elementIndex + "_" + this.directiveIndex; },
	        enumerable: true,
	        configurable: true
	    });
	    return DirectiveIndex;
	})();
	exports.DirectiveIndex = DirectiveIndex;
	var DirectiveRecord = (function () {
	    function DirectiveRecord(_a) {
	        var _b = _a === void 0 ? {} : _a, directiveIndex = _b.directiveIndex, callOnAllChangesDone = _b.callOnAllChangesDone, callOnChange = _b.callOnChange, callOnCheck = _b.callOnCheck, callOnInit = _b.callOnInit, changeDetection = _b.changeDetection;
	        this.directiveIndex = directiveIndex;
	        this.callOnAllChangesDone = lang_1.normalizeBool(callOnAllChangesDone);
	        this.callOnChange = lang_1.normalizeBool(callOnChange);
	        this.callOnCheck = lang_1.normalizeBool(callOnCheck);
	        this.callOnInit = lang_1.normalizeBool(callOnInit);
	        this.changeDetection = changeDetection;
	    }
	    DirectiveRecord.prototype.isOnPushChangeDetection = function () { return lang_1.StringWrapper.equals(this.changeDetection, constants_1.ON_PUSH); };
	    return DirectiveRecord;
	})();
	exports.DirectiveRecord = DirectiveRecord;
	//# sourceMappingURL=directive_record.js.map

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var abstract_change_detector_1 = __webpack_require__(103);
	var change_detection_util_1 = __webpack_require__(44);
	var proto_record_1 = __webpack_require__(46);
	var DynamicChangeDetector = (function (_super) {
	    __extends(DynamicChangeDetector, _super);
	    function DynamicChangeDetector(id, changeControlStrategy, dispatcher, protos, directiveRecords) {
	        _super.call(this, id);
	        this.changeControlStrategy = changeControlStrategy;
	        this.dispatcher = dispatcher;
	        this.protos = protos;
	        this.directiveRecords = directiveRecords;
	        this.locals = null;
	        this.directives = null;
	        this.alreadyChecked = false;
	        this.pipes = null;
	        this.values = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.localPipes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.prevContexts = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.changes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.values[0] = null;
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized, 1);
	        collection_1.ListWrapper.fill(this.localPipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
	        collection_1.ListWrapper.fill(this.changes, false);
	    }
	    DynamicChangeDetector.prototype.hydrate = function (context, locals, directives, pipes) {
	        this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeControlStrategy);
	        this.values[0] = context;
	        this.locals = locals;
	        this.directives = directives;
	        this.alreadyChecked = false;
	        this.pipes = pipes;
	    };
	    DynamicChangeDetector.prototype.dehydrate = function () {
	        this._destroyPipes();
	        this.values[0] = null;
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized, 1);
	        collection_1.ListWrapper.fill(this.changes, false);
	        collection_1.ListWrapper.fill(this.localPipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
	        this.locals = null;
	        this.pipes = null;
	    };
	    DynamicChangeDetector.prototype._destroyPipes = function () {
	        for (var i = 0; i < this.localPipes.length; ++i) {
	            if (lang_1.isPresent(this.localPipes[i])) {
	                this.localPipes[i].onDestroy();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.hydrated = function () { return this.values[0] !== null; };
	    DynamicChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {
	        if (!this.hydrated()) {
	            change_detection_util_1.ChangeDetectionUtil.throwDehydrated();
	        }
	        var protos = this.protos;
	        var changes = null;
	        var isChanged = false;
	        for (var i = 0; i < protos.length; ++i) {
	            var proto = protos[i];
	            var bindingRecord = proto.bindingRecord;
	            var directiveRecord = bindingRecord.directiveRecord;
	            if (proto.isLifeCycleRecord()) {
	                if (proto.name === "onCheck" && !throwOnChange) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).onCheck();
	                }
	                else if (proto.name === "onInit" && !throwOnChange && !this.alreadyChecked) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).onInit();
	                }
	                else if (proto.name === "onChange" && lang_1.isPresent(changes) && !throwOnChange) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).onChange(changes);
	                }
	            }
	            else {
	                var change = this._check(proto, throwOnChange);
	                if (lang_1.isPresent(change)) {
	                    this._updateDirectiveOrElement(change, bindingRecord);
	                    isChanged = true;
	                    changes = this._addChange(bindingRecord, change, changes);
	                }
	            }
	            if (proto.lastInDirective) {
	                changes = null;
	                if (isChanged && bindingRecord.isOnPushChangeDetection()) {
	                    this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
	                }
	                isChanged = false;
	            }
	        }
	        this.alreadyChecked = true;
	    };
	    DynamicChangeDetector.prototype.callOnAllChangesDone = function () {
	        this.dispatcher.notifyOnAllChangesDone();
	        var dirs = this.directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callOnAllChangesDone) {
	                this._getDirectiveFor(dir.directiveIndex).onAllChangesDone();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype._updateDirectiveOrElement = function (change, bindingRecord) {
	        if (lang_1.isBlank(bindingRecord.directiveRecord)) {
	            this.dispatcher.notifyOnBinding(bindingRecord, change.currentValue);
	        }
	        else {
	            var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
	            bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
	        }
	    };
	    DynamicChangeDetector.prototype._addChange = function (bindingRecord, change, changes) {
	        if (bindingRecord.callOnChange()) {
	            return change_detection_util_1.ChangeDetectionUtil.addChange(changes, bindingRecord.propertyName, change);
	        }
	        else {
	            return changes;
	        }
	    };
	    DynamicChangeDetector.prototype._getDirectiveFor = function (directiveIndex) { return this.directives.getDirectiveFor(directiveIndex); };
	    DynamicChangeDetector.prototype._getDetectorFor = function (directiveIndex) { return this.directives.getDetectorFor(directiveIndex); };
	    DynamicChangeDetector.prototype._check = function (proto, throwOnChange) {
	        try {
	            if (proto.isPipeRecord()) {
	                return this._pipeCheck(proto, throwOnChange);
	            }
	            else {
	                return this._referenceCheck(proto, throwOnChange);
	            }
	        }
	        catch (e) {
	            this.throwError(proto, e, e.stack);
	        }
	    };
	    DynamicChangeDetector.prototype._referenceCheck = function (proto, throwOnChange) {
	        if (this._pureFuncAndArgsDidNotChange(proto)) {
	            this._setChanged(proto, false);
	            return null;
	        }
	        var prevValue = this._readSelf(proto);
	        var currValue = this._calculateCurrValue(proto);
	        if (!isSame(prevValue, currValue)) {
	            if (proto.lastInBinding) {
	                var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                if (throwOnChange)
	                    change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return change;
	            }
	            else {
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return null;
	            }
	        }
	        else {
	            this._setChanged(proto, false);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._calculateCurrValue = function (proto) {
	        switch (proto.mode) {
	            case proto_record_1.RecordType.SELF:
	                return this._readContext(proto);
	            case proto_record_1.RecordType.CONST:
	                return proto.funcOrValue;
	            case proto_record_1.RecordType.PROPERTY:
	                var context = this._readContext(proto);
	                return proto.funcOrValue(context);
	            case proto_record_1.RecordType.SAFE_PROPERTY:
	                var context = this._readContext(proto);
	                return lang_1.isBlank(context) ? null : proto.funcOrValue(context);
	            case proto_record_1.RecordType.LOCAL:
	                return this.locals.get(proto.name);
	            case proto_record_1.RecordType.INVOKE_METHOD:
	                var context = this._readContext(proto);
	                var args = this._readArgs(proto);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RecordType.SAFE_INVOKE_METHOD:
	                var context = this._readContext(proto);
	                if (lang_1.isBlank(context)) {
	                    return null;
	                }
	                var args = this._readArgs(proto);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RecordType.KEYED_ACCESS:
	                var arg = this._readArgs(proto)[0];
	                return this._readContext(proto)[arg];
	            case proto_record_1.RecordType.INVOKE_CLOSURE:
	                return lang_1.FunctionWrapper.apply(this._readContext(proto), this._readArgs(proto));
	            case proto_record_1.RecordType.INTERPOLATE:
	            case proto_record_1.RecordType.PRIMITIVE_OP:
	                return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto));
	            default:
	                throw new lang_1.BaseException("Unknown operation " + proto.mode);
	        }
	    };
	    DynamicChangeDetector.prototype._pipeCheck = function (proto, throwOnChange) {
	        var context = this._readContext(proto);
	        var args = this._readArgs(proto);
	        var pipe = this._pipeFor(proto, context);
	        var prevValue = this._readSelf(proto);
	        var currValue = pipe.transform(context, args);
	        if (!isSame(prevValue, currValue)) {
	            currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
	            if (proto.lastInBinding) {
	                var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                if (throwOnChange)
	                    change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return change;
	            }
	            else {
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return null;
	            }
	        }
	        else {
	            this._setChanged(proto, false);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._pipeFor = function (proto, context) {
	        var storedPipe = this._readPipe(proto);
	        if (lang_1.isPresent(storedPipe) && storedPipe.supports(context)) {
	            return storedPipe;
	        }
	        if (lang_1.isPresent(storedPipe)) {
	            storedPipe.onDestroy();
	        }
	        var pipe = this.pipes.get(proto.name, context, this.ref);
	        this._writePipe(proto, pipe);
	        return pipe;
	    };
	    DynamicChangeDetector.prototype._readContext = function (proto) {
	        if (proto.contextIndex == -1) {
	            return this._getDirectiveFor(proto.directiveIndex);
	        }
	        else {
	            return this.values[proto.contextIndex];
	        }
	        return this.values[proto.contextIndex];
	    };
	    DynamicChangeDetector.prototype._readSelf = function (proto) { return this.values[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writeSelf = function (proto, value) { this.values[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._readPipe = function (proto) { return this.localPipes[proto.selfIndex]; };
	    DynamicChangeDetector.prototype._writePipe = function (proto, value) { this.localPipes[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._setChanged = function (proto, value) { this.changes[proto.selfIndex] = value; };
	    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function (proto) {
	        return proto.isPureFunction() && !this._argsChanged(proto);
	    };
	    DynamicChangeDetector.prototype._argsChanged = function (proto) {
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            if (this.changes[args[i]]) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DynamicChangeDetector.prototype._readArgs = function (proto) {
	        var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            res[i] = this.values[args[i]];
	        }
	        return res;
	    };
	    return DynamicChangeDetector;
	})(abstract_change_detector_1.AbstractChangeDetector);
	exports.DynamicChangeDetector = DynamicChangeDetector;
	function isSame(a, b) {
	    if (a === b)
	        return true;
	    if (a instanceof String && b instanceof String && a == b)
	        return true;
	    if ((a !== a) && (b !== b))
	        return true;
	    return false;
	}
	//# sourceMappingURL=dynamic_change_detector.js.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	/**
	 * Interface used by Angular to control the change detection strategy for an application.
	 *
	 * Angular implements the following change detection strategies by default:
	 *
	 * - {@link DynamicChangeDetection}: slower, but does not require `eval()`.
	 * - {@link JitChangeDetection}: faster, but requires `eval()`.
	 *
	 * In JavaScript, you should always use `JitChangeDetection`, unless you are in an environment that
	 *has
	 * [CSP](https://developer.mozilla.org/en-US/docs/Web/Security/CSP), such as a Chrome Extension.
	 *
	 * In Dart, use `DynamicChangeDetection` during development. The Angular transformer generates an
	 *analog to the
	 * `JitChangeDetection` strategy at compile time.
	 *
	 *
	 * See: {@link DynamicChangeDetection}, {@link JitChangeDetection},
	 * {@link PreGeneratedChangeDetection}
	 *
	 * # Example
	 * ```javascript
	 * bootstrap(MyApp, [bind(ChangeDetection).toClass(DynamicChangeDetection)]);
	 * ```
	 */
	var ChangeDetection = (function () {
	    function ChangeDetection() {
	    }
	    ChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return null;
	    };
	    ChangeDetection = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], ChangeDetection);
	    return ChangeDetection;
	})();
	exports.ChangeDetection = ChangeDetection;
	var ChangeDetectorDefinition = (function () {
	    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, directiveRecords) {
	        this.id = id;
	        this.strategy = strategy;
	        this.variableNames = variableNames;
	        this.bindingRecords = bindingRecords;
	        this.directiveRecords = directiveRecords;
	    }
	    return ChangeDetectorDefinition;
	})();
	exports.ChangeDetectorDefinition = ChangeDetectorDefinition;
	//# sourceMappingURL=interfaces.js.map

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(50);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	(function (TokenType) {
	    TokenType[TokenType["CHARACTER"] = 0] = "CHARACTER";
	    TokenType[TokenType["IDENTIFIER"] = 1] = "IDENTIFIER";
	    TokenType[TokenType["KEYWORD"] = 2] = "KEYWORD";
	    TokenType[TokenType["STRING"] = 3] = "STRING";
	    TokenType[TokenType["OPERATOR"] = 4] = "OPERATOR";
	    TokenType[TokenType["NUMBER"] = 5] = "NUMBER";
	})(exports.TokenType || (exports.TokenType = {}));
	var TokenType = exports.TokenType;
	var Lexer = (function () {
	    function Lexer() {
	    }
	    Lexer.prototype.tokenize = function (text) {
	        var scanner = new _Scanner(text);
	        var tokens = [];
	        var token = scanner.scanToken();
	        while (token != null) {
	            tokens.push(token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    Lexer = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Lexer);
	    return Lexer;
	})();
	exports.Lexer = Lexer;
	var Token = (function () {
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    Token.prototype.isCharacter = function (code) {
	        return (this.type == TokenType.CHARACTER && this.numValue == code);
	    };
	    Token.prototype.isNumber = function () { return (this.type == TokenType.NUMBER); };
	    Token.prototype.isString = function () { return (this.type == TokenType.STRING); };
	    Token.prototype.isOperator = function (operater) {
	        return (this.type == TokenType.OPERATOR && this.strValue == operater);
	    };
	    Token.prototype.isIdentifier = function () { return (this.type == TokenType.IDENTIFIER); };
	    Token.prototype.isKeyword = function () { return (this.type == TokenType.KEYWORD); };
	    Token.prototype.isKeywordVar = function () { return (this.type == TokenType.KEYWORD && this.strValue == "var"); };
	    Token.prototype.isKeywordNull = function () { return (this.type == TokenType.KEYWORD && this.strValue == "null"); };
	    Token.prototype.isKeywordUndefined = function () {
	        return (this.type == TokenType.KEYWORD && this.strValue == "undefined");
	    };
	    Token.prototype.isKeywordTrue = function () { return (this.type == TokenType.KEYWORD && this.strValue == "true"); };
	    Token.prototype.isKeywordIf = function () { return (this.type == TokenType.KEYWORD && this.strValue == "if"); };
	    Token.prototype.isKeywordElse = function () { return (this.type == TokenType.KEYWORD && this.strValue == "else"); };
	    Token.prototype.isKeywordFalse = function () { return (this.type == TokenType.KEYWORD && this.strValue == "false"); };
	    Token.prototype.toNumber = function () {
	        // -1 instead of NULL ok?
	        return (this.type == TokenType.NUMBER) ? this.numValue : -1;
	    };
	    Token.prototype.toString = function () {
	        switch (this.type) {
	            case TokenType.CHARACTER:
	            case TokenType.STRING:
	            case TokenType.IDENTIFIER:
	            case TokenType.KEYWORD:
	                return this.strValue;
	            case TokenType.NUMBER:
	                return this.numValue.toString();
	            default:
	                return null;
	        }
	    };
	    return Token;
	})();
	exports.Token = Token;
	function newCharacterToken(index, code) {
	    return new Token(index, TokenType.CHARACTER, code, lang_1.StringWrapper.fromCharCode(code));
	}
	function newIdentifierToken(index, text) {
	    return new Token(index, TokenType.IDENTIFIER, 0, text);
	}
	function newKeywordToken(index, text) {
	    return new Token(index, TokenType.KEYWORD, 0, text);
	}
	function newOperatorToken(index, text) {
	    return new Token(index, TokenType.OPERATOR, 0, text);
	}
	function newStringToken(index, text) {
	    return new Token(index, TokenType.STRING, 0, text);
	}
	function newNumberToken(index, n) {
	    return new Token(index, TokenType.NUMBER, n, "");
	}
	exports.EOF = new Token(-1, TokenType.CHARACTER, 0, "");
	exports.$EOF = 0;
	exports.$TAB = 9;
	exports.$LF = 10;
	exports.$VTAB = 11;
	exports.$FF = 12;
	exports.$CR = 13;
	exports.$SPACE = 32;
	exports.$BANG = 33;
	exports.$DQ = 34;
	exports.$HASH = 35;
	exports.$$ = 36;
	exports.$PERCENT = 37;
	exports.$AMPERSAND = 38;
	exports.$SQ = 39;
	exports.$LPAREN = 40;
	exports.$RPAREN = 41;
	exports.$STAR = 42;
	exports.$PLUS = 43;
	exports.$COMMA = 44;
	exports.$MINUS = 45;
	exports.$PERIOD = 46;
	exports.$SLASH = 47;
	exports.$COLON = 58;
	exports.$SEMICOLON = 59;
	exports.$LT = 60;
	exports.$EQ = 61;
	exports.$GT = 62;
	exports.$QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65, $E = 69, $Z = 90;
	exports.$LBRACKET = 91;
	exports.$BACKSLASH = 92;
	exports.$RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
	exports.$LBRACE = 123;
	exports.$BAR = 124;
	exports.$RBRACE = 125;
	var $NBSP = 160;
	var ScannerError = (function (_super) {
	    __extends(ScannerError, _super);
	    function ScannerError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    ScannerError.prototype.toString = function () { return this.message; };
	    return ScannerError;
	})(lang_1.BaseException);
	exports.ScannerError = ScannerError;
	var _Scanner = (function () {
	    function _Scanner(input) {
	        this.input = input;
	        this.peek = 0;
	        this.index = -1;
	        this.length = input.length;
	        this.advance();
	    }
	    _Scanner.prototype.advance = function () {
	        this.peek =
	            ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
	    };
	    _Scanner.prototype.scanToken = function () {
	        var input = this.input, length = this.length, peek = this.peek, index = this.index;
	        // Skip whitespace.
	        while (peek <= exports.$SPACE) {
	            if (++index >= length) {
	                peek = exports.$EOF;
	                break;
	            }
	            else {
	                peek = lang_1.StringWrapper.charCodeAt(input, index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var start = index;
	        switch (peek) {
	            case exports.$PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
	            case exports.$LPAREN:
	            case exports.$RPAREN:
	            case exports.$LBRACE:
	            case exports.$RBRACE:
	            case exports.$LBRACKET:
	            case exports.$RBRACKET:
	            case exports.$COMMA:
	            case exports.$COLON:
	            case exports.$SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case exports.$SQ:
	            case exports.$DQ:
	                return this.scanString();
	            case exports.$HASH:
	            case exports.$PLUS:
	            case exports.$MINUS:
	            case exports.$STAR:
	            case exports.$SLASH:
	            case exports.$PERCENT:
	            case $CARET:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$QUESTION:
	                return this.scanComplexOperator(start, '?', exports.$PERIOD, '.');
	            case exports.$LT:
	            case exports.$GT:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=');
	            case exports.$BANG:
	            case exports.$EQ:
	                return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=', exports.$EQ, '=');
	            case exports.$AMPERSAND:
	                return this.scanComplexOperator(start, '&', exports.$AMPERSAND, '&');
	            case exports.$BAR:
	                return this.scanComplexOperator(start, '|', exports.$BAR, '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
	        return null;
	    };
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        assert(this.peek == code);
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    _Scanner.prototype.scanOperator = function (start, str) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    /**
	     * Tokenize a 2/3 char long operator
	     *
	     * @param start start index in the expression
	     * @param one first symbol (always part of the operator)
	     * @param twoCode code point for the second symbol
	     * @param two second symbol (part of the operator when the second code point matches)
	     * @param threeCode code point for the third symbol
	     * @param three third symbol (part of the operator when provided and matches source expression)
	     * @returns {Token}
	     */
	    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
	        this.advance();
	        var str = one;
	        if (this.peek == twoCode) {
	            this.advance();
	            str += two;
	        }
	        if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
	            this.advance();
	            str += three;
	        }
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanIdentifier = function () {
	        assert(isIdentifierStart(this.peek));
	        var start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var str = this.input.substring(start, this.index);
	        if (collection_1.SetWrapper.has(KEYWORDS, str)) {
	            return newKeywordToken(start, str);
	        }
	        else {
	            return newIdentifierToken(start, str);
	        }
	    };
	    _Scanner.prototype.scanNumber = function (start) {
	        assert(isDigit(this.peek));
	        var simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {
	            }
	            else if (this.peek == exports.$PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var str = this.input.substring(start, this.index);
	        // TODO
	        var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    _Scanner.prototype.scanString = function () {
	        assert(this.peek == exports.$SQ || this.peek == exports.$DQ);
	        var start = this.index;
	        var quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var buffer;
	        var marker = this.index;
	        var input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == exports.$BACKSLASH) {
	                if (buffer == null)
	                    buffer = new lang_1.StringJoiner();
	                buffer.add(input.substring(marker, this.index));
	                this.advance();
	                var unescapedCode;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var hex = input.substring(this.index + 1, this.index + 5);
	                    try {
	                        unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
	                    }
	                    catch (e) {
	                        this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
	                marker = this.index;
	            }
	            else if (this.peek == exports.$EOF) {
	                this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        // Compute the unescaped string value.
	        var unescaped = last;
	        if (buffer != null) {
	            buffer.add(last);
	            unescaped = buffer.toString();
	        }
	        return newStringToken(start, unescaped);
	    };
	    _Scanner.prototype.error = function (message, offset) {
	        var position = this.index + offset;
	        throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	})();
	function isWhitespace(code) {
	    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
	}
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
	}
	function isIdentifierPart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
	        (code == $_) || (code == exports.$$);
	}
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	function isExponentSign(code) {
	    return code == exports.$MINUS || code == exports.$PLUS;
	}
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return exports.$LF;
	        case $f:
	            return exports.$FF;
	        case $r:
	            return exports.$CR;
	        case $t:
	            return exports.$TAB;
	        case $v:
	            return exports.$VTAB;
	        default:
	            return code;
	    }
	}
	var OPERATORS = collection_1.SetWrapper.createFromList([
	    '+',
	    '-',
	    '*',
	    '/',
	    '%',
	    '^',
	    '=',
	    '==',
	    '!=',
	    '===',
	    '!==',
	    '<',
	    '>',
	    '<=',
	    '>=',
	    '&&',
	    '||',
	    '&',
	    '|',
	    '!',
	    '?',
	    '#',
	    '?.'
	]);
	var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);
	//# sourceMappingURL=lexer.js.map

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var intl_1 = __webpack_require__(143);
	var collection_1 = __webpack_require__(2);
	var pipe_1 = __webpack_require__(11);
	// TODO: move to a global configable location along with other i18n components.
	var defaultLocale = 'en-US';
	/**
	 * Formats a date value to a string based on the requested format.
	 *
	 * # Usage
	 *
	 *     expression | date[:format]
	 *
	 * where `expression` is a date object or a number (milliseconds since UTC epoch) and
	 * `format` indicates which date/time components to include:
	 *
	 *  | Component | Symbol | Short Form   | Long Form         | Numeric   | 2-digit   |
	 *  |-----------|:------:|--------------|-------------------|-----------|-----------|
	 *  | era       |   G    | G (AD)       | GGGG (Anno Domini)| -         | -         |
	 *  | year      |   y    | -            | -                 | y (2015)  | yy (15)   |
	 *  | month     |   M    | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	 *  | day       |   d    | -            | -                 | d (3)     | dd (03)   |
	 *  | weekday   |   E    | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	 *  | hour      |   j    | -            | -                 | j (13)    | jj (13)   |
	 *  | hour12    |   h    | -            | -                 | h (1 PM)  | hh (01 PM)|
	 *  | hour24    |   H    | -            | -                 | H (13)    | HH (13)   |
	 *  | minute    |   m    | -            | -                 | m (5)     | mm (05)   |
	 *  | second    |   s    | -            | -                 | s (9)     | ss (09)   |
	 *  | timezone  |   z    | -            | z (Pacific Standard Time)| -  | -         |
	 *  | timezone  |   Z    | Z (GMT-8:00) | -                 | -         | -         |
	 *
	 * In javascript, only the components specified will be respected (not the ordering,
	 * punctuations, ...) and details of the the formatting will be dependent on the locale.
	 * On the other hand in Dart version, you can also include quoted text as well as some extra
	 * date/time components such as quarter. For more information see:
	 * https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/intl/intl.DateFormat.
	 *
	 * `format` can also be one of the following predefined formats:
	 *
	 *  - `'medium'`: equivalent to `'yMMMdjms'` (e.g. Sep 3, 2010, 12:05:08 PM for en-US)
	 *  - `'short'`: equivalent to `'yMdjm'` (e.g. 9/3/2010, 12:05 PM for en-US)
	 *  - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. Friday, September 3, 2010 for en-US)
	 *  - `'longDate'`: equivalent to `'yMMMMd'` (e.g. September 3, 2010)
	 *  - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. Sep 3, 2010 for en-US)
	 *  - `'shortDate'`: equivalent to `'yMd'` (e.g. 9/3/2010 for en-US)
	 *  - `'mediumTime'`: equivalent to `'jms'` (e.g. 12:05:08 PM for en-US)
	 *  - `'shortTime'`: equivalent to `'jm'` (e.g. 12:05 PM for en-US)
	 *
	 * Timezone of the formatted text will be the local system timezone of the end-users machine.
	 *
	 * # Examples
	 *
	 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	 * in the _local_ time and locale is 'en-US':
	 *
	 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	 */
	var DatePipe = (function (_super) {
	    __extends(DatePipe, _super);
	    function DatePipe() {
	        _super.apply(this, arguments);
	    }
	    DatePipe.prototype.transform = function (value, args) {
	        var pattern = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'mediumDate';
	        if (lang_1.isNumber(value)) {
	            value = lang_1.DateWrapper.fromMillis(value);
	        }
	        if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
	            pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
	        }
	        return intl_1.DateFormatter.format(value, defaultLocale, pattern);
	    };
	    DatePipe.prototype.supports = function (obj) { return lang_1.isDate(obj) || lang_1.isNumber(obj); };
	    DatePipe.prototype.create = function (cdRef) { return this; };
	    DatePipe._ALIASES = {
	        'medium': 'yMMMdjms',
	        'short': 'yMdjm',
	        'fullDate': 'yMMMMEEEEd',
	        'longDate': 'yMMMMd',
	        'mediumDate': 'yMMMd',
	        'shortDate': 'yMd',
	        'mediumTime': 'jms',
	        'shortTime': 'jm'
	    };
	    DatePipe = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DatePipe);
	    return DatePipe;
	})(pipe_1.BasePipe);
	exports.DatePipe = DatePipe;
	//# sourceMappingURL=date_pipe.js.map

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var pipe_1 = __webpack_require__(11);
	/**
	 * Implements json transforms to any object.
	 *
	 * # Example
	 *
	 * In this example we transform the user object to json.
	 *
	 *  ```
	 * @Component({
	 *   selector: "user-cmp"
	 * })
	 * @View({
	 *   template: "User: {{ user | json }}"
	 * })
	 * class Username {
	 *  user:Object
	 *  constructor() {
	 *    this.user = { name: "PatrickJS" };
	 *  }
	 * }
	 *
	 * ```
	 */
	var JsonPipe = (function (_super) {
	    __extends(JsonPipe, _super);
	    function JsonPipe() {
	        _super.apply(this, arguments);
	    }
	    JsonPipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        return lang_1.Json.stringify(value);
	    };
	    JsonPipe.prototype.create = function (cdRef) { return this; };
	    JsonPipe = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], JsonPipe);
	    return JsonPipe;
	})(pipe_1.BasePipe);
	exports.JsonPipe = JsonPipe;
	//# sourceMappingURL=json_pipe.js.map

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var pipe_1 = __webpack_require__(11);
	var KeyValueChangesFactory = (function () {
	    function KeyValueChangesFactory() {
	    }
	    KeyValueChangesFactory.prototype.supports = function (obj) { return KeyValueChanges.supportsObj(obj); };
	    KeyValueChangesFactory.prototype.create = function (cdRef) { return new KeyValueChanges(); };
	    KeyValueChangesFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], KeyValueChangesFactory);
	    return KeyValueChangesFactory;
	})();
	exports.KeyValueChangesFactory = KeyValueChangesFactory;
	var KeyValueChanges = (function (_super) {
	    __extends(KeyValueChanges, _super);
	    function KeyValueChanges() {
	        _super.apply(this, arguments);
	        this._records = new Map();
	        this._mapHead = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    KeyValueChanges.supportsObj = function (obj) { return obj instanceof Map || lang_1.isJsObject(obj); };
	    KeyValueChanges.prototype.supports = function (obj) { return KeyValueChanges.supportsObj(obj); };
	    KeyValueChanges.prototype.transform = function (map, args) {
	        if (args === void 0) { args = null; }
	        if (this.check(map)) {
	            return pipe_1.WrappedValue.wrap(this);
	        }
	        else {
	            return null;
	        }
	    };
	    Object.defineProperty(KeyValueChanges.prototype, "isDirty", {
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    KeyValueChanges.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachChangedItem = function (fn) {
	        var record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var records = this._records;
	        var oldSeqRecord = this._mapHead;
	        var lastOldSeqRecord = null;
	        var lastNewSeqRecord = null;
	        var seqChanged = false;
	        this._forEach(map, function (value, key) {
	            var newSeqRecord;
	            if (oldSeqRecord !== null && key === oldSeqRecord.key) {
	                newSeqRecord = oldSeqRecord;
	                if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
	                    oldSeqRecord.previousValue = oldSeqRecord.currentValue;
	                    oldSeqRecord.currentValue = value;
	                    _this._addToChanges(oldSeqRecord);
	                }
	            }
	            else {
	                seqChanged = true;
	                if (oldSeqRecord !== null) {
	                    oldSeqRecord._next = null;
	                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                    _this._addToRemovals(oldSeqRecord);
	                }
	                if (records.has(key)) {
	                    newSeqRecord = records.get(key);
	                }
	                else {
	                    newSeqRecord = new KVChangeRecord(key);
	                    records.set(key, newSeqRecord);
	                    newSeqRecord.currentValue = value;
	                    _this._addToAdditions(newSeqRecord);
	                }
	            }
	            if (seqChanged) {
	                if (_this._isInRemovals(newSeqRecord)) {
	                    _this._removeFromRemovals(newSeqRecord);
	                }
	                if (lastNewSeqRecord == null) {
	                    _this._mapHead = newSeqRecord;
	                }
	                else {
	                    lastNewSeqRecord._next = newSeqRecord;
	                }
	            }
	            lastOldSeqRecord = oldSeqRecord;
	            lastNewSeqRecord = newSeqRecord;
	            oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
	        });
	        this._truncate(lastOldSeqRecord, oldSeqRecord);
	        return this.isDirty;
	    };
	    KeyValueChanges.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            // Record the state of the mapping
	            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            // todo(vicb) once assert is supported
	            // assert(() {
	            //  var r = _changesHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextChanged;
	            //    r._nextChanged = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _additionsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextAdded;
	            //    r._nextAdded = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _removalsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextRemoved;
	            //    r._nextRemoved = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  return true;
	            //});
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    KeyValueChanges.prototype._truncate = function (lastRecord, record) {
	        while (record !== null) {
	            if (lastRecord === null) {
	                this._mapHead = null;
	            }
	            else {
	                lastRecord._next = null;
	            }
	            var nextRecord = record._next;
	            // todo(vicb) assert
	            // assert((() {
	            //  record._next = null;
	            //  return true;
	            //}));
	            this._addToRemovals(record);
	            lastRecord = record;
	            record = nextRecord;
	        }
	        for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	            rec.previousValue = rec.currentValue;
	            rec.currentValue = null;
	            collection_1.MapWrapper.delete(this._records, rec.key);
	        }
	    };
	    KeyValueChanges.prototype._isInRemovals = function (record) {
	        return record === this._removalsHead || record._nextRemoved !== null ||
	            record._prevRemoved !== null;
	    };
	    KeyValueChanges.prototype._addToRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._removalsHead === null) {
	            this._removalsHead = this._removalsTail = record;
	        }
	        else {
	            this._removalsTail._nextRemoved = record;
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = record;
	        }
	    };
	    KeyValueChanges.prototype._removeFromSeq = function (prev, record) {
	        var next = record._next;
	        if (prev === null) {
	            this._mapHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        // todo(vicb) assert
	        // assert((() {
	        //  record._next = null;
	        //  return true;
	        //})());
	    };
	    KeyValueChanges.prototype._removeFromRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        record._prevRemoved = record._nextRemoved = null;
	    };
	    KeyValueChanges.prototype._addToAdditions = function (record) {
	        // todo(vicb): assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    KeyValueChanges.prototype._addToChanges = function (record) {
	        // todo(vicb) assert
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    KeyValueChanges.prototype.toString = function () {
	        var items = [];
	        var previous = [];
	        var changes = [];
	        var additions = [];
	        var removals = [];
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            items.push(lang_1.stringify(record));
	        }
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            previous.push(lang_1.stringify(record));
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            changes.push(lang_1.stringify(record));
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            additions.push(lang_1.stringify(record));
	        }
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            removals.push(lang_1.stringify(record));
	        }
	        return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" +
	            "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" +
	            "removals: " + removals.join(', ') + "\n";
	    };
	    KeyValueChanges.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            collection_1.MapWrapper.forEach(obj, fn);
	        }
	        else {
	            collection_1.StringMapWrapper.forEach(obj, fn);
	        }
	    };
	    return KeyValueChanges;
	})(pipe_1.BasePipe);
	exports.KeyValueChanges = KeyValueChanges;
	var KVChangeRecord = (function () {
	    function KVChangeRecord(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        this._nextPrevious = null;
	        this._next = null;
	        this._nextAdded = null;
	        this._nextRemoved = null;
	        this._prevRemoved = null;
	        this._nextChanged = null;
	    }
	    KVChangeRecord.prototype.toString = function () {
	        return lang_1.looseIdentical(this.previousValue, this.currentValue) ?
	            lang_1.stringify(this.key) :
	            (lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' +
	                lang_1.stringify(this.currentValue) + ']');
	    };
	    return KVChangeRecord;
	})();
	exports.KVChangeRecord = KVChangeRecord;
	//# sourceMappingURL=keyvalue_changes.js.map

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var math_1 = __webpack_require__(184);
	/**
	 * Creates a new List or String containing only a prefix/suffix of the
	 * elements.
	 *
	 * The number of elements to return is specified by the `limitTo` parameter.
	 *
	 * # Usage
	 *
	 *     expression | limitTo:number
	 *
	 * Where the input expression is a [List] or [String], and `limitTo` is:
	 *
	 * - **a positive integer**: return _number_ items from the beginning of the list or string
	 * expression.
	 * - **a negative integer**: return _number_ items from the end of the list or string expression.
	 * - **`|limitTo|` greater than the size of the expression**: return the entire expression.
	 *
	 * When operating on a [List], the returned list is always a copy even when all
	 * the elements are being returned.
	 *
	 * # Examples
	 *
	 * ## List Example
	 *
	 * Assuming `var collection = ['a', 'b', 'c']`, this `ng-for` directive:
	 *
	 *     <li *ng-for="var i in collection | limitTo:2">{{i}}</li>
	 *
	 * produces the following:
	 *
	 *     <li>a</li>
	 *     <li>b</li>
	 *
	 * ## String Examples
	 *
	 *     {{ 'abcdefghij' | limitTo: 4 }}       // output is 'abcd'
	 *     {{ 'abcdefghij' | limitTo: -4 }}      // output is 'ghij'
	 *     {{ 'abcdefghij' | limitTo: -100 }}    // output is 'abcdefghij'
	 */
	var LimitToPipe = (function () {
	    function LimitToPipe() {
	    }
	    LimitToPipe.supportsObj = function (obj) { return lang_1.isString(obj) || lang_1.isArray(obj); };
	    LimitToPipe.prototype.supports = function (obj) { return LimitToPipe.supportsObj(obj); };
	    LimitToPipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(args) || args.length == 0) {
	            throw new lang_1.BaseException('limitTo pipe requires one argument');
	        }
	        var limit = args[0];
	        var left = 0, right = math_1.Math.min(limit, value.length);
	        if (limit < 0) {
	            left = math_1.Math.max(0, value.length + limit);
	            right = value.length;
	        }
	        if (lang_1.isString(value)) {
	            return lang_1.StringWrapper.substring(value, left, right);
	        }
	        return collection_1.ListWrapper.slice(value, left, right);
	    };
	    LimitToPipe.prototype.onDestroy = function () { };
	    return LimitToPipe;
	})();
	exports.LimitToPipe = LimitToPipe;
	var LimitToPipeFactory = (function () {
	    function LimitToPipeFactory() {
	    }
	    LimitToPipeFactory.prototype.supports = function (obj) { return LimitToPipe.supportsObj(obj); };
	    LimitToPipeFactory.prototype.create = function (cdRef) { return new LimitToPipe(); };
	    LimitToPipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], LimitToPipeFactory);
	    return LimitToPipeFactory;
	})();
	exports.LimitToPipeFactory = LimitToPipeFactory;
	//# sourceMappingURL=limit_to_pipe.js.map

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	/**
	 * Implements lowercase transforms to text.
	 *
	 * # Example
	 *
	 * In this example we transform the user text lowercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp"
	 * })
	 * @View({
	 *   template: "Username: {{ user | lowercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 */
	var LowerCasePipe = (function () {
	    function LowerCasePipe() {
	        this._latestValue = null;
	    }
	    LowerCasePipe.prototype.supports = function (str) { return lang_1.isString(str); };
	    LowerCasePipe.prototype.onDestroy = function () { this._latestValue = null; };
	    LowerCasePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (this._latestValue !== value) {
	            this._latestValue = value;
	            return lang_1.StringWrapper.toLowerCase(value);
	        }
	        else {
	            return this._latestValue;
	        }
	    };
	    return LowerCasePipe;
	})();
	exports.LowerCasePipe = LowerCasePipe;
	var LowerCaseFactory = (function () {
	    function LowerCaseFactory() {
	    }
	    LowerCaseFactory.prototype.supports = function (str) { return lang_1.isString(str); };
	    LowerCaseFactory.prototype.create = function (cdRef) { return new LowerCasePipe(); };
	    LowerCaseFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], LowerCaseFactory);
	    return LowerCaseFactory;
	})();
	exports.LowerCaseFactory = LowerCaseFactory;
	//# sourceMappingURL=lowercase_pipe.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var pipe_1 = __webpack_require__(11);
	var NullPipeFactory = (function () {
	    function NullPipeFactory() {
	    }
	    NullPipeFactory.prototype.supports = function (obj) { return NullPipe.supportsObj(obj); };
	    NullPipeFactory.prototype.create = function (cdRef) { return new NullPipe(); };
	    NullPipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], NullPipeFactory);
	    return NullPipeFactory;
	})();
	exports.NullPipeFactory = NullPipeFactory;
	var NullPipe = (function (_super) {
	    __extends(NullPipe, _super);
	    function NullPipe() {
	        _super.apply(this, arguments);
	        this.called = false;
	    }
	    NullPipe.supportsObj = function (obj) { return lang_1.isBlank(obj); };
	    NullPipe.prototype.supports = function (obj) { return NullPipe.supportsObj(obj); };
	    NullPipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (!this.called) {
	            this.called = true;
	            return pipe_1.WrappedValue.wrap(null);
	        }
	        else {
	            return null;
	        }
	    };
	    return NullPipe;
	})(pipe_1.BasePipe);
	exports.NullPipe = NullPipe;
	//# sourceMappingURL=null_pipe.js.map

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var intl_1 = __webpack_require__(143);
	var collection_1 = __webpack_require__(2);
	var pipe_1 = __webpack_require__(11);
	var defaultLocale = 'en-US';
	var _re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
	var NumberPipe = (function (_super) {
	    __extends(NumberPipe, _super);
	    function NumberPipe() {
	        _super.apply(this, arguments);
	    }
	    NumberPipe._format = function (value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        var minInt = 1, minFraction = 0, maxFraction = 3;
	        if (lang_1.isPresent(digits)) {
	            var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
	            if (lang_1.isBlank(parts)) {
	                throw new lang_1.BaseException(digits + " is not a valid digit info for number pipes");
	            }
	            if (lang_1.isPresent(parts[1])) {
	                minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (lang_1.isPresent(parts[3])) {
	                minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (lang_1.isPresent(parts[5])) {
	                maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return intl_1.NumberFormatter.format(value, defaultLocale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol
	        });
	    };
	    NumberPipe.prototype.supports = function (obj) { return lang_1.isNumber(obj); };
	    NumberPipe.prototype.create = function (cdRef) { return this; };
	    NumberPipe = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], NumberPipe);
	    return NumberPipe;
	})(pipe_1.BasePipe);
	exports.NumberPipe = NumberPipe;
	/**
	 * Formats a number as local text. i.e. group sizing and seperator and other locale-specific
	 * configurations are based on the active locale.
	 *
	 * # Usage
	 *
	 *     expression | number[:digitInfo]
	 *
	 * where `expression` is a number and `digitInfo` has the following format:
	 *
	 *     {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
	 *
	 * - minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.
	 * - minFractionDigits is the minimum number of digits after fraction. Defaults to 0.
	 * - maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.
	 *
	 * For more information on the acceptable range for each of these numbers and other
	 * details see your native internationalization library.
	 *
	 * # Examples
	 *
	 *     {{ 123 | number }}              // output is 123
	 *     {{ 123.1 | number: '.2-3' }}    // output is 123.10
	 *     {{ 1 | number: '2.2' }}         // output is 01.00
	 */
	var DecimalPipe = (function (_super) {
	    __extends(DecimalPipe, _super);
	    function DecimalPipe() {
	        _super.apply(this, arguments);
	    }
	    DecimalPipe.prototype.transform = function (value, args) {
	        var digits = collection_1.ListWrapper.first(args);
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.DECIMAL, digits);
	    };
	    DecimalPipe = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], DecimalPipe);
	    return DecimalPipe;
	})(NumberPipe);
	exports.DecimalPipe = DecimalPipe;
	/**
	 * Formats a number as local percent.
	 *
	 * # Usage
	 *
	 *     expression | percent[:digitInfo]
	 *
	 * For more information about `digitInfo` see {@link DecimalPipe}
	 */
	var PercentPipe = (function (_super) {
	    __extends(PercentPipe, _super);
	    function PercentPipe() {
	        _super.apply(this, arguments);
	    }
	    PercentPipe.prototype.transform = function (value, args) {
	        var digits = collection_1.ListWrapper.first(args);
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.PERCENT, digits);
	    };
	    PercentPipe = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], PercentPipe);
	    return PercentPipe;
	})(NumberPipe);
	exports.PercentPipe = PercentPipe;
	/**
	 * Formats a number as local currency.
	 *
	 * # Usage
	 *
	 *     expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]
	 *
	 * where `currencyCode` is the ISO 4217 currency code, such as "USD" for the US dollar and
	 * "EUR" for the euro. `symbolDisplay` is a boolean indicating whether to use the currency
	 * symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value
	 * is `false`.
	 * For more information about `digitInfo` see {@link DecimalPipe}
	 */
	var CurrencyPipe = (function (_super) {
	    __extends(CurrencyPipe, _super);
	    function CurrencyPipe() {
	        _super.apply(this, arguments);
	    }
	    CurrencyPipe.prototype.transform = function (value, args) {
	        var currencyCode = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'USD';
	        var symbolDisplay = lang_1.isPresent(args) && args.length > 1 ? args[1] : false;
	        var digits = lang_1.isPresent(args) && args.length > 2 ? args[2] : null;
	        return NumberPipe._format(value, intl_1.NumberFormatStyle.CURRENCY, digits, currencyCode, symbolDisplay);
	    };
	    CurrencyPipe = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], CurrencyPipe);
	    return CurrencyPipe;
	})(NumberPipe);
	exports.CurrencyPipe = CurrencyPipe;
	//# sourceMappingURL=number_pipe.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var async_1 = __webpack_require__(5);
	var lang_1 = __webpack_require__(1);
	var pipe_1 = __webpack_require__(11);
	/**
	 * Implements async bindings to Observable.
	 *
	 * # Example
	 *
	 * In this example we bind the description observable to the DOM. The async pipe will convert an
	 *observable to the
	 * latest value it emitted. It will also request a change detection check when a new value is
	 *emitted.
	 *
	 *  ```
	 * @Component({
	 *   selector: "task-cmp",
	 *   changeDetection: ON_PUSH
	 * })
	 * @View({
	 *   template: "Task Description {{ description | async }}"
	 * })
	 * class Task {
	 *  description:Observable<string>;
	 * }
	 *
	 * ```
	 */
	var ObservablePipe = (function () {
	    function ObservablePipe(_ref) {
	        this._ref = _ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._observable = null;
	    }
	    ObservablePipe.prototype.supports = function (obs) { return async_1.ObservableWrapper.isObservable(obs); };
	    ObservablePipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._subscription)) {
	            this._dispose();
	        }
	    };
	    ObservablePipe.prototype.transform = function (obs, args) {
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(this._subscription)) {
	            this._subscribe(obs);
	            return null;
	        }
	        if (obs !== this._observable) {
	            this._dispose();
	            return this.transform(obs);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        else {
	            this._latestReturnedValue = this._latestValue;
	            return pipe_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    ObservablePipe.prototype._subscribe = function (obs) {
	        var _this = this;
	        this._observable = obs;
	        this._subscription = async_1.ObservableWrapper.subscribe(obs, function (value) { return _this._updateLatestValue(value); }, function (e) { throw e; });
	    };
	    ObservablePipe.prototype._dispose = function () {
	        async_1.ObservableWrapper.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._observable = null;
	    };
	    ObservablePipe.prototype._updateLatestValue = function (value) {
	        this._latestValue = value;
	        this._ref.requestCheck();
	    };
	    return ObservablePipe;
	})();
	exports.ObservablePipe = ObservablePipe;
	/**
	 * Provides a factory for [ObervablePipe].
	 */
	var ObservablePipeFactory = (function () {
	    function ObservablePipeFactory() {
	    }
	    ObservablePipeFactory.prototype.supports = function (obs) { return async_1.ObservableWrapper.isObservable(obs); };
	    ObservablePipeFactory.prototype.create = function (cdRef) { return new ObservablePipe(cdRef); };
	    ObservablePipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], ObservablePipeFactory);
	    return ObservablePipeFactory;
	})();
	exports.ObservablePipeFactory = ObservablePipeFactory;
	//# sourceMappingURL=observable_pipe.js.map

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var pipe_1 = __webpack_require__(11);
	/**
	 * Implements async bindings to Promise.
	 *
	 * # Example
	 *
	 * In this example we bind the description promise to the DOM.
	 * The async pipe will convert a promise to the value with which it is resolved. It will also
	 * request a change detection check when the promise is resolved.
	 *
	 *  ```
	 * @Component({
	 *   selector: "task-cmp",
	 *   changeDetection: ON_PUSH
	 * })
	 * @View({
	 *   template: "Task Description {{ description | async }}"
	 * })
	 * class Task {
	 *   description:Promise<string>;
	 * }
	 *
	 * ```
	 */
	var PromisePipe = (function () {
	    function PromisePipe(_ref) {
	        this._ref = _ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	    }
	    PromisePipe.prototype.supports = function (promise) { return lang_1.isPromise(promise); };
	    PromisePipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._sourcePromise)) {
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._sourcePromise = null;
	        }
	    };
	    PromisePipe.prototype.transform = function (promise, args) {
	        var _this = this;
	        if (args === void 0) { args = null; }
	        if (lang_1.isBlank(this._sourcePromise)) {
	            this._sourcePromise = promise;
	            promise.then(function (val) {
	                if (_this._sourcePromise === promise) {
	                    _this._updateLatestValue(val);
	                }
	            });
	            return null;
	        }
	        if (promise !== this._sourcePromise) {
	            this._sourcePromise = null;
	            return this.transform(promise);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        }
	        else {
	            this._latestReturnedValue = this._latestValue;
	            return pipe_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    PromisePipe.prototype._updateLatestValue = function (value) {
	        this._latestValue = value;
	        this._ref.requestCheck();
	    };
	    return PromisePipe;
	})();
	exports.PromisePipe = PromisePipe;
	/**
	 * Provides a factory for [PromisePipe].
	 */
	var PromisePipeFactory = (function () {
	    function PromisePipeFactory() {
	    }
	    PromisePipeFactory.prototype.supports = function (promise) { return lang_1.isPromise(promise); };
	    PromisePipeFactory.prototype.create = function (cdRef) { return new PromisePipe(cdRef); };
	    PromisePipeFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], PromisePipeFactory);
	    return PromisePipeFactory;
	})();
	exports.PromisePipeFactory = PromisePipeFactory;
	//# sourceMappingURL=promise_pipe.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	/**
	 * Implements uppercase transforms to text.
	 *
	 * # Example
	 *
	 * In this example we transform the user text uppercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp"
	 * })
	 * @View({
	 *   template: "Username: {{ user | uppercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 */
	var UpperCasePipe = (function () {
	    function UpperCasePipe() {
	        this._latestValue = null;
	    }
	    UpperCasePipe.prototype.supports = function (str) { return lang_1.isString(str); };
	    UpperCasePipe.prototype.onDestroy = function () { this._latestValue = null; };
	    UpperCasePipe.prototype.transform = function (value, args) {
	        if (args === void 0) { args = null; }
	        if (this._latestValue !== value) {
	            this._latestValue = value;
	            return lang_1.StringWrapper.toUpperCase(value);
	        }
	        else {
	            return this._latestValue;
	        }
	    };
	    return UpperCasePipe;
	})();
	exports.UpperCasePipe = UpperCasePipe;
	var UpperCaseFactory = (function () {
	    function UpperCaseFactory() {
	    }
	    UpperCaseFactory.prototype.supports = function (str) { return lang_1.isString(str); };
	    UpperCaseFactory.prototype.create = function (cdRef) { return new UpperCasePipe(); };
	    UpperCaseFactory = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [])
	    ], UpperCaseFactory);
	    return UpperCaseFactory;
	})();
	exports.UpperCaseFactory = UpperCaseFactory;
	//# sourceMappingURL=uppercase_pipe.js.map

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var annotations_1 = __webpack_require__(47);
	exports.ComponentAnnotation = annotations_1.Component;
	exports.DirectiveAnnotation = annotations_1.Directive;
	exports.LifecycleEvent = annotations_1.LifecycleEvent;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(124);
	exports.QueryAnnotation = di_1.Query;
	exports.ViewQueryAnnotation = di_1.ViewQuery;
	exports.AttributeAnnotation = di_1.Attribute;
	//# sourceMappingURL=di.js.map

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var view_1 = __webpack_require__(125);
	exports.ViewAnnotation = view_1.View;
	//# sourceMappingURL=view.js.map

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var metadata_1 = __webpack_require__(27);
	var di_1 = __webpack_require__(3);
	/**
	 * Specifies that a constant attribute value should be injected.
	 *
	 * The directive can inject constant string literals of host element attributes.
	 *
	 * ## Example
	 *
	 * Suppose we have an `<input>` element and want to know its `type`.
	 *
	 * ```html
	 * <input type="text">
	 * ```
	 *
	 * A decorator can inject string literal `text` like so:
	 *
	 * ```javascript
	 * @Directive({
	 *   selector: `input'
	 * })
	 * class InputDirective {
	 *   constructor(@Attribute('type') type) {
	 *     // type would be `text` in this example
	 *   }
	 * }
	 * ```
	 */
	var Attribute = (function (_super) {
	    __extends(Attribute, _super);
	    function Attribute(attributeName) {
	        _super.call(this);
	        this.attributeName = attributeName;
	    }
	    Object.defineProperty(Attribute.prototype, "token", {
	        get: function () {
	            // Normally one would default a token to a type of an injected value but here
	            // the type of a variable is "string" and we can't use primitive type as a return value
	            // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
	            // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
	            // account.
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Attribute.prototype.toString = function () { return "@Attribute(" + lang_1.stringify(this.attributeName) + ")"; };
	    Attribute = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], Attribute);
	    return Attribute;
	})(metadata_1.DependencyMetadata);
	exports.Attribute = Attribute;
	/**
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * See {@link QueryList} for usage and example.
	 */
	var Query = (function (_super) {
	    __extends(Query, _super);
	    function Query(_selector, _a) {
	        var _b = (_a === void 0 ? {} : _a).descendants, descendants = _b === void 0 ? false : _b;
	        _super.call(this);
	        this._selector = _selector;
	        this.descendants = descendants;
	    }
	    Object.defineProperty(Query.prototype, "isViewQuery", {
	        get: function () { return false; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Query.prototype, "selector", {
	        get: function () { return di_1.resolveForwardRef(this._selector); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Query.prototype, "isVarBindingQuery", {
	        get: function () { return lang_1.isString(this.selector); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Query.prototype, "varBindings", {
	        get: function () { return lang_1.StringWrapper.split(this.selector, new RegExp(",")); },
	        enumerable: true,
	        configurable: true
	    });
	    Query.prototype.toString = function () { return "@Query(" + lang_1.stringify(this.selector) + ")"; };
	    Query = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], Query);
	    return Query;
	})(metadata_1.DependencyMetadata);
	exports.Query = Query;
	/**
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * See {@link QueryList} for usage and example.
	 */
	var ViewQuery = (function (_super) {
	    __extends(ViewQuery, _super);
	    function ViewQuery(_selector, _a) {
	        var _b = (_a === void 0 ? {} : _a).descendants, descendants = _b === void 0 ? false : _b;
	        _super.call(this, _selector, { descendants: descendants });
	    }
	    Object.defineProperty(ViewQuery.prototype, "isViewQuery", {
	        get: function () { return true; },
	        enumerable: true,
	        configurable: true
	    });
	    ViewQuery.prototype.toString = function () { return "@ViewQuery(" + lang_1.stringify(this.selector) + ")"; };
	    ViewQuery = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], ViewQuery);
	    return ViewQuery;
	})(Query);
	exports.ViewQuery = ViewQuery;
	//# sourceMappingURL=di.js.map

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	/**
	 * Declares the available HTML templates for an application.
	 *
	 * Each angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@View` annotation specifies the HTML template to use, and lists the directives that are active
	 * within the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link Component}.
	 *
	 * ## Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet'
	 * })
	 * @View({
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 */
	var View = (function () {
	    function View(_a) {
	        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, renderer = _b.renderer, styles = _b.styles, styleUrls = _b.styleUrls;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.styleUrls = styleUrls;
	        this.styles = styles;
	        this.directives = directives;
	        this.renderer = renderer;
	    }
	    View = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object])
	    ], View);
	    return View;
	})();
	exports.View = View;
	//# sourceMappingURL=view.js.map

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var compiler_1 = __webpack_require__(64);
	var view_manager_1 = __webpack_require__(49);
	var ComponentRef = (function () {
	    function ComponentRef(location, instance, dispose) {
	        this.location = location;
	        this.instance = instance;
	        this.dispose = dispose;
	    }
	    Object.defineProperty(ComponentRef.prototype, "hostView", {
	        get: function () { return this.location.parentView; },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentRef;
	})();
	exports.ComponentRef = ComponentRef;
	/**
	 * Service for dynamically loading a Component into an arbitrary position in the internal Angular
	 * application tree.
	 */
	var DynamicComponentLoader = (function () {
	    function DynamicComponentLoader(_compiler, _viewManager) {
	        this._compiler = _compiler;
	        this._viewManager = _viewManager;
	    }
	    /**
	     * Loads a root component that is placed at the first element that matches the component's
	     * selector.
	     *
	     * The loaded component receives injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadAsRoot = function (typeOrBinding, overrideSelector, injector) {
	        var _this = this;
	        return this._compiler.compileInHost(typeOrBinding)
	            .then(function (hostProtoViewRef) {
	            var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector);
	            var newLocation = _this._viewManager.getHostElement(hostViewRef);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () { _this._viewManager.destroyRootHostView(hostViewRef); };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    /**
	     * Loads a component into the component view of the provided ElementRef
	     * next to the element with the given name
	     * The loaded component receives
	     * injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadIntoLocation = function (typeOrBinding, hostLocation, anchorName, bindings) {
	        if (bindings === void 0) { bindings = null; }
	        return this.loadNextToLocation(typeOrBinding, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), bindings);
	    };
	    /**
	     * Loads a component next to the provided ElementRef. The loaded component receives
	     * injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadNextToLocation = function (typeOrBinding, location, bindings) {
	        var _this = this;
	        if (bindings === void 0) { bindings = null; }
	        return this._compiler.compileInHost(typeOrBinding)
	            .then(function (hostProtoViewRef) {
	            var viewContainer = _this._viewManager.getViewContainer(location);
	            var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, bindings);
	            var newLocation = _this._viewManager.getHostElement(hostViewRef);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function () {
	                var index = viewContainer.indexOf(hostViewRef);
	                if (index !== -1) {
	                    viewContainer.remove(index);
	                }
	            };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    DynamicComponentLoader = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [compiler_1.Compiler, view_manager_1.AppViewManager])
	    ], DynamicComponentLoader);
	    return DynamicComponentLoader;
	})();
	exports.DynamicComponentLoader = DynamicComponentLoader;
	//# sourceMappingURL=dynamic_component_loader.js.map

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var reflection_1 = __webpack_require__(9);
	var change_detection_1 = __webpack_require__(12);
	var renderApi = __webpack_require__(7);
	var view_1 = __webpack_require__(70);
	var element_injector_1 = __webpack_require__(67);
	var BindingRecordsCreator = (function () {
	    function BindingRecordsCreator() {
	        this._directiveRecordsMap = new Map();
	    }
	    BindingRecordsCreator.prototype.getBindingRecords = function (textBindings, elementBinders, allDirectiveMetadatas) {
	        var bindings = [];
	        this._createTextNodeRecords(bindings, textBindings);
	        for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; boundElementIndex++) {
	            var renderElementBinder = elementBinders[boundElementIndex];
	            this._createElementPropertyRecords(bindings, boundElementIndex, renderElementBinder);
	            this._createDirectiveRecords(bindings, boundElementIndex, renderElementBinder.directives, allDirectiveMetadatas);
	        }
	        return bindings;
	    };
	    BindingRecordsCreator.prototype.getDirectiveRecords = function (elementBinders, allDirectiveMetadatas) {
	        var directiveRecords = [];
	        for (var elementIndex = 0; elementIndex < elementBinders.length; ++elementIndex) {
	            var dirs = elementBinders[elementIndex].directives;
	            for (var dirIndex = 0; dirIndex < dirs.length; ++dirIndex) {
	                directiveRecords.push(this._getDirectiveRecord(elementIndex, dirIndex, allDirectiveMetadatas[dirs[dirIndex].directiveIndex]));
	            }
	        }
	        return directiveRecords;
	    };
	    BindingRecordsCreator.prototype._createTextNodeRecords = function (bindings, textBindings) {
	        for (var i = 0; i < textBindings.length; i++) {
	            bindings.push(change_detection_1.BindingRecord.createForTextNode(textBindings[i], i));
	        }
	    };
	    BindingRecordsCreator.prototype._createElementPropertyRecords = function (bindings, boundElementIndex, renderElementBinder) {
	        collection_1.ListWrapper.forEach(renderElementBinder.propertyBindings, function (binding) {
	            if (binding.type === renderApi.PropertyBindingType.PROPERTY) {
	                bindings.push(change_detection_1.BindingRecord.createForElementProperty(binding.astWithSource, boundElementIndex, binding.property));
	            }
	            else if (binding.type === renderApi.PropertyBindingType.ATTRIBUTE) {
	                bindings.push(change_detection_1.BindingRecord.createForElementAttribute(binding.astWithSource, boundElementIndex, binding.property));
	            }
	            else if (binding.type === renderApi.PropertyBindingType.CLASS) {
	                bindings.push(change_detection_1.BindingRecord.createForElementClass(binding.astWithSource, boundElementIndex, binding.property));
	            }
	            else if (binding.type === renderApi.PropertyBindingType.STYLE) {
	                bindings.push(change_detection_1.BindingRecord.createForElementStyle(binding.astWithSource, boundElementIndex, binding.property, binding.unit));
	            }
	        });
	    };
	    BindingRecordsCreator.prototype._createDirectiveRecords = function (bindings, boundElementIndex, directiveBinders, allDirectiveMetadatas) {
	        for (var i = 0; i < directiveBinders.length; i++) {
	            var directiveBinder = directiveBinders[i];
	            var directiveMetadata = allDirectiveMetadatas[directiveBinder.directiveIndex];
	            var directiveRecord = this._getDirectiveRecord(boundElementIndex, i, directiveMetadata);
	            // directive properties
	            collection_1.MapWrapper.forEach(directiveBinder.propertyBindings, function (astWithSource, propertyName) {
	                // TODO: these setters should eventually be created by change detection, to make
	                // it monomorphic!
	                var setter = reflection_1.reflector.setter(propertyName);
	                bindings.push(change_detection_1.BindingRecord.createForDirective(astWithSource, propertyName, setter, directiveRecord));
	            });
	            if (directiveRecord.callOnChange) {
	                bindings.push(change_detection_1.BindingRecord.createDirectiveOnChange(directiveRecord));
	            }
	            if (directiveRecord.callOnInit) {
	                bindings.push(change_detection_1.BindingRecord.createDirectiveOnInit(directiveRecord));
	            }
	            if (directiveRecord.callOnCheck) {
	                bindings.push(change_detection_1.BindingRecord.createDirectiveOnCheck(directiveRecord));
	            }
	        }
	        for (var i = 0; i < directiveBinders.length; i++) {
	            var directiveBinder = directiveBinders[i];
	            // host properties
	            collection_1.ListWrapper.forEach(directiveBinder.hostPropertyBindings, function (binding) {
	                var dirIndex = new change_detection_1.DirectiveIndex(boundElementIndex, i);
	                if (binding.type === renderApi.PropertyBindingType.PROPERTY) {
	                    bindings.push(change_detection_1.BindingRecord.createForHostProperty(dirIndex, binding.astWithSource, binding.property));
	                }
	                else if (binding.type === renderApi.PropertyBindingType.ATTRIBUTE) {
	                    bindings.push(change_detection_1.BindingRecord.createForHostAttribute(dirIndex, binding.astWithSource, binding.property));
	                }
	                else if (binding.type === renderApi.PropertyBindingType.CLASS) {
	                    bindings.push(change_detection_1.BindingRecord.createForHostClass(dirIndex, binding.astWithSource, binding.property));
	                }
	                else if (binding.type === renderApi.PropertyBindingType.STYLE) {
	                    bindings.push(change_detection_1.BindingRecord.createForHostStyle(dirIndex, binding.astWithSource, binding.property, binding.unit));
	                }
	            });
	        }
	    };
	    BindingRecordsCreator.prototype._getDirectiveRecord = function (boundElementIndex, directiveIndex, directiveMetadata) {
	        var id = boundElementIndex * 100 + directiveIndex;
	        if (!this._directiveRecordsMap.has(id)) {
	            this._directiveRecordsMap.set(id, new change_detection_1.DirectiveRecord({
	                directiveIndex: new change_detection_1.DirectiveIndex(boundElementIndex, directiveIndex),
	                callOnAllChangesDone: directiveMetadata.callOnAllChangesDone,
	                callOnChange: directiveMetadata.callOnChange,
	                callOnCheck: directiveMetadata.callOnCheck,
	                callOnInit: directiveMetadata.callOnInit,
	                changeDetection: directiveMetadata.changeDetection
	            }));
	        }
	        return this._directiveRecordsMap.get(id);
	    };
	    return BindingRecordsCreator;
	})();
	var ProtoViewFactory = (function () {
	    /**
	     * @private
	     */
	    function ProtoViewFactory(_changeDetection) {
	        this._changeDetection = _changeDetection;
	    }
	    ProtoViewFactory.prototype.createAppProtoViews = function (hostComponentBinding, rootRenderProtoView, allDirectives) {
	        var _this = this;
	        var allRenderDirectiveMetadata = collection_1.ListWrapper.map(allDirectives, function (directiveBinding) { return directiveBinding.metadata; });
	        var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
	        var nestedPvVariableBindings = _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex);
	        var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex);
	        var changeDetectorDefs = _getChangeDetectorDefinitions(hostComponentBinding.metadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
	        var protoChangeDetectors = collection_1.ListWrapper.map(changeDetectorDefs, function (changeDetectorDef) { return _this._changeDetection.createProtoChangeDetector(changeDetectorDef); });
	        var appProtoViews = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
	        collection_1.ListWrapper.forEach(nestedPvsWithIndex, function (pvWithIndex) {
	            var appProtoView = _createAppProtoView(pvWithIndex.renderProtoView, protoChangeDetectors[pvWithIndex.index], nestedPvVariableBindings[pvWithIndex.index], allDirectives);
	            if (lang_1.isPresent(pvWithIndex.parentIndex)) {
	                var parentView = appProtoViews[pvWithIndex.parentIndex];
	                parentView.elementBinders[pvWithIndex.boundElementIndex].nestedProtoView = appProtoView;
	            }
	            appProtoViews[pvWithIndex.index] = appProtoView;
	        });
	        return appProtoViews[0];
	    };
	    ProtoViewFactory = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.ChangeDetection])
	    ], ProtoViewFactory);
	    return ProtoViewFactory;
	})();
	exports.ProtoViewFactory = ProtoViewFactory;
	/**
	 * Returns the data needed to create ChangeDetectors
	 * for the given ProtoView and all nested ProtoViews.
	 */
	function getChangeDetectorDefinitions(hostComponentMetadata, rootRenderProtoView, allRenderDirectiveMetadata) {
	    var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
	    var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex);
	    return _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
	}
	exports.getChangeDetectorDefinitions = getChangeDetectorDefinitions;
	function _collectNestedProtoViews(renderProtoView, parentIndex, boundElementIndex, result) {
	    if (parentIndex === void 0) { parentIndex = null; }
	    if (boundElementIndex === void 0) { boundElementIndex = null; }
	    if (result === void 0) { result = null; }
	    if (lang_1.isBlank(result)) {
	        result = [];
	    }
	    // reserve the place in the array
	    result.push(new RenderProtoViewWithIndex(renderProtoView, result.length, parentIndex, boundElementIndex));
	    var currentIndex = result.length - 1;
	    var childBoundElementIndex = 0;
	    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function (elementBinder) {
	        if (lang_1.isPresent(elementBinder.nestedProtoView)) {
	            _collectNestedProtoViews(elementBinder.nestedProtoView, currentIndex, childBoundElementIndex, result);
	        }
	        childBoundElementIndex++;
	    });
	    return result;
	}
	function _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata) {
	    return collection_1.ListWrapper.map(nestedPvsWithIndex, function (pvWithIndex) {
	        var elementBinders = pvWithIndex.renderProtoView.elementBinders;
	        var bindingRecordsCreator = new BindingRecordsCreator();
	        var bindingRecords = bindingRecordsCreator.getBindingRecords(pvWithIndex.renderProtoView.textBindings, elementBinders, allRenderDirectiveMetadata);
	        var directiveRecords = bindingRecordsCreator.getDirectiveRecords(elementBinders, allRenderDirectiveMetadata);
	        var strategyName = change_detection_1.DEFAULT;
	        var typeString;
	        if (pvWithIndex.renderProtoView.type === renderApi.ViewType.COMPONENT) {
	            strategyName = hostComponentMetadata.changeDetection;
	            typeString = 'comp';
	        }
	        else if (pvWithIndex.renderProtoView.type === renderApi.ViewType.HOST) {
	            typeString = 'host';
	        }
	        else {
	            typeString = 'embedded';
	        }
	        var id = hostComponentMetadata.id + "_" + typeString + "_" + pvWithIndex.index;
	        var variableNames = nestedPvVariableNames[pvWithIndex.index];
	        return new change_detection_1.ChangeDetectorDefinition(id, strategyName, variableNames, bindingRecords, directiveRecords);
	    });
	}
	function _createAppProtoView(renderProtoView, protoChangeDetector, variableBindings, allDirectives) {
	    var elementBinders = renderProtoView.elementBinders;
	    // Embedded ProtoViews that contain `<ng-content>` will be merged into their parents and use
	    // a RenderFragmentRef. I.e. renderProtoView.transitiveNgContentCount > 0.
	    var protoView = new view_1.AppProtoView(renderProtoView.type, renderProtoView.transitiveNgContentCount > 0, renderProtoView.render, protoChangeDetector, variableBindings, createVariableLocations(elementBinders), renderProtoView.textBindings.length);
	    _createElementBinders(protoView, elementBinders, allDirectives);
	    _bindDirectiveEvents(protoView, elementBinders);
	    return protoView;
	}
	function _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex) {
	    return collection_1.ListWrapper.map(nestedPvsWithIndex, function (pvWithIndex) {
	        return _createVariableBindings(pvWithIndex.renderProtoView);
	    });
	}
	function _createVariableBindings(renderProtoView) {
	    var variableBindings = new Map();
	    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function (mappedName, varName) { variableBindings.set(varName, mappedName); });
	    return variableBindings;
	}
	function _collectNestedProtoViewsVariableNames(nestedPvsWithIndex) {
	    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
	    collection_1.ListWrapper.forEach(nestedPvsWithIndex, function (pvWithIndex) {
	        var parentVariableNames = lang_1.isPresent(pvWithIndex.parentIndex) ? nestedPvVariableNames[pvWithIndex.parentIndex] : null;
	        nestedPvVariableNames[pvWithIndex.index] =
	            _createVariableNames(parentVariableNames, pvWithIndex.renderProtoView);
	    });
	    return nestedPvVariableNames;
	}
	function _createVariableNames(parentVariableNames, renderProtoView) {
	    var res = lang_1.isBlank(parentVariableNames) ? [] : collection_1.ListWrapper.clone(parentVariableNames);
	    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function (mappedName, varName) { res.push(mappedName); });
	    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function (binder) {
	        collection_1.MapWrapper.forEach(binder.variableBindings, function (mappedName, varName) { res.push(mappedName); });
	    });
	    return res;
	}
	function createVariableLocations(elementBinders) {
	    var variableLocations = new Map();
	    for (var i = 0; i < elementBinders.length; i++) {
	        var binder = elementBinders[i];
	        collection_1.MapWrapper.forEach(binder.variableBindings, function (mappedName, varName) { variableLocations.set(mappedName, i); });
	    }
	    return variableLocations;
	}
	exports.createVariableLocations = createVariableLocations;
	function _createElementBinders(protoView, elementBinders, allDirectiveBindings) {
	    for (var i = 0; i < elementBinders.length; i++) {
	        var renderElementBinder = elementBinders[i];
	        var dirs = elementBinders[i].directives;
	        var parentPeiWithDistance = _findParentProtoElementInjectorWithDistance(i, protoView.elementBinders, elementBinders);
	        var directiveBindings = collection_1.ListWrapper.map(dirs, function (dir) { return allDirectiveBindings[dir.directiveIndex]; });
	        var componentDirectiveBinding = null;
	        if (directiveBindings.length > 0) {
	            if (directiveBindings[0].metadata.type === renderApi.DirectiveMetadata.COMPONENT_TYPE) {
	                componentDirectiveBinding = directiveBindings[0];
	            }
	        }
	        var protoElementInjector = _createProtoElementInjector(i, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings);
	        _createElementBinder(protoView, i, renderElementBinder, protoElementInjector, componentDirectiveBinding, directiveBindings);
	    }
	}
	function _findParentProtoElementInjectorWithDistance(binderIndex, elementBinders, renderElementBinders) {
	    var distance = 0;
	    do {
	        var renderElementBinder = renderElementBinders[binderIndex];
	        binderIndex = renderElementBinder.parentIndex;
	        if (binderIndex !== -1) {
	            distance += renderElementBinder.distanceToParent;
	            var elementBinder = elementBinders[binderIndex];
	            if (lang_1.isPresent(elementBinder.protoElementInjector)) {
	                return new ParentProtoElementInjectorWithDistance(elementBinder.protoElementInjector, distance);
	            }
	        }
	    } while (binderIndex !== -1);
	    return new ParentProtoElementInjectorWithDistance(null, 0);
	}
	function _createProtoElementInjector(binderIndex, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings) {
	    var protoElementInjector = null;
	    // Create a protoElementInjector for any element that either has bindings *or* has one
	    // or more var- defined. Elements with a var- defined need a their own element injector
	    // so that, when hydrating, $implicit can be set to the element.
	    var hasVariables = collection_1.MapWrapper.size(renderElementBinder.variableBindings) > 0;
	    if (directiveBindings.length > 0 || hasVariables) {
	        var directiveVariableBindings = createDirectiveVariableBindings(renderElementBinder, directiveBindings);
	        protoElementInjector =
	            element_injector_1.ProtoElementInjector.create(parentPeiWithDistance.protoElementInjector, binderIndex, directiveBindings, lang_1.isPresent(componentDirectiveBinding), parentPeiWithDistance.distance, directiveVariableBindings);
	        protoElementInjector.attributes = renderElementBinder.readAttributes;
	    }
	    return protoElementInjector;
	}
	function _createElementBinder(protoView, boundElementIndex, renderElementBinder, protoElementInjector, componentDirectiveBinding, directiveBindings) {
	    var parent = null;
	    if (renderElementBinder.parentIndex !== -1) {
	        parent = protoView.elementBinders[renderElementBinder.parentIndex];
	    }
	    var elBinder = protoView.bindElement(parent, renderElementBinder.distanceToParent, protoElementInjector, componentDirectiveBinding);
	    protoView.bindEvent(renderElementBinder.eventBindings, boundElementIndex, -1);
	    // variables
	    // The view's locals needs to have a full set of variable names at construction time
	    // in order to prevent new variables from being set later in the lifecycle. Since we don't want
	    // to actually create variable bindings for the $implicit bindings, add to the
	    // protoLocals manually.
	    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function (mappedName, varName) { protoView.protoLocals.set(mappedName, null); });
	    return elBinder;
	}
	function createDirectiveVariableBindings(renderElementBinder, directiveBindings) {
	    var directiveVariableBindings = new Map();
	    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function (templateName, exportAs) {
	        var dirIndex = _findDirectiveIndexByExportAs(renderElementBinder, directiveBindings, exportAs);
	        directiveVariableBindings.set(templateName, dirIndex);
	    });
	    return directiveVariableBindings;
	}
	exports.createDirectiveVariableBindings = createDirectiveVariableBindings;
	function _findDirectiveIndexByExportAs(renderElementBinder, directiveBindings, exportAs) {
	    var matchedDirectiveIndex = null;
	    var matchedDirective;
	    for (var i = 0; i < directiveBindings.length; ++i) {
	        var directive = directiveBindings[i];
	        if (_directiveExportAs(directive) == exportAs) {
	            if (lang_1.isPresent(matchedDirective)) {
	                throw new lang_1.BaseException("More than one directive have exportAs = '" + exportAs + "'. Directives: [" + matchedDirective.displayName + ", " + directive.displayName + "]");
	            }
	            matchedDirectiveIndex = i;
	            matchedDirective = directive;
	        }
	    }
	    if (lang_1.isBlank(matchedDirective) && exportAs !== "$implicit") {
	        throw new lang_1.BaseException("Cannot find directive with exportAs = '" + exportAs + "'");
	    }
	    return matchedDirectiveIndex;
	}
	function _directiveExportAs(directive) {
	    var directiveExportAs = directive.metadata.exportAs;
	    if (lang_1.isBlank(directiveExportAs) &&
	        directive.metadata.type === renderApi.DirectiveMetadata.COMPONENT_TYPE) {
	        return "$implicit";
	    }
	    else {
	        return directiveExportAs;
	    }
	}
	function _bindDirectiveEvents(protoView, elementBinders) {
	    for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; ++boundElementIndex) {
	        var dirs = elementBinders[boundElementIndex].directives;
	        for (var i = 0; i < dirs.length; i++) {
	            var directiveBinder = dirs[i];
	            // directive events
	            protoView.bindEvent(directiveBinder.eventBindings, boundElementIndex, i);
	        }
	    }
	}
	var RenderProtoViewWithIndex = (function () {
	    function RenderProtoViewWithIndex(renderProtoView, index, parentIndex, boundElementIndex) {
	        this.renderProtoView = renderProtoView;
	        this.index = index;
	        this.parentIndex = parentIndex;
	        this.boundElementIndex = boundElementIndex;
	    }
	    return RenderProtoViewWithIndex;
	})();
	var ParentProtoElementInjectorWithDistance = (function () {
	    function ParentProtoElementInjectorWithDistance(protoElementInjector, distance) {
	        this.protoElementInjector = protoElementInjector;
	        this.distance = distance;
	    }
	    return ParentProtoElementInjectorWithDistance;
	})();
	//# sourceMappingURL=proto_view_factory.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	/**
	 * Injectable Objects that contains a live list of child directives in the light Dom of a directive.
	 * The directives are kept in depth-first pre-order traversal of the DOM.
	 *
	 * In the future this class will implement an Observable interface.
	 * For now it uses a plain list of observable callbacks.
	 */
	var QueryList = (function () {
	    function QueryList() {
	        this._results = [];
	        this._callbacks = [];
	        this._dirty = false;
	    }
	    QueryList.prototype.reset = function (newList) {
	        this._results = newList;
	        this._dirty = true;
	    };
	    QueryList.prototype.add = function (obj) {
	        this._results.push(obj);
	        this._dirty = true;
	    };
	    QueryList.prototype.fireCallbacks = function () {
	        if (this._dirty) {
	            collection_1.ListWrapper.forEach(this._callbacks, function (c) { return c(); });
	            this._dirty = false;
	        }
	    };
	    QueryList.prototype.onChange = function (callback) { this._callbacks.push(callback); };
	    QueryList.prototype.removeCallback = function (callback) { collection_1.ListWrapper.remove(this._callbacks, callback); };
	    Object.defineProperty(QueryList.prototype, "length", {
	        get: function () { return this._results.length; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "first", {
	        get: function () { return collection_1.ListWrapper.first(this._results); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(QueryList.prototype, "last", {
	        get: function () { return collection_1.ListWrapper.last(this._results); },
	        enumerable: true,
	        configurable: true
	    });
	    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	    QueryList.prototype[Symbol.iterator] = function () { return this._results[Symbol.iterator](); };
	    return QueryList;
	})();
	exports.QueryList = QueryList;
	//# sourceMappingURL=query_list.js.map

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var view_ref_1 = __webpack_require__(21);
	var ViewContainerRef = (function () {
	    function ViewContainerRef(viewManager, element) {
	        this.viewManager = viewManager;
	        this.element = element;
	    }
	    ViewContainerRef.prototype._getViews = function () {
	        var vc = view_ref_1.internalView(this.element.parentView).viewContainers[this.element.boundElementIndex];
	        return lang_1.isPresent(vc) ? vc.views : [];
	    };
	    ViewContainerRef.prototype.clear = function () {
	        for (var i = this.length - 1; i >= 0; i--) {
	            this.remove(i);
	        }
	    };
	    ViewContainerRef.prototype.get = function (index) { return this._getViews()[index].ref; };
	    Object.defineProperty(ViewContainerRef.prototype, "length", {
	        get: function () { return this._getViews().length; },
	        enumerable: true,
	        configurable: true
	    });
	    // TODO(rado): profile and decide whether bounds checks should be added
	    // to the methods below.
	    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, atIndex) {
	        if (atIndex === void 0) { atIndex = -1; }
	        if (atIndex == -1)
	            atIndex = this.length;
	        return this.viewManager.createEmbeddedViewInContainer(this.element, atIndex, templateRef);
	    };
	    ViewContainerRef.prototype.createHostView = function (protoViewRef, atIndex, dynamicallyCreatedBindings) {
	        if (protoViewRef === void 0) { protoViewRef = null; }
	        if (atIndex === void 0) { atIndex = -1; }
	        if (dynamicallyCreatedBindings === void 0) { dynamicallyCreatedBindings = null; }
	        if (atIndex == -1)
	            atIndex = this.length;
	        return this.viewManager.createHostViewInContainer(this.element, atIndex, protoViewRef, dynamicallyCreatedBindings);
	    };
	    ViewContainerRef.prototype.insert = function (viewRef, atIndex) {
	        if (atIndex === void 0) { atIndex = -1; }
	        if (atIndex == -1)
	            atIndex = this.length;
	        return this.viewManager.attachViewInContainer(this.element, atIndex, viewRef);
	    };
	    ViewContainerRef.prototype.indexOf = function (viewRef) {
	        return collection_1.ListWrapper.indexOf(this._getViews(), view_ref_1.internalView(viewRef));
	    };
	    ViewContainerRef.prototype.remove = function (atIndex) {
	        if (atIndex === void 0) { atIndex = -1; }
	        if (atIndex == -1)
	            atIndex = this.length - 1;
	        this.viewManager.destroyViewInContainer(this.element, atIndex);
	        // view is intentionally not returned to the client.
	    };
	    /**
	     * The method can be used together with insert to implement a view move, i.e.
	     * moving the dom nodes while the directives in the view stay intact.
	     */
	    ViewContainerRef.prototype.detach = function (atIndex) {
	        if (atIndex === void 0) { atIndex = -1; }
	        if (atIndex == -1)
	            atIndex = this.length - 1;
	        return this.viewManager.detachViewInContainer(this.element, atIndex);
	    };
	    return ViewContainerRef;
	})();
	exports.ViewContainerRef = ViewContainerRef;
	//# sourceMappingURL=view_container_ref.js.map

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	/**
	 * Listener for view creation / destruction.
	 */
	var AppViewListener = (function () {
	    function AppViewListener() {
	    }
	    AppViewListener.prototype.viewCreated = function (view) { };
	    AppViewListener.prototype.viewDestroyed = function (view) { };
	    AppViewListener = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], AppViewListener);
	    return AppViewListener;
	})();
	exports.AppViewListener = AppViewListener;
	//# sourceMappingURL=view_listener.js.map

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var collection_1 = __webpack_require__(2);
	var eli = __webpack_require__(67);
	var lang_1 = __webpack_require__(1);
	var viewModule = __webpack_require__(70);
	var view_ref_1 = __webpack_require__(21);
	var element_ref_1 = __webpack_require__(68);
	var template_ref_1 = __webpack_require__(69);
	var api_1 = __webpack_require__(7);
	var AppViewManagerUtils = (function () {
	    function AppViewManagerUtils() {
	    }
	    AppViewManagerUtils.prototype.getComponentInstance = function (parentView, boundElementIndex) {
	        var eli = parentView.elementInjectors[boundElementIndex];
	        return eli.getComponent();
	    };
	    AppViewManagerUtils.prototype.createView = function (mergedParentViewProto, renderViewWithFragments, viewManager, renderer) {
	        var renderFragments = renderViewWithFragments.fragmentRefs;
	        var renderView = renderViewWithFragments.viewRef;
	        var elementCount = mergedParentViewProto.mergeMapping.renderElementIndices.length;
	        var viewCount = mergedParentViewProto.mergeMapping.nestedViewCountByViewIndex[0] + 1;
	        var elementRefs = collection_1.ListWrapper.createFixedSize(elementCount);
	        var viewContainers = collection_1.ListWrapper.createFixedSize(elementCount);
	        var preBuiltObjects = collection_1.ListWrapper.createFixedSize(elementCount);
	        var elementInjectors = collection_1.ListWrapper.createFixedSize(elementCount);
	        var views = collection_1.ListWrapper.createFixedSize(viewCount);
	        var elementOffset = 0;
	        var textOffset = 0;
	        var fragmentIdx = 0;
	        for (var viewOffset = 0; viewOffset < viewCount; viewOffset++) {
	            var hostElementIndex = mergedParentViewProto.mergeMapping.hostElementIndicesByViewIndex[viewOffset];
	            var parentView = lang_1.isPresent(hostElementIndex) ?
	                view_ref_1.internalView(elementRefs[hostElementIndex].parentView) :
	                null;
	            var protoView = lang_1.isPresent(hostElementIndex) ?
	                parentView.proto.elementBinders[hostElementIndex - parentView.elementOffset]
	                    .nestedProtoView :
	                mergedParentViewProto;
	            var renderFragment = null;
	            if (viewOffset === 0 || protoView.type === api_1.ViewType.EMBEDDED) {
	                renderFragment = renderFragments[fragmentIdx++];
	            }
	            var currentView = new viewModule.AppView(renderer, protoView, mergedParentViewProto.mergeMapping, viewOffset, elementOffset, textOffset, protoView.protoLocals, renderView, renderFragment);
	            views[viewOffset] = currentView;
	            var rootElementInjectors = [];
	            for (var binderIdx = 0; binderIdx < protoView.elementBinders.length; binderIdx++) {
	                var binder = protoView.elementBinders[binderIdx];
	                var boundElementIndex = elementOffset + binderIdx;
	                var elementInjector = null;
	                // elementInjectors and rootElementInjectors
	                var protoElementInjector = binder.protoElementInjector;
	                if (lang_1.isPresent(protoElementInjector)) {
	                    if (lang_1.isPresent(protoElementInjector.parent)) {
	                        var parentElementInjector = elementInjectors[elementOffset + protoElementInjector.parent.index];
	                        elementInjector = protoElementInjector.instantiate(parentElementInjector);
	                    }
	                    else {
	                        elementInjector = protoElementInjector.instantiate(null);
	                        rootElementInjectors.push(elementInjector);
	                    }
	                }
	                elementInjectors[boundElementIndex] = elementInjector;
	                // elementRefs
	                var el = new element_ref_1.ElementRef(currentView.ref, boundElementIndex, mergedParentViewProto.mergeMapping.renderElementIndices[boundElementIndex], renderer);
	                elementRefs[el.boundElementIndex] = el;
	                // preBuiltObjects
	                if (lang_1.isPresent(elementInjector)) {
	                    var templateRef = binder.hasEmbeddedProtoView() ? new template_ref_1.TemplateRef(el) : null;
	                    preBuiltObjects[boundElementIndex] =
	                        new eli.PreBuiltObjects(viewManager, currentView, el, templateRef);
	                }
	            }
	            currentView.init(protoView.protoChangeDetector.instantiate(currentView), elementInjectors, rootElementInjectors, preBuiltObjects, views, elementRefs, viewContainers);
	            if (lang_1.isPresent(parentView) && protoView.type === api_1.ViewType.COMPONENT) {
	                parentView.changeDetector.addShadowDomChild(currentView.changeDetector);
	            }
	            elementOffset += protoView.elementBinders.length;
	            textOffset += protoView.textBindingCount;
	        }
	        return views[0];
	    };
	    AppViewManagerUtils.prototype.hydrateRootHostView = function (hostView, injector) {
	        this._hydrateView(hostView, injector, null, new Object(), null);
	    };
	    // Misnomer: this method is attaching next to the view container.
	    AppViewManagerUtils.prototype.attachViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        parentView.changeDetector.addChild(view.changeDetector);
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        if (lang_1.isBlank(viewContainer)) {
	            viewContainer = new viewModule.AppViewContainer();
	            parentView.viewContainers[boundElementIndex] = viewContainer;
	        }
	        collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
	        var sibling;
	        if (atIndex == 0) {
	            sibling = null;
	        }
	        else {
	            sibling = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootElementInjectors);
	        }
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
	        for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
	            if (lang_1.isPresent(elementInjector.parent)) {
	                view.rootElementInjectors[i].linkAfter(elementInjector.parent, sibling);
	            }
	            else {
	                contextView.rootElementInjectors.push(view.rootElementInjectors[i]);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype.detachViewInContainer = function (parentView, boundElementIndex, atIndex) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        view.changeDetector.remove();
	        collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
	        for (var i = 0; i < view.rootElementInjectors.length; ++i) {
	            var inj = view.rootElementInjectors[i];
	            if (lang_1.isPresent(inj.parent)) {
	                inj.unlink();
	            }
	            else {
	                var removeIdx = collection_1.ListWrapper.indexOf(parentView.rootElementInjectors, inj);
	                if (removeIdx >= 0) {
	                    collection_1.ListWrapper.removeAt(parentView.rootElementInjectors, removeIdx);
	                }
	            }
	        }
	    };
	    AppViewManagerUtils.prototype.hydrateViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, imperativelyCreatedBindings) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
	        var injector = lang_1.isPresent(imperativelyCreatedBindings) ?
	            di_1.Injector.fromResolvedBindings(imperativelyCreatedBindings) :
	            null;
	        this._hydrateView(view, injector, elementInjector.getHost(), contextView.context, contextView.locals);
	    };
	    AppViewManagerUtils.prototype._hydrateView = function (initView, imperativelyCreatedInjector, hostElementInjector, context, parentLocals) {
	        var viewIdx = initView.viewOffset;
	        var endViewOffset = viewIdx + initView.mainMergeMapping.nestedViewCountByViewIndex[viewIdx];
	        while (viewIdx <= endViewOffset) {
	            var currView = initView.views[viewIdx];
	            var currProtoView = currView.proto;
	            if (currView !== initView && currView.proto.type === api_1.ViewType.EMBEDDED) {
	                // Don't hydrate components of embedded fragment views.
	                viewIdx += initView.mainMergeMapping.nestedViewCountByViewIndex[viewIdx] + 1;
	            }
	            else {
	                if (currView !== initView) {
	                    // hydrate a nested component view
	                    imperativelyCreatedInjector = null;
	                    parentLocals = null;
	                    var hostElementIndex = initView.mainMergeMapping.hostElementIndicesByViewIndex[viewIdx];
	                    hostElementInjector = initView.elementInjectors[hostElementIndex];
	                    context = hostElementInjector.getComponent();
	                }
	                currView.context = context;
	                currView.locals.parent = parentLocals;
	                var binders = currProtoView.elementBinders;
	                for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	                    var boundElementIndex = binderIdx + currView.elementOffset;
	                    var elementInjector = initView.elementInjectors[boundElementIndex];
	                    if (lang_1.isPresent(elementInjector)) {
	                        elementInjector.hydrate(imperativelyCreatedInjector, hostElementInjector, currView.preBuiltObjects[boundElementIndex]);
	                        this._populateViewLocals(currView, elementInjector, boundElementIndex);
	                        this._setUpEventEmitters(currView, elementInjector, boundElementIndex);
	                        this._setUpHostActions(currView, elementInjector, boundElementIndex);
	                    }
	                }
	                var pipes = this._getPipes(imperativelyCreatedInjector, hostElementInjector);
	                currView.changeDetector.hydrate(currView.context, currView.locals, currView, pipes);
	                viewIdx++;
	            }
	        }
	    };
	    AppViewManagerUtils.prototype._getPipes = function (imperativelyCreatedInjector, hostElementInjector) {
	        var pipesKey = eli.StaticKeys.instance().pipesKey;
	        if (lang_1.isPresent(imperativelyCreatedInjector))
	            return imperativelyCreatedInjector.getOptional(pipesKey);
	        if (lang_1.isPresent(hostElementInjector))
	            return hostElementInjector.getPipes();
	        return null;
	    };
	    AppViewManagerUtils.prototype._populateViewLocals = function (view, elementInjector, boundElementIdx) {
	        if (lang_1.isPresent(elementInjector.getDirectiveVariableBindings())) {
	            collection_1.MapWrapper.forEach(elementInjector.getDirectiveVariableBindings(), function (directiveIndex, name) {
	                if (lang_1.isBlank(directiveIndex)) {
	                    view.locals.set(name, view.elementRefs[boundElementIdx].nativeElement);
	                }
	                else {
	                    view.locals.set(name, elementInjector.getDirectiveAtIndex(directiveIndex));
	                }
	            });
	        }
	    };
	    AppViewManagerUtils.prototype._setUpEventEmitters = function (view, elementInjector, boundElementIndex) {
	        var emitters = elementInjector.getEventEmitterAccessors();
	        for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
	            var directiveEmitters = emitters[directiveIndex];
	            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	            for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
	                var eventEmitterAccessor = directiveEmitters[eventIndex];
	                eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype._setUpHostActions = function (view, elementInjector, boundElementIndex) {
	        var hostActions = elementInjector.getHostActionAccessors();
	        for (var directiveIndex = 0; directiveIndex < hostActions.length; ++directiveIndex) {
	            var directiveHostActions = hostActions[directiveIndex];
	            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	            for (var index = 0; index < directiveHostActions.length; ++index) {
	                var hostActionAccessor = directiveHostActions[index];
	                hostActionAccessor.subscribe(view, boundElementIndex, directive);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype.dehydrateView = function (initView) {
	        var endViewOffset = initView.viewOffset +
	            initView.mainMergeMapping.nestedViewCountByViewIndex[initView.viewOffset];
	        for (var viewIdx = initView.viewOffset; viewIdx <= endViewOffset; viewIdx++) {
	            var currView = initView.views[viewIdx];
	            if (currView.hydrated()) {
	                if (lang_1.isPresent(currView.locals)) {
	                    currView.locals.clearValues();
	                }
	                currView.context = null;
	                currView.changeDetector.dehydrate();
	                var binders = currView.proto.elementBinders;
	                for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	                    var eli = initView.elementInjectors[currView.elementOffset + binderIdx];
	                    if (lang_1.isPresent(eli)) {
	                        eli.dehydrate();
	                    }
	                }
	            }
	        }
	    };
	    AppViewManagerUtils = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], AppViewManagerUtils);
	    return AppViewManagerUtils;
	})();
	exports.AppViewManagerUtils = AppViewManagerUtils;
	//# sourceMappingURL=view_manager_utils.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var di_1 = __webpack_require__(3);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	exports.APP_VIEW_POOL_CAPACITY = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppViewPool.viewPoolCapacity'));
	var AppViewPool = (function () {
	    function AppViewPool(poolCapacityPerProtoView) {
	        this._pooledViewsPerProtoView = new collection_1.Map();
	        this._poolCapacityPerProtoView = poolCapacityPerProtoView;
	    }
	    AppViewPool.prototype.getView = function (protoView) {
	        var pooledViews = this._pooledViewsPerProtoView.get(protoView);
	        if (lang_1.isPresent(pooledViews) && pooledViews.length > 0) {
	            return collection_1.ListWrapper.removeLast(pooledViews);
	        }
	        return null;
	    };
	    AppViewPool.prototype.returnView = function (view) {
	        var protoView = view.proto;
	        var pooledViews = this._pooledViewsPerProtoView.get(protoView);
	        if (lang_1.isBlank(pooledViews)) {
	            pooledViews = [];
	            this._pooledViewsPerProtoView.set(protoView, pooledViews);
	        }
	        var haveRemainingCapacity = pooledViews.length < this._poolCapacityPerProtoView;
	        if (haveRemainingCapacity) {
	            pooledViews.push(view);
	        }
	        return haveRemainingCapacity;
	    };
	    AppViewPool = __decorate([
	        di_1.Injectable(),
	        __param(0, di_1.Inject(exports.APP_VIEW_POOL_CAPACITY)), 
	        __metadata('design:paramtypes', [Object])
	    ], AppViewPool);
	    return AppViewPool;
	})();
	exports.AppViewPool = AppViewPool;
	//# sourceMappingURL=view_pool.js.map

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var view_1 = __webpack_require__(125);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var reflection_1 = __webpack_require__(9);
	var ViewResolver = (function () {
	    function ViewResolver() {
	        this._cache = new collection_1.Map();
	    }
	    ViewResolver.prototype.resolve = function (component) {
	        var view = this._cache.get(component);
	        if (lang_1.isBlank(view)) {
	            view = this._resolve(component);
	            this._cache.set(component, view);
	        }
	        return view;
	    };
	    ViewResolver.prototype._resolve = function (component) {
	        var annotations = reflection_1.reflector.annotations(component);
	        for (var i = 0; i < annotations.length; i++) {
	            var annotation = annotations[i];
	            if (annotation instanceof view_1.View) {
	                return annotation;
	            }
	        }
	        throw new lang_1.BaseException("No View annotation found on component " + lang_1.stringify(component));
	    };
	    ViewResolver = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ViewResolver);
	    return ViewResolver;
	})();
	exports.ViewResolver = ViewResolver;
	//# sourceMappingURL=view_resolver.js.map

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var dom_adapter_1 = __webpack_require__(6);
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
	 * intercept error handling,
	 * write a custom exception handler that replaces this default as appropriate for your app.
	 *
	 * # Example
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'my-app',
	 *   viewInjector: [
	 *     bind(ExceptionHandler).toClass(MyExceptionHandler)
	 *   ]
	 * })
	 * @View(...)
	 * class MyApp { ... }
	 *
	 *
	 * class MyExceptionHandler implements ExceptionHandler {
	 *   call(error, stackTrace = null, reason = null) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * ```
	 */
	var ExceptionHandler = (function () {
	    function ExceptionHandler() {
	    }
	    ExceptionHandler.prototype.call = function (error, stackTrace, reason) {
	        if (stackTrace === void 0) { stackTrace = null; }
	        if (reason === void 0) { reason = null; }
	        var longStackTrace = collection_1.isListLikeIterable(stackTrace) ? collection_1.ListWrapper.join(stackTrace, "\n\n") : stackTrace;
	        var reasonStr = lang_1.isPresent(reason) ? "\n" + reason : '';
	        dom_adapter_1.DOM.logError("" + error + reasonStr + "\nSTACKTRACE:\n" + longStackTrace);
	    };
	    ExceptionHandler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], ExceptionHandler);
	    return ExceptionHandler;
	})();
	exports.ExceptionHandler = ExceptionHandler;
	//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	/**
	 * A wrapper around zones that lets you schedule tasks after it has executed a task.
	 *
	 * The wrapper maintains an "inner" and an "mount" `Zone`. The application code will executes
	 * in the "inner" zone unless `runOutsideAngular` is explicitely called.
	 *
	 * A typical application will create a singleton `NgZone`. The outer `Zone` is a fork of the root
	 * `Zone`. The default `onTurnDone` runs the Angular change detection.
	 */
	var NgZone = (function () {
	    /**
	     * Associates with this
	     *
	     * - a "root" zone, which the one that instantiated this.
	     * - an "inner" zone, which is a child of the root zone.
	     *
	     * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be
	     *               enabled in development mode as they significantly impact perf.
	     */
	    function NgZone(_a) {
	        var enableLongStackTrace = _a.enableLongStackTrace;
	        this._inVmTurnDone = false;
	        this._onTurnStart = null;
	        this._onTurnDone = null;
	        this._onEventDone = null;
	        this._onErrorHandler = null;
	        this._pendingMicrotasks = 0;
	        this._hasExecutedCodeInInnerZone = false;
	        this._nestedRun = 0;
	        if (lang_1.global.zone) {
	            this._disabled = false;
	            this._mountZone = lang_1.global.zone;
	            this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
	        }
	        else {
	            this._disabled = true;
	            this._mountZone = null;
	        }
	    }
	    /**
	     * Sets the zone hook that is called just before Angular event turn starts.
	     * It is called once per browser event.
	     */
	    NgZone.prototype.overrideOnTurnStart = function (onTurnStartFn) {
	        this._onTurnStart = lang_1.normalizeBlank(onTurnStartFn);
	    };
	    /**
	     * Sets the zone hook that is called immediately after Angular processes
	     * all pending microtasks.
	     */
	    NgZone.prototype.overrideOnTurnDone = function (onTurnDoneFn) {
	        this._onTurnDone = lang_1.normalizeBlank(onTurnDoneFn);
	    };
	    /**
	     * Sets the zone hook that is called immediately after the last turn in
	     * an event completes. At this point Angular will no longer attempt to
	     * sync the UI. Any changes to the data model will not be reflected in the
	     * DOM. {@link onEventDoneFn} is executed outside Angular zone.
	     *
	     * This hook is useful for validating application state (e.g. in a test).
	     */
	    NgZone.prototype.overrideOnEventDone = function (onEventDoneFn) {
	        this._onEventDone = lang_1.normalizeBlank(onEventDoneFn);
	    };
	    /**
	     * Sets the zone hook that is called when an error is uncaught in the
	     * Angular zone. The first argument is the error. The second argument is
	     * the stack trace.
	     */
	    NgZone.prototype.overrideOnErrorHandler = function (errorHandlingFn) {
	        this._onErrorHandler = lang_1.normalizeBlank(errorHandlingFn);
	    };
	    /**
	     * Runs `fn` in the inner zone and returns whatever it returns.
	     *
	     * In a typical app where the inner zone is the Angular zone, this allows one to make use of the
	     * Angular's auto digest mechanism.
	     *
	     * ```
	     * var zone: NgZone = [ref to the application zone];
	     *
	     * zone.run(() => {
	     *   // the change detection will run after this function and the microtasks it enqueues have
	     * executed.
	     * });
	     * ```
	     */
	    NgZone.prototype.run = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            return this._innerZone.run(fn);
	        }
	    };
	    /**
	     * Runs `fn` in the outer zone and returns whatever it returns.
	     *
	     * In a typical app where the inner zone is the Angular zone, this allows one to escape Angular's
	     * auto-digest mechanism.
	     *
	     * ```
	     * var zone: NgZone = [ref to the application zone];
	     *
	     * zone.runOusideAngular(() => {
	     *   element.onClick(() => {
	     *     // Clicking on the element would not trigger the change detection
	     *   });
	     * });
	     * ```
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) {
	        if (this._disabled) {
	            return fn();
	        }
	        else {
	            return this._mountZone.run(fn);
	        }
	    };
	    NgZone.prototype._createInnerZone = function (zone, enableLongStackTrace) {
	        var ngZone = this;
	        var errorHandling;
	        if (enableLongStackTrace) {
	            errorHandling = collection_1.StringMapWrapper.merge(Zone.longStackTraceZone, { onError: function (e) { ngZone._onError(this, e); } });
	        }
	        else {
	            errorHandling = { onError: function (e) { ngZone._onError(this, e); } };
	        }
	        return zone.fork(errorHandling)
	            .fork({
	            '$run': function (parentRun) {
	                return function () {
	                    try {
	                        ngZone._nestedRun++;
	                        if (!ngZone._hasExecutedCodeInInnerZone) {
	                            ngZone._hasExecutedCodeInInnerZone = true;
	                            if (ngZone._onTurnStart) {
	                                parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
	                            }
	                        }
	                        return parentRun.apply(this, arguments);
	                    }
	                    finally {
	                        ngZone._nestedRun--;
	                        // If there are no more pending microtasks, we are at the end of a VM turn (or in
	                        // onTurnStart)
	                        // _nestedRun will be 0 at the end of a macrotasks (it could be > 0 when there are
	                        // nested calls
	                        // to run()).
	                        if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0 &&
	                            !this._inVmTurnDone) {
	                            if (ngZone._onTurnDone && ngZone._hasExecutedCodeInInnerZone) {
	                                try {
	                                    this._inVmTurnDone = true;
	                                    parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
	                                    if (ngZone._pendingMicrotasks === 0 && lang_1.isPresent(ngZone._onEventDone)) {
	                                        ngZone.runOutsideAngular(ngZone._onEventDone);
	                                    }
	                                }
	                                finally {
	                                    this._inVmTurnDone = false;
	                                    ngZone._hasExecutedCodeInInnerZone = false;
	                                }
	                            }
	                        }
	                    }
	                };
	            },
	            '$scheduleMicrotask': function (parentScheduleMicrotask) {
	                return function (fn) {
	                    ngZone._pendingMicrotasks++;
	                    var microtask = function () {
	                        try {
	                            fn();
	                        }
	                        finally {
	                            ngZone._pendingMicrotasks--;
	                        }
	                    };
	                    parentScheduleMicrotask.call(this, microtask);
	                };
	            },
	            _innerZone: true
	        });
	    };
	    NgZone.prototype._onError = function (zone, e) {
	        if (lang_1.isPresent(this._onErrorHandler)) {
	            var trace = [lang_1.normalizeBlank(e.stack)];
	            while (zone && zone.constructedAtException) {
	                trace.push(zone.constructedAtException.get());
	                zone = zone.parent;
	            }
	            this._onErrorHandler(e, trace);
	        }
	        else {
	            console.log('## _onError ##');
	            console.log(e.stack);
	            throw e;
	        }
	    };
	    return NgZone;
	})();
	exports.NgZone = NgZone;
	//# sourceMappingURL=ng_zone.js.map

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var reflection_1 = __webpack_require__(9);
	var key_1 = __webpack_require__(72);
	var metadata_1 = __webpack_require__(27);
	var exceptions_1 = __webpack_require__(71);
	var forward_ref_1 = __webpack_require__(51);
	/**
	 * @private
	 */
	var Dependency = (function () {
	    function Dependency(key, optional, visibility, properties) {
	        this.key = key;
	        this.optional = optional;
	        this.visibility = visibility;
	        this.properties = properties;
	    }
	    Dependency.fromKey = function (key) {
	        return new Dependency(key, false, metadata_1.DEFAULT_VISIBILITY, []);
	    };
	    return Dependency;
	})();
	exports.Dependency = Dependency;
	var _EMPTY_LIST = lang_1.CONST_EXPR([]);
	/**
	 * Describes how the {@link Injector} should instantiate a given token.
	 *
	 * See {@link bind}.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   new Binding(String, { toValue: 'Hello' })
	 * ]);
	 *
	 * expect(injector.get(String)).toEqual('Hello');
	 * ```
	 */
	var Binding = (function () {
	    function Binding(token, _a) {
	        var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps;
	        this.token = token;
	        this.toClass = toClass;
	        this.toValue = toValue;
	        this.toAlias = toAlias;
	        this.toFactory = toFactory;
	        this.dependencies = deps;
	    }
	    /**
	     * Converts the {@link Binding} into {@link ResolvedBinding}.
	     *
	     * {@link Injector} internally only uses {@link ResolvedBinding}, {@link Binding} contains
	     * convenience binding syntax.
	     */
	    Binding.prototype.resolve = function () {
	        var _this = this;
	        var factoryFn;
	        var resolvedDeps;
	        if (lang_1.isPresent(this.toClass)) {
	            var toClass = forward_ref_1.resolveForwardRef(this.toClass);
	            factoryFn = reflection_1.reflector.factory(toClass);
	            resolvedDeps = _dependenciesFor(toClass);
	        }
	        else if (lang_1.isPresent(this.toAlias)) {
	            factoryFn = function (aliasInstance) { return aliasInstance; };
	            resolvedDeps = [Dependency.fromKey(key_1.Key.get(this.toAlias))];
	        }
	        else if (lang_1.isPresent(this.toFactory)) {
	            factoryFn = this.toFactory;
	            resolvedDeps = _constructDependencies(this.toFactory, this.dependencies);
	        }
	        else {
	            factoryFn = function () { return _this.toValue; };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedBinding(key_1.Key.get(this.token), factoryFn, resolvedDeps);
	    };
	    Binding = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [Object, Object])
	    ], Binding);
	    return Binding;
	})();
	exports.Binding = Binding;
	/**
	 * An internal resolved representation of a {@link Binding} used by the {@link Injector}.
	 *
	 * A {@link Binding} is resolved when it has a factory function. Binding to a class, alias, or
	 * value, are just convenience methods, as {@link Injector} only operates on calling factory
	 * functions.
	 */
	var ResolvedBinding = (function () {
	    function ResolvedBinding(
	        /**
	         * A key, usually a `Type`.
	         */
	        key, 
	        /**
	         * Factory function which can return an instance of an object represented by a key.
	         */
	        factory, 
	        /**
	         * Arguments (dependencies) to the `factory` function.
	         */
	        dependencies) {
	        this.key = key;
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedBinding;
	})();
	exports.ResolvedBinding = ResolvedBinding;
	/**
	 * Provides an API for imperatively constructing {@link Binding}s.
	 *
	 * This is only relevant for JavaScript. See {@link BindingBuilder}.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * bind(MyInterface).toClass(MyClass)
	 *
	 * ```
	 */
	function bind(token) {
	    return new BindingBuilder(token);
	}
	exports.bind = bind;
	/**
	 * Helper class for the {@link bind} function.
	 */
	var BindingBuilder = (function () {
	    function BindingBuilder(token) {
	        this.token = token;
	    }
	    /**
	     * Binds an interface to an implementation / subclass.
	     *
	     * ## Example
	     *
	     * Because `toAlias` and `toClass` are often confused, the example contains both use cases for
	     * easy comparison.
	     *
	     * ```javascript
	     *
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toClass(Car)
	     * ]);
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toAlias(Car)
	     * ]);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    BindingBuilder.prototype.toClass = function (type) { return new Binding(this.token, { toClass: type }); };
	    /**
	     * Binds a key to a value.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(String).toValue('Hello')
	     * ]);
	     *
	     * expect(injector.get(String)).toEqual('Hello');
	     * ```
	     */
	    BindingBuilder.prototype.toValue = function (value) { return new Binding(this.token, { toValue: value }); };
	    /**
	     * Binds a key to the alias for an existing key.
	     *
	     * An alias means that we will return the same instance as if the alias token was used. (This is
	     * in contrast to `toClass` where a separate instance of `toClass` will be returned.)
	     *
	     * ## Example
	     *
	     * Becuse `toAlias` and `toClass` are often confused, the example contains both use cases for easy
	     * comparison.
	     *
	     * ```javascript
	     *
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toAlias(Car)
	     * ]);
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toClass(Car)
	     * ]);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    BindingBuilder.prototype.toAlias = function (aliasToken) {
	        if (lang_1.isBlank(aliasToken)) {
	            throw new lang_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
	        }
	        return new Binding(this.token, { toAlias: aliasToken });
	    };
	    /**
	     * Binds a key to a function which computes the value.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(Number).toFactory(() => { return 1+2; }),
	     *   bind(String).toFactory((v) => { return "Value: " + v; }, [Number])
	     * ]);
	     *
	     * expect(injector.get(Number)).toEqual(3);
	     * expect(injector.get(String)).toEqual('Value: 3');
	     * ```
	     */
	    BindingBuilder.prototype.toFactory = function (factoryFunction, dependencies) {
	        return new Binding(this.token, { toFactory: factoryFunction, deps: dependencies });
	    };
	    return BindingBuilder;
	})();
	exports.BindingBuilder = BindingBuilder;
	function _constructDependencies(factoryFunction, dependencies) {
	    if (lang_1.isBlank(dependencies)) {
	        return _dependenciesFor(factoryFunction);
	    }
	    else {
	        var params = collection_1.ListWrapper.map(dependencies, function (t) { return [t]; });
	        return collection_1.ListWrapper.map(dependencies, function (t) { return _extractToken(factoryFunction, t, params); });
	    }
	}
	function _dependenciesFor(typeOrFunc) {
	    var params = reflection_1.reflector.parameters(typeOrFunc);
	    if (lang_1.isBlank(params))
	        return [];
	    if (collection_1.ListWrapper.any(params, function (p) { return lang_1.isBlank(p); })) {
	        throw new exceptions_1.NoAnnotationError(typeOrFunc, params);
	    }
	    return collection_1.ListWrapper.map(params, function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	function _extractToken(typeOrFunc, annotations /*List<any> | any*/, params) {
	    var depProps = [];
	    var token = null;
	    var optional = false;
	    if (!lang_1.isArray(annotations)) {
	        return _createDependency(annotations, optional, metadata_1.DEFAULT_VISIBILITY, depProps);
	    }
	    var visibility = metadata_1.DEFAULT_VISIBILITY;
	    for (var i = 0; i < annotations.length; ++i) {
	        var paramAnnotation = annotations[i];
	        if (paramAnnotation instanceof lang_1.Type) {
	            token = paramAnnotation;
	        }
	        else if (paramAnnotation instanceof metadata_1.InjectMetadata) {
	            token = paramAnnotation.token;
	        }
	        else if (paramAnnotation instanceof metadata_1.OptionalMetadata) {
	            optional = true;
	        }
	        else if (paramAnnotation instanceof metadata_1.VisibilityMetadata) {
	            visibility = paramAnnotation;
	        }
	        else if (paramAnnotation instanceof metadata_1.DependencyMetadata) {
	            if (lang_1.isPresent(paramAnnotation.token)) {
	                token = paramAnnotation.token;
	            }
	            depProps.push(paramAnnotation);
	        }
	    }
	    token = forward_ref_1.resolveForwardRef(token);
	    if (lang_1.isPresent(token)) {
	        return _createDependency(token, optional, visibility, depProps);
	    }
	    else {
	        throw new exceptions_1.NoAnnotationError(typeOrFunc, params);
	    }
	}
	function _createDependency(token, optional, visibility, depProps) {
	    return new Dependency(key_1.Key.get(token), optional, visibility, depProps);
	}
	//# sourceMappingURL=binding.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/// <reference path="../../typings/es6-promise/es6-promise.d.ts" />
	var collection_1 = __webpack_require__(2);
	var binding_1 = __webpack_require__(136);
	var exceptions_1 = __webpack_require__(71);
	var lang_1 = __webpack_require__(1);
	var key_1 = __webpack_require__(72);
	var forward_ref_1 = __webpack_require__(51);
	var metadata_1 = __webpack_require__(27);
	var _constructing = lang_1.CONST_EXPR(new Object());
	var _notFound = lang_1.CONST_EXPR(new Object());
	// Threshold for the dynamic version
	var _MAX_CONSTRUCTION_COUNTER = 10;
	exports.undefinedValue = lang_1.CONST_EXPR(new Object());
	exports.PUBLIC = 1;
	exports.PRIVATE = 2;
	exports.PUBLIC_AND_PRIVATE = 3;
	var ProtoInjectorInlineStrategy = (function () {
	    function ProtoInjectorInlineStrategy(protoEI, bwv) {
	        this.binding0 = null;
	        this.binding1 = null;
	        this.binding2 = null;
	        this.binding3 = null;
	        this.binding4 = null;
	        this.binding5 = null;
	        this.binding6 = null;
	        this.binding7 = null;
	        this.binding8 = null;
	        this.binding9 = null;
	        this.keyId0 = null;
	        this.keyId1 = null;
	        this.keyId2 = null;
	        this.keyId3 = null;
	        this.keyId4 = null;
	        this.keyId5 = null;
	        this.keyId6 = null;
	        this.keyId7 = null;
	        this.keyId8 = null;
	        this.keyId9 = null;
	        this.visibility0 = null;
	        this.visibility1 = null;
	        this.visibility2 = null;
	        this.visibility3 = null;
	        this.visibility4 = null;
	        this.visibility5 = null;
	        this.visibility6 = null;
	        this.visibility7 = null;
	        this.visibility8 = null;
	        this.visibility9 = null;
	        var length = bwv.length;
	        if (length > 0) {
	            this.binding0 = bwv[0].binding;
	            this.keyId0 = bwv[0].getKeyId();
	            this.visibility0 = bwv[0].visibility;
	        }
	        if (length > 1) {
	            this.binding1 = bwv[1].binding;
	            this.keyId1 = bwv[1].getKeyId();
	            this.visibility1 = bwv[1].visibility;
	        }
	        if (length > 2) {
	            this.binding2 = bwv[2].binding;
	            this.keyId2 = bwv[2].getKeyId();
	            this.visibility2 = bwv[2].visibility;
	        }
	        if (length > 3) {
	            this.binding3 = bwv[3].binding;
	            this.keyId3 = bwv[3].getKeyId();
	            this.visibility3 = bwv[3].visibility;
	        }
	        if (length > 4) {
	            this.binding4 = bwv[4].binding;
	            this.keyId4 = bwv[4].getKeyId();
	            this.visibility4 = bwv[4].visibility;
	        }
	        if (length > 5) {
	            this.binding5 = bwv[5].binding;
	            this.keyId5 = bwv[5].getKeyId();
	            this.visibility5 = bwv[5].visibility;
	        }
	        if (length > 6) {
	            this.binding6 = bwv[6].binding;
	            this.keyId6 = bwv[6].getKeyId();
	            this.visibility6 = bwv[6].visibility;
	        }
	        if (length > 7) {
	            this.binding7 = bwv[7].binding;
	            this.keyId7 = bwv[7].getKeyId();
	            this.visibility7 = bwv[7].visibility;
	        }
	        if (length > 8) {
	            this.binding8 = bwv[8].binding;
	            this.keyId8 = bwv[8].getKeyId();
	            this.visibility8 = bwv[8].visibility;
	        }
	        if (length > 9) {
	            this.binding9 = bwv[9].binding;
	            this.keyId9 = bwv[9].getKeyId();
	            this.visibility9 = bwv[9].visibility;
	        }
	    }
	    ProtoInjectorInlineStrategy.prototype.getBindingAtIndex = function (index) {
	        if (index == 0)
	            return this.binding0;
	        if (index == 1)
	            return this.binding1;
	        if (index == 2)
	            return this.binding2;
	        if (index == 3)
	            return this.binding3;
	        if (index == 4)
	            return this.binding4;
	        if (index == 5)
	            return this.binding5;
	        if (index == 6)
	            return this.binding6;
	        if (index == 7)
	            return this.binding7;
	        if (index == 8)
	            return this.binding8;
	        if (index == 9)
	            return this.binding9;
	        throw new exceptions_1.OutOfBoundsError(index);
	    };
	    ProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
	        return new InjectorInlineStrategy(injector, this);
	    };
	    return ProtoInjectorInlineStrategy;
	})();
	exports.ProtoInjectorInlineStrategy = ProtoInjectorInlineStrategy;
	var ProtoInjectorDynamicStrategy = (function () {
	    function ProtoInjectorDynamicStrategy(protoInj, bwv) {
	        var len = bwv.length;
	        this.bindings = collection_1.ListWrapper.createFixedSize(len);
	        this.keyIds = collection_1.ListWrapper.createFixedSize(len);
	        this.visibilities = collection_1.ListWrapper.createFixedSize(len);
	        for (var i = 0; i < len; i++) {
	            this.bindings[i] = bwv[i].binding;
	            this.keyIds[i] = bwv[i].getKeyId();
	            this.visibilities[i] = bwv[i].visibility;
	        }
	    }
	    ProtoInjectorDynamicStrategy.prototype.getBindingAtIndex = function (index) {
	        if (index < 0 || index >= this.bindings.length) {
	            throw new exceptions_1.OutOfBoundsError(index);
	        }
	        return this.bindings[index];
	    };
	    ProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
	        return new InjectorDynamicStrategy(this, ei);
	    };
	    return ProtoInjectorDynamicStrategy;
	})();
	exports.ProtoInjectorDynamicStrategy = ProtoInjectorDynamicStrategy;
	var ProtoInjector = (function () {
	    function ProtoInjector(bwv) {
	        this._strategy = bwv.length > _MAX_CONSTRUCTION_COUNTER ?
	            new ProtoInjectorDynamicStrategy(this, bwv) :
	            new ProtoInjectorInlineStrategy(this, bwv);
	    }
	    ProtoInjector.prototype.getBindingAtIndex = function (index) { return this._strategy.getBindingAtIndex(index); };
	    return ProtoInjector;
	})();
	exports.ProtoInjector = ProtoInjector;
	var InjectorInlineStrategy = (function () {
	    function InjectorInlineStrategy(injector, protoStrategy) {
	        this.injector = injector;
	        this.protoStrategy = protoStrategy;
	        this.obj0 = exports.undefinedValue;
	        this.obj1 = exports.undefinedValue;
	        this.obj2 = exports.undefinedValue;
	        this.obj3 = exports.undefinedValue;
	        this.obj4 = exports.undefinedValue;
	        this.obj5 = exports.undefinedValue;
	        this.obj6 = exports.undefinedValue;
	        this.obj7 = exports.undefinedValue;
	        this.obj8 = exports.undefinedValue;
	        this.obj9 = exports.undefinedValue;
	    }
	    InjectorInlineStrategy.prototype.resetContructionCounter = function () { this.injector._constructionCounter = 0; };
	    InjectorInlineStrategy.prototype.instantiateBinding = function (binding, visibility) {
	        return this.injector._new(binding, visibility);
	    };
	    InjectorInlineStrategy.prototype.attach = function (parent, isBoundary) {
	        var inj = this.injector;
	        inj._parent = parent;
	        inj._isBoundary = isBoundary;
	    };
	    InjectorInlineStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
	        var p = this.protoStrategy;
	        var inj = this.injector;
	        if (p.keyId0 === keyId && (p.visibility0 & visibility) > 0) {
	            if (this.obj0 === exports.undefinedValue) {
	                this.obj0 = inj._new(p.binding0, p.visibility0);
	            }
	            return this.obj0;
	        }
	        if (p.keyId1 === keyId && (p.visibility1 & visibility) > 0) {
	            if (this.obj1 === exports.undefinedValue) {
	                this.obj1 = inj._new(p.binding1, p.visibility1);
	            }
	            return this.obj1;
	        }
	        if (p.keyId2 === keyId && (p.visibility2 & visibility) > 0) {
	            if (this.obj2 === exports.undefinedValue) {
	                this.obj2 = inj._new(p.binding2, p.visibility2);
	            }
	            return this.obj2;
	        }
	        if (p.keyId3 === keyId && (p.visibility3 & visibility) > 0) {
	            if (this.obj3 === exports.undefinedValue) {
	                this.obj3 = inj._new(p.binding3, p.visibility3);
	            }
	            return this.obj3;
	        }
	        if (p.keyId4 === keyId && (p.visibility4 & visibility) > 0) {
	            if (this.obj4 === exports.undefinedValue) {
	                this.obj4 = inj._new(p.binding4, p.visibility4);
	            }
	            return this.obj4;
	        }
	        if (p.keyId5 === keyId && (p.visibility5 & visibility) > 0) {
	            if (this.obj5 === exports.undefinedValue) {
	                this.obj5 = inj._new(p.binding5, p.visibility5);
	            }
	            return this.obj5;
	        }
	        if (p.keyId6 === keyId && (p.visibility6 & visibility) > 0) {
	            if (this.obj6 === exports.undefinedValue) {
	                this.obj6 = inj._new(p.binding6, p.visibility6);
	            }
	            return this.obj6;
	        }
	        if (p.keyId7 === keyId && (p.visibility7 & visibility) > 0) {
	            if (this.obj7 === exports.undefinedValue) {
	                this.obj7 = inj._new(p.binding7, p.visibility7);
	            }
	            return this.obj7;
	        }
	        if (p.keyId8 === keyId && (p.visibility8 & visibility) > 0) {
	            if (this.obj8 === exports.undefinedValue) {
	                this.obj8 = inj._new(p.binding8, p.visibility8);
	            }
	            return this.obj8;
	        }
	        if (p.keyId9 === keyId && (p.visibility9 & visibility) > 0) {
	            if (this.obj9 === exports.undefinedValue) {
	                this.obj9 = inj._new(p.binding9, p.visibility9);
	            }
	            return this.obj9;
	        }
	        return exports.undefinedValue;
	    };
	    InjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
	        if (index == 0)
	            return this.obj0;
	        if (index == 1)
	            return this.obj1;
	        if (index == 2)
	            return this.obj2;
	        if (index == 3)
	            return this.obj3;
	        if (index == 4)
	            return this.obj4;
	        if (index == 5)
	            return this.obj5;
	        if (index == 6)
	            return this.obj6;
	        if (index == 7)
	            return this.obj7;
	        if (index == 8)
	            return this.obj8;
	        if (index == 9)
	            return this.obj9;
	        throw new exceptions_1.OutOfBoundsError(index);
	    };
	    InjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
	    return InjectorInlineStrategy;
	})();
	exports.InjectorInlineStrategy = InjectorInlineStrategy;
	var InjectorDynamicStrategy = (function () {
	    function InjectorDynamicStrategy(protoStrategy, injector) {
	        this.protoStrategy = protoStrategy;
	        this.injector = injector;
	        this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.bindings.length);
	        collection_1.ListWrapper.fill(this.objs, exports.undefinedValue);
	    }
	    InjectorDynamicStrategy.prototype.resetContructionCounter = function () { this.injector._constructionCounter = 0; };
	    InjectorDynamicStrategy.prototype.instantiateBinding = function (binding, visibility) {
	        return this.injector._new(binding, visibility);
	    };
	    InjectorDynamicStrategy.prototype.attach = function (parent, isBoundary) {
	        var inj = this.injector;
	        inj._parent = parent;
	        inj._isBoundary = isBoundary;
	    };
	    InjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId, visibility) {
	        var p = this.protoStrategy;
	        for (var i = 0; i < p.keyIds.length; i++) {
	            if (p.keyIds[i] === keyId && (p.visibilities[i] & visibility) > 0) {
	                if (this.objs[i] === exports.undefinedValue) {
	                    this.objs[i] = this.injector._new(p.bindings[i], p.visibilities[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return exports.undefinedValue;
	    };
	    InjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
	        if (index < 0 || index >= this.objs.length) {
	            throw new exceptions_1.OutOfBoundsError(index);
	        }
	        return this.objs[index];
	    };
	    InjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
	    return InjectorDynamicStrategy;
	})();
	exports.InjectorDynamicStrategy = InjectorDynamicStrategy;
	var BindingWithVisibility = (function () {
	    function BindingWithVisibility(binding, visibility) {
	        this.binding = binding;
	        this.visibility = visibility;
	    }
	    ;
	    BindingWithVisibility.prototype.getKeyId = function () { return this.binding.key.id; };
	    return BindingWithVisibility;
	})();
	exports.BindingWithVisibility = BindingWithVisibility;
	/**
	 * A dependency injection container used for resolving dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ## Example:
	 *
	 * Suppose that we want to inject an `Engine` into class `Car`, we would define it like this:
	 *
	 * ```javascript
	 * class Engine {
	 * }
	 *
	 * class Car {
	 *   constructor(@Inject(Engine) engine) {
	 *   }
	 * }
	 *
	 * ```
	 *
	 * Next we need to write the code that creates and instantiates the `Injector`. We then ask for the
	 * `root` object, `Car`, so that the `Injector` can recursively build all of that object's
	 *dependencies.
	 *
	 * ```javascript
	 * main() {
	 *   var injector = Injector.resolveAndCreate([Car, Engine]);
	 *
	 *   // Get a reference to the `root` object, which will recursively instantiate the tree.
	 *   var car = injector.get(Car);
	 * }
	 * ```
	 * Notice that we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 */
	var Injector = (function () {
	    function Injector(_proto, _parent, _depProvider) {
	        if (_parent === void 0) { _parent = null; }
	        if (_depProvider === void 0) { _depProvider = null; }
	        this._proto = _proto;
	        this._parent = _parent;
	        this._depProvider = _depProvider;
	        this._isBoundary = false;
	        this._constructionCounter = 0;
	        this._strategy = _proto._strategy.createInjectorStrategy(this);
	    }
	    /**
	     * Turns a list of binding definitions into an internal resolved list of resolved bindings.
	     *
	     * A resolution is a process of flattening multiple nested lists and converting individual
	     * bindings into a list of {@link ResolvedBinding}s. The resolution can be cached by `resolve`
	     * for the {@link Injector} for performance-sensitive code.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     * recursive list of more bindings.
	     *
	     * The returned list is sparse, indexed by `id` for the {@link Key}. It is generally not useful to
	     *application code
	     * other than for passing it to {@link Injector} functions that require resolved binding lists,
	     *such as
	     * `fromResolvedBindings` and `createChildFromResolved`.
	     */
	    Injector.resolve = function (bindings) {
	        var resolvedBindings = _resolveBindings(bindings);
	        var flatten = _flattenBindings(resolvedBindings, new collection_1.Map());
	        return _createListOfBindings(flatten);
	    };
	    /**
	     * Resolves bindings and creates an injector based on those bindings. This function is slower than
	     * the corresponding `fromResolvedBindings` because it needs to resolve bindings first. See
	     *`resolve`
	     * for the {@link Injector}.
	     *
	     * Prefer `fromResolvedBindings` in performance-critical code that creates lots of injectors.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     *recursive list of more
	     * bindings.
	     * @param `depProvider`
	     */
	    Injector.resolveAndCreate = function (bindings, depProvider) {
	        if (depProvider === void 0) { depProvider = null; }
	        var resolvedBindings = Injector.resolve(bindings);
	        return Injector.fromResolvedBindings(resolvedBindings, depProvider);
	    };
	    /**
	     * Creates an injector from previously resolved bindings. This bypasses resolution and flattening.
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * @param `bindings` A sparse list of {@link ResolvedBinding}s. See `resolve` for the
	     * {@link Injector}.
	     * @param `depProvider`
	     */
	    Injector.fromResolvedBindings = function (bindings, depProvider) {
	        if (depProvider === void 0) { depProvider = null; }
	        var bd = bindings.map(function (b) { return new BindingWithVisibility(b, exports.PUBLIC); });
	        var proto = new ProtoInjector(bd);
	        var inj = new Injector(proto, null, depProvider);
	        return inj;
	    };
	    /**
	     * Retrieves an instance from the injector.
	     *
	     * @param `token`: usually the `Type` of an object. (Same as the token used while setting up a
	     *binding).
	     * @returns an instance represented by the token. Throws if not found.
	     */
	    Injector.prototype.get = function (token) {
	        return this._getByKey(key_1.Key.get(token), metadata_1.DEFAULT_VISIBILITY, false, exports.PUBLIC_AND_PRIVATE);
	    };
	    /**
	     * Retrieves an instance from the injector.
	     *
	     * @param `token`: usually a `Type`. (Same as the token used while setting up a binding).
	     * @returns an instance represented by the token. Returns `null` if not found.
	     */
	    Injector.prototype.getOptional = function (token) {
	        return this._getByKey(key_1.Key.get(token), metadata_1.DEFAULT_VISIBILITY, true, exports.PUBLIC_AND_PRIVATE);
	    };
	    /**
	     * Retrieves an instance from the injector.
	     *
	     * @param `index`: index of an instance.
	     * @returns an instance represented by the index. Throws if not found.
	     */
	    Injector.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
	    Object.defineProperty(Injector.prototype, "parent", {
	        /**
	         * Direct parent of this injector.
	         */
	        get: function () { return this._parent; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Injector.prototype, "internalStrategy", {
	        /**
	         * Internal. Do not use.
	         *
	         * We return `any` not to export the InjectorStrategy type.
	         */
	        get: function () { return this._strategy; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	    * Creates a child injector and loads a new set of bindings into it.
	    *
	    * A resolution is a process of flattening multiple nested lists and converting individual
	    * bindings into a list of {@link ResolvedBinding}s. The resolution can be cached by `resolve`
	    * for the {@link Injector} for performance-sensitive code.
	    *
	    * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	    * recursive list of more bindings.
	    * @param `depProvider`
	    */
	    Injector.prototype.resolveAndCreateChild = function (bindings, depProvider) {
	        if (depProvider === void 0) { depProvider = null; }
	        var resovledBindings = Injector.resolve(bindings);
	        return this.createChildFromResolved(resovledBindings, depProvider);
	    };
	    /**
	     * Creates a child injector and loads a new set of {@link ResolvedBinding}s into it.
	     *
	     * @param `bindings`: A sparse list of {@link ResolvedBinding}s.
	     * See `resolve` for the {@link Injector}.
	     * @param `depProvider`
	     * @returns a new child {@link Injector}.
	     */
	    Injector.prototype.createChildFromResolved = function (bindings, depProvider) {
	        if (depProvider === void 0) { depProvider = null; }
	        var bd = bindings.map(function (b) { return new BindingWithVisibility(b, exports.PUBLIC); });
	        var proto = new ProtoInjector(bd);
	        var inj = new Injector(proto, null, depProvider);
	        inj._parent = this;
	        return inj;
	    };
	    Injector.prototype._new = function (binding, visibility) {
	        if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
	            throw new exceptions_1.CyclicDependencyError(binding.key);
	        }
	        var factory = binding.factory;
	        var deps = binding.dependencies;
	        var length = deps.length;
	        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19;
	        try {
	            d0 = length > 0 ? this._getByDependency(binding, deps[0], visibility) : null;
	            d1 = length > 1 ? this._getByDependency(binding, deps[1], visibility) : null;
	            d2 = length > 2 ? this._getByDependency(binding, deps[2], visibility) : null;
	            d3 = length > 3 ? this._getByDependency(binding, deps[3], visibility) : null;
	            d4 = length > 4 ? this._getByDependency(binding, deps[4], visibility) : null;
	            d5 = length > 5 ? this._getByDependency(binding, deps[5], visibility) : null;
	            d6 = length > 6 ? this._getByDependency(binding, deps[6], visibility) : null;
	            d7 = length > 7 ? this._getByDependency(binding, deps[7], visibility) : null;
	            d8 = length > 8 ? this._getByDependency(binding, deps[8], visibility) : null;
	            d9 = length > 9 ? this._getByDependency(binding, deps[9], visibility) : null;
	            d10 = length > 10 ? this._getByDependency(binding, deps[10], visibility) : null;
	            d11 = length > 11 ? this._getByDependency(binding, deps[11], visibility) : null;
	            d12 = length > 12 ? this._getByDependency(binding, deps[12], visibility) : null;
	            d13 = length > 13 ? this._getByDependency(binding, deps[13], visibility) : null;
	            d14 = length > 14 ? this._getByDependency(binding, deps[14], visibility) : null;
	            d15 = length > 15 ? this._getByDependency(binding, deps[15], visibility) : null;
	            d16 = length > 16 ? this._getByDependency(binding, deps[16], visibility) : null;
	            d17 = length > 17 ? this._getByDependency(binding, deps[17], visibility) : null;
	            d18 = length > 18 ? this._getByDependency(binding, deps[18], visibility) : null;
	            d19 = length > 19 ? this._getByDependency(binding, deps[19], visibility) : null;
	        }
	        catch (e) {
	            if (e instanceof exceptions_1.AbstractBindingError)
	                e.addKey(binding.key);
	            throw e;
	        }
	        var obj;
	        try {
	            switch (length) {
	                case 0:
	                    obj = factory();
	                    break;
	                case 1:
	                    obj = factory(d0);
	                    break;
	                case 2:
	                    obj = factory(d0, d1);
	                    break;
	                case 3:
	                    obj = factory(d0, d1, d2);
	                    break;
	                case 4:
	                    obj = factory(d0, d1, d2, d3);
	                    break;
	                case 5:
	                    obj = factory(d0, d1, d2, d3, d4);
	                    break;
	                case 6:
	                    obj = factory(d0, d1, d2, d3, d4, d5);
	                    break;
	                case 7:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                    break;
	                case 8:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                    break;
	                case 9:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                    break;
	                case 10:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                    break;
	                case 11:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
	                    break;
	                case 12:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
	                    break;
	                case 13:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
	                    break;
	                case 14:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
	                    break;
	                case 15:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
	                    break;
	                case 16:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
	                    break;
	                case 17:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
	                    break;
	                case 18:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
	                    break;
	                case 19:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
	                    break;
	                case 20:
	                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
	                    break;
	            }
	        }
	        catch (e) {
	            throw new exceptions_1.InstantiationError(e, e.stack, binding.key);
	        }
	        return obj;
	    };
	    Injector.prototype._getByDependency = function (binding, dep, bindingVisibility) {
	        var special = lang_1.isPresent(this._depProvider) ?
	            this._depProvider.getDependency(this, binding, dep) :
	            exports.undefinedValue;
	        if (special !== exports.undefinedValue) {
	            return special;
	        }
	        else {
	            return this._getByKey(dep.key, dep.visibility, dep.optional, bindingVisibility);
	        }
	    };
	    Injector.prototype._getByKey = function (key, depVisibility, optional, bindingVisibility) {
	        if (key === INJECTOR_KEY) {
	            return this;
	        }
	        if (depVisibility instanceof metadata_1.SelfMetadata) {
	            return this._getByKeySelf(key, optional, bindingVisibility);
	        }
	        else if (depVisibility instanceof metadata_1.AncestorMetadata) {
	            return this._getByKeyAncestor(key, optional, bindingVisibility, depVisibility.includeSelf);
	        }
	        else {
	            return this._getByKeyUnbounded(key, optional, bindingVisibility, depVisibility.includeSelf);
	        }
	    };
	    Injector.prototype._throwOrNull = function (key, optional) {
	        if (optional) {
	            return null;
	        }
	        else {
	            throw new exceptions_1.NoBindingError(key);
	        }
	    };
	    Injector.prototype._getByKeySelf = function (key, optional, bindingVisibility) {
	        var obj = this._strategy.getObjByKeyId(key.id, bindingVisibility);
	        return (obj !== exports.undefinedValue) ? obj : this._throwOrNull(key, optional);
	    };
	    Injector.prototype._getByKeyAncestor = function (key, optional, bindingVisibility, includeSelf) {
	        var inj = this;
	        if (!includeSelf) {
	            if (inj._isBoundary) {
	                return this._getPrivateDependency(key, optional, inj);
	            }
	            else {
	                inj = inj._parent;
	            }
	        }
	        while (inj != null) {
	            var obj = inj._strategy.getObjByKeyId(key.id, bindingVisibility);
	            if (obj !== exports.undefinedValue)
	                return obj;
	            if (lang_1.isPresent(inj._parent) && inj._isBoundary) {
	                return this._getPrivateDependency(key, optional, inj);
	            }
	            else {
	                inj = inj._parent;
	            }
	        }
	        return this._throwOrNull(key, optional);
	    };
	    Injector.prototype._getPrivateDependency = function (key, optional, inj) {
	        var obj = inj._parent._strategy.getObjByKeyId(key.id, exports.PRIVATE);
	        return (obj !== exports.undefinedValue) ? obj : this._throwOrNull(key, optional);
	    };
	    Injector.prototype._getByKeyUnbounded = function (key, optional, bindingVisibility, includeSelf) {
	        var inj = this;
	        if (!includeSelf) {
	            bindingVisibility = inj._isBoundary ? exports.PUBLIC_AND_PRIVATE : exports.PUBLIC;
	            inj = inj._parent;
	        }
	        while (inj != null) {
	            var obj = inj._strategy.getObjByKeyId(key.id, bindingVisibility);
	            if (obj !== exports.undefinedValue)
	                return obj;
	            bindingVisibility = inj._isBoundary ? exports.PUBLIC_AND_PRIVATE : exports.PUBLIC;
	            inj = inj._parent;
	        }
	        return this._throwOrNull(key, optional);
	    };
	    return Injector;
	})();
	exports.Injector = Injector;
	var INJECTOR_KEY = key_1.Key.get(Injector);
	function _resolveBindings(bindings) {
	    var resolvedList = collection_1.ListWrapper.createFixedSize(bindings.length);
	    for (var i = 0; i < bindings.length; i++) {
	        var unresolved = forward_ref_1.resolveForwardRef(bindings[i]);
	        var resolved;
	        if (unresolved instanceof binding_1.ResolvedBinding) {
	            resolved = unresolved; // ha-ha! I'm easily amused
	        }
	        else if (unresolved instanceof lang_1.Type) {
	            resolved = binding_1.bind(unresolved).toClass(unresolved).resolve();
	        }
	        else if (unresolved instanceof binding_1.Binding) {
	            resolved = unresolved.resolve();
	        }
	        else if (unresolved instanceof collection_1.List) {
	            resolved = _resolveBindings(unresolved);
	        }
	        else if (unresolved instanceof binding_1.BindingBuilder) {
	            throw new exceptions_1.InvalidBindingError(unresolved.token);
	        }
	        else {
	            throw new exceptions_1.InvalidBindingError(unresolved);
	        }
	        resolvedList[i] = resolved;
	    }
	    return resolvedList;
	}
	function _createListOfBindings(flattenedBindings) {
	    return collection_1.MapWrapper.values(flattenedBindings);
	}
	function _flattenBindings(bindings, res) {
	    collection_1.ListWrapper.forEach(bindings, function (b) {
	        if (b instanceof binding_1.ResolvedBinding) {
	            res.set(b.key.id, b);
	        }
	        else if (b instanceof collection_1.List) {
	            _flattenBindings(b, res);
	        }
	    });
	    return res;
	}
	//# sourceMappingURL=injector.js.map

/***/ },
/* 138 */
/***/ function(module, exports) {

	'use strict';/**
	 * Type literals is a Dart-only feature. This is here only so we can x-compile
	 * to multiple languages.
	 */
	var TypeLiteral = (function () {
	    function TypeLiteral() {
	    }
	    Object.defineProperty(TypeLiteral.prototype, "type", {
	        get: function () { throw new Error("Type literals are only supported in Dart"); },
	        enumerable: true,
	        configurable: true
	    });
	    return TypeLiteral;
	})();
	exports.TypeLiteral = TypeLiteral;
	//# sourceMappingURL=type_literal.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(8);
	var angular2_1 = __webpack_require__(4);
	var lang_1 = __webpack_require__(1);
	/**
	 * The `NgFor` directive instantiates a template once per item from an iterable. The context for
	 * each instantiated template inherits from the outer context with the given loop variable set
	 * to the current item from the iterable.
	 *
	 * It is possible to alias the `index` to a local variable that will be set to the current loop
	 * iteration in the template context.
	 *
	 * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * # Example
	 *
	 * ```
	 * <ul>
	 *   <li *ng-for="#error of errors; #i = index">
	 *     Error {{i}} of {{errors.length}}: {{error.message}}
	 *   </li>
	 * </ul>
	 * ```
	 *
	 * # Syntax
	 *
	 * - `<li *ng-for="#item of items; #i = index">...</li>`
	 * - `<li template="ng-for #item of items; #i = index">...</li>`
	 * - `<template ng-for #item [ng-for-of]="items" #i="index"><li>...</li></template>`
	 */
	var NgFor = (function () {
	    function NgFor(viewContainer, templateRef, pipes, cdr) {
	        this.viewContainer = viewContainer;
	        this.templateRef = templateRef;
	        this.pipes = pipes;
	        this.cdr = cdr;
	    }
	    Object.defineProperty(NgFor.prototype, "ngForOf", {
	        set: function (value) {
	            this._ngForOf = value;
	            this._pipe = this.pipes.get("iterableDiff", value, this.cdr, this._pipe);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgFor.prototype.onCheck = function () {
	        var diff = this._pipe.transform(this._ngForOf, null);
	        if (lang_1.isPresent(diff))
	            this._applyChanges(diff.wrapped);
	    };
	    NgFor.prototype._applyChanges = function (changes) {
	        if (lang_1.isBlank(changes)) {
	            this.viewContainer.clear();
	            return;
	        }
	        // TODO(rado): check if change detection can produce a change record that is
	        // easier to consume than current.
	        var recordViewTuples = [];
	        changes.forEachRemovedItem(function (removedRecord) {
	            return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
	        });
	        changes.forEachMovedItem(function (movedRecord) {
	            return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
	        });
	        var insertTuples = NgFor.bulkRemove(recordViewTuples, this.viewContainer);
	        changes.forEachAddedItem(function (addedRecord) {
	            return insertTuples.push(new RecordViewTuple(addedRecord, null));
	        });
	        NgFor.bulkInsert(insertTuples, this.viewContainer, this.templateRef);
	        for (var i = 0; i < insertTuples.length; i++) {
	            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	        }
	    };
	    NgFor.prototype._perViewChange = function (view, record) {
	        view.setLocal('\$implicit', record.item);
	        view.setLocal('index', record.currentIndex);
	    };
	    NgFor.bulkRemove = function (tuples, viewContainer) {
	        tuples.sort(function (a, b) { return a.record.previousIndex - b.record.previousIndex; });
	        var movedTuples = [];
	        for (var i = tuples.length - 1; i >= 0; i--) {
	            var tuple = tuples[i];
	            // separate moved views from removed views.
	            if (lang_1.isPresent(tuple.record.currentIndex)) {
	                tuple.view = viewContainer.detach(tuple.record.previousIndex);
	                movedTuples.push(tuple);
	            }
	            else {
	                viewContainer.remove(tuple.record.previousIndex);
	            }
	        }
	        return movedTuples;
	    };
	    NgFor.bulkInsert = function (tuples, viewContainer, templateRef) {
	        tuples.sort(function (a, b) { return a.record.currentIndex - b.record.currentIndex; });
	        for (var i = 0; i < tuples.length; i++) {
	            var tuple = tuples[i];
	            if (lang_1.isPresent(tuple.view)) {
	                viewContainer.insert(tuple.view, tuple.record.currentIndex);
	            }
	            else {
	                tuple.view = viewContainer.createEmbeddedView(templateRef, tuple.record.currentIndex);
	            }
	        }
	        return tuples;
	    };
	    NgFor = __decorate([
	        annotations_1.Directive({ selector: '[ng-for][ng-for-of]', properties: ['ngForOf'], lifecycle: [angular2_1.LifecycleEvent.onCheck] }), 
	        __metadata('design:paramtypes', [angular2_1.ViewContainerRef, angular2_1.TemplateRef, angular2_1.Pipes, angular2_1.ChangeDetectorRef])
	    ], NgFor);
	    return NgFor;
	})();
	exports.NgFor = NgFor;
	var RecordViewTuple = (function () {
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	})();
	exports.RecordViewTuple = RecordViewTuple;
	//# sourceMappingURL=ng_for.js.map

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(8);
	var core_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(1);
	/**
	 * Removes or recreates a portion of the DOM tree based on an {expression}.
	 *
	 * If the expression assigned to `ng-if` evaluates to a false value then the element
	 * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	 *
	 * # Example:
	 *
	 * ```
	 * <div *ng-if="errorCount > 0" class="error">
	 *   <!-- Error message displayed when the errorCount property on the current context is greater
	 * than 0. -->
	 *   {{errorCount}} errors detected
	 * </div>
	 * ```
	 *
	 * # Syntax
	 *
	 * - `<div *ng-if="condition">...</div>`
	 * - `<div template="ng-if condition">...</div>`
	 * - `<template [ng-if]="condition"><div>...</div></template>`
	 */
	var NgIf = (function () {
	    function NgIf(viewContainer, templateRef) {
	        this.viewContainer = viewContainer;
	        this.prevCondition = null;
	        this.templateRef = templateRef;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        set: function (newCondition /* boolean */) {
	            if (newCondition && (lang_1.isBlank(this.prevCondition) || !this.prevCondition)) {
	                this.prevCondition = true;
	                this.viewContainer.createEmbeddedView(this.templateRef);
	            }
	            else if (!newCondition && (lang_1.isBlank(this.prevCondition) || this.prevCondition)) {
	                this.prevCondition = false;
	                this.viewContainer.clear();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgIf = __decorate([
	        annotations_1.Directive({ selector: '[ng-if]', properties: ['ngIf'] }), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef])
	    ], NgIf);
	    return NgIf;
	})();
	exports.NgIf = NgIf;
	//# sourceMappingURL=ng_if.js.map

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(8);
	/**
	 * The `NgNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * Example:
	 *
	 * ```
	 * <div>Normal: {{1 + 2}}</div> // output "Normal: 3"
	 * <div non-bindable>Ignored: {{1 + 2}}</div> // output "Ignored: {{1 + 2}}"
	 * ```
	 */
	var NgNonBindable = (function () {
	    function NgNonBindable() {
	    }
	    NgNonBindable = __decorate([
	        annotations_1.Directive({ selector: '[ng-non-bindable]', compileChildren: false }), 
	        __metadata('design:paramtypes', [])
	    ], NgNonBindable);
	    return NgNonBindable;
	})();
	exports.NgNonBindable = NgNonBindable;
	//# sourceMappingURL=ng_non_bindable.js.map

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var annotations_1 = __webpack_require__(8);
	var di_1 = __webpack_require__(3);
	var core_1 = __webpack_require__(13);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var SwitchView = (function () {
	    function SwitchView(viewContainerRef, templateRef) {
	        this._templateRef = templateRef;
	        this._viewContainerRef = viewContainerRef;
	    }
	    SwitchView.prototype.create = function () { this._viewContainerRef.createEmbeddedView(this._templateRef); };
	    SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };
	    return SwitchView;
	})();
	exports.SwitchView = SwitchView;
	/**
	 * The `NgSwitch` directive is used to conditionally swap DOM structure on your template based on a
	 * scope expression.
	 * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
	 * preserved at the location as specified in the template.
	 *
	 * `NgSwitch` simply chooses nested elements and makes them visible based on which element matches
	 * the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`[ng-switch]="..."` attribute**),
	 * define any inner elements inside of the directive and place a `[ng-switch-when]` attribute per
	 * element.
	 * The when attribute is used to inform NgSwitch which element to display when the expression is
	 * evaluated. If a matching expression is not found via a when attribute then an element with the
	 * default attribute is displayed.
	 *
	 * # Example:
	 *
	 * ```
	 * <ANY [ng-switch]="expression">
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template ng-switch-default>...</template>
	 * </ANY>
	 * ```
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._valueViews = new collection_1.Map();
	        this._activeViews = [];
	        this._useDefault = false;
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        set: function (value) {
	            // Empty the currently active ViewContainers
	            this._emptyAllActiveViews();
	            // Add the ViewContainers matching the value (with a fallback to default)
	            this._useDefault = false;
	            var views = this._valueViews.get(value);
	            if (lang_1.isBlank(views)) {
	                this._useDefault = true;
	                views = lang_1.normalizeBlank(this._valueViews.get(_whenDefault));
	            }
	            this._activateViews(views);
	            this._switchValue = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitch.prototype._onWhenValueChanged = function (oldWhen, newWhen, view) {
	        this._deregisterView(oldWhen, view);
	        this._registerView(newWhen, view);
	        if (oldWhen === this._switchValue) {
	            view.destroy();
	            collection_1.ListWrapper.remove(this._activeViews, view);
	        }
	        else if (newWhen === this._switchValue) {
	            if (this._useDefault) {
	                this._useDefault = false;
	                this._emptyAllActiveViews();
	            }
	            view.create();
	            this._activeViews.push(view);
	        }
	        // Switch to default when there is no more active ViewContainers
	        if (this._activeViews.length === 0 && !this._useDefault) {
	            this._useDefault = true;
	            this._activateViews(this._valueViews.get(_whenDefault));
	        }
	    };
	    NgSwitch.prototype._emptyAllActiveViews = function () {
	        var activeContainers = this._activeViews;
	        for (var i = 0; i < activeContainers.length; i++) {
	            activeContainers[i].destroy();
	        }
	        this._activeViews = [];
	    };
	    NgSwitch.prototype._activateViews = function (views) {
	        // TODO(vicb): assert(this._activeViews.length === 0);
	        if (lang_1.isPresent(views)) {
	            for (var i = 0; i < views.length; i++) {
	                views[i].create();
	            }
	            this._activeViews = views;
	        }
	    };
	    NgSwitch.prototype._registerView = function (value, view) {
	        var views = this._valueViews.get(value);
	        if (lang_1.isBlank(views)) {
	            views = [];
	            this._valueViews.set(value, views);
	        }
	        views.push(view);
	    };
	    NgSwitch.prototype._deregisterView = function (value, view) {
	        // `_whenDefault` is used a marker for non-registered whens
	        if (value == _whenDefault)
	            return;
	        var views = this._valueViews.get(value);
	        if (views.length == 1) {
	            collection_1.MapWrapper.delete(this._valueViews, value);
	        }
	        else {
	            collection_1.ListWrapper.remove(views, view);
	        }
	    };
	    NgSwitch = __decorate([
	        annotations_1.Directive({ selector: '[ng-switch]', properties: ['ngSwitch'] }), 
	        __metadata('design:paramtypes', [])
	    ], NgSwitch);
	    return NgSwitch;
	})();
	exports.NgSwitch = NgSwitch;
	/**
	 * Defines a case statement as an expression.
	 *
	 * If multiple `NgSwitchWhen` match the `NgSwitch` value, all of them are displayed.
	 *
	 * Example:
	 *
	 * ```
	 * // match against a context variable
	 * <template [ng-switch-when]="contextVariable">...</template>
	 *
	 * // match against a constant string
	 * <template ng-switch-when="stringValue">...</template>
	 * ```
	 */
	var NgSwitchWhen = (function () {
	    function NgSwitchWhen(viewContainer, templateRef, sswitch) {
	        // `_whenDefault` is used as a marker for a not yet initialized value
	        this._value = _whenDefault;
	        this._switch = sswitch;
	        this._view = new SwitchView(viewContainer, templateRef);
	    }
	    NgSwitchWhen.prototype.onDestroy = function () { this._switch; };
	    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
	        set: function (value) {
	            this._switch._onWhenValueChanged(this._value, value, this._view);
	            this._value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitchWhen = __decorate([
	        annotations_1.Directive({ selector: '[ng-switch-when]', properties: ['ngSwitchWhen'] }),
	        __param(2, di_1.Ancestor()), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch])
	    ], NgSwitchWhen);
	    return NgSwitchWhen;
	})();
	exports.NgSwitchWhen = NgSwitchWhen;
	/**
	 * Defines a default case statement.
	 *
	 * Default case statements are displayed when no `NgSwitchWhen` match the `ng-switch` value.
	 *
	 * Example:
	 *
	 * ```
	 * <template ng-switch-default>...</template>
	 * ```
	 */
	var NgSwitchDefault = (function () {
	    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
	        sswitch._registerView(_whenDefault, new SwitchView(viewContainer, templateRef));
	    }
	    NgSwitchDefault = __decorate([
	        annotations_1.Directive({ selector: '[ng-switch-default]' }),
	        __param(2, di_1.Ancestor()), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch])
	    ], NgSwitchDefault);
	    return NgSwitchDefault;
	})();
	exports.NgSwitchDefault = NgSwitchDefault;
	var _whenDefault = new Object();
	//# sourceMappingURL=ng_switch.js.map

/***/ },
/* 143 */
/***/ function(module, exports) {

	'use strict';(function (NumberFormatStyle) {
	    NumberFormatStyle[NumberFormatStyle["DECIMAL"] = 0] = "DECIMAL";
	    NumberFormatStyle[NumberFormatStyle["PERCENT"] = 1] = "PERCENT";
	    NumberFormatStyle[NumberFormatStyle["CURRENCY"] = 2] = "CURRENCY";
	})(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
	var NumberFormatStyle = exports.NumberFormatStyle;
	var NumberFormatter = (function () {
	    function NumberFormatter() {
	    }
	    NumberFormatter.format = function (number, locale, style, _a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.minimumIntegerDigits, minimumIntegerDigits = _c === void 0 ? 1 : _c, _d = _b.minimumFractionDigits, minimumFractionDigits = _d === void 0 ? 0 : _d, _e = _b.maximumFractionDigits, maximumFractionDigits = _e === void 0 ? 3 : _e, currency = _b.currency, _f = _b.currencyAsSymbol, currencyAsSymbol = _f === void 0 ? false : _f;
	        var intlOptions = {
	            minimumIntegerDigits: minimumIntegerDigits,
	            minimumFractionDigits: minimumFractionDigits,
	            maximumFractionDigits: maximumFractionDigits
	        };
	        intlOptions.style = NumberFormatStyle[style].toLowerCase();
	        if (style == NumberFormatStyle.CURRENCY) {
	            intlOptions.currency = currency;
	            intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	        }
	        return new Intl.NumberFormat(locale, intlOptions).format(number);
	    };
	    return NumberFormatter;
	})();
	exports.NumberFormatter = NumberFormatter;
	function digitCondition(len) {
	    return len == 2 ? '2-digit' : 'numeric';
	}
	function nameCondition(len) {
	    return len < 4 ? 'short' : 'long';
	}
	function extractComponents(pattern) {
	    var ret = {};
	    var i = 0, j;
	    while (i < pattern.length) {
	        j = i;
	        while (j < pattern.length && pattern[j] == pattern[i])
	            j++;
	        var len = j - i;
	        switch (pattern[i]) {
	            case 'G':
	                ret.era = nameCondition(len);
	                break;
	            case 'y':
	                ret.year = digitCondition(len);
	                break;
	            case 'M':
	                if (len >= 3)
	                    ret.month = nameCondition(len);
	                else
	                    ret.month = digitCondition(len);
	                break;
	            case 'd':
	                ret.day = digitCondition(len);
	                break;
	            case 'E':
	                ret.weekday = nameCondition(len);
	                break;
	            case 'j':
	                ret.hour = digitCondition(len);
	                break;
	            case 'h':
	                ret.hour = digitCondition(len);
	                ret.hour12 = true;
	                break;
	            case 'H':
	                ret.hour = digitCondition(len);
	                ret.hour12 = false;
	                break;
	            case 'm':
	                ret.minute = digitCondition(len);
	                break;
	            case 's':
	                ret.second = digitCondition(len);
	                break;
	            case 'z':
	                ret.timeZoneName = 'long';
	                break;
	            case 'Z':
	                ret.timeZoneName = 'short';
	                break;
	        }
	        i = j;
	    }
	    return ret;
	}
	var dateFormatterCache = new Map();
	var DateFormatter = (function () {
	    function DateFormatter() {
	    }
	    DateFormatter.format = function (date, locale, pattern) {
	        var key = locale + pattern;
	        if (dateFormatterCache.has(key)) {
	            return dateFormatterCache.get(key).format(date);
	        }
	        var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
	        dateFormatterCache.set(key, formatter);
	        return formatter.format(date);
	    };
	    return DateFormatter;
	})();
	exports.DateFormatter = DateFormatter;
	//# sourceMappingURL=intl.js.map

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var modelModule = __webpack_require__(52);
	/**
	 * Creates a form object from a user-specified configuration.
	 *
	 * # Example
	 *
	 * ```
	 * import {Component, View, bootstrap} from 'angular2/angular2';
	 * import {FormBuilder, Validators, formDirectives, ControlGroup} from 'angular2/forms';
	 *
	 * @Component({
	 *   selector: 'login-comp',
	 *   viewInjector: [
	 *     FormBuilder
	 *   ]
	 * })
	 * @View({
	 *   template: `
	 *     <form [control-group]="loginForm">
	 *       Login <input control="login">
	 *
	 *       <div control-group="passwordRetry">
	 *         Password <input type="password" control="password">
	 *         Confirm password <input type="password" control="passwordConfirmation">
	 *       </div>
	 *     </form>
	 *   `,
	 *   directives: [
	 *     formDirectives
	 *   ]
	 * })
	 * class LoginComp {
	 *   loginForm: ControlGroup;
	 *
	 *   constructor(builder: FormBuilder) {
	 *     this.loginForm = builder.group({
	 *       login: ["", Validators.required],
	 *
	 *       passwordRetry: builder.group({
	 *         password: ["", Validators.required],
	 *         passwordConfirmation: ["", Validators.required]
	 *       })
	 *     });
	 *   }
	 * }
	 *
	 * bootstrap(LoginComp)
	 * ```
	 *
	 * This example creates a {@link ControlGroup} that consists of a `login` {@link Control}, and a
	 * nested
	 * {@link ControlGroup} that defines a `password` and a `passwordConfirmation` {@link Control}:
	 *
	 * ```
	 *  var loginForm = builder.group({
	 *    login: ["", Validators.required],
	 *
	 *    passwordRetry: builder.group({
	 *      password: ["", Validators.required],
	 *      passwordConfirmation: ["", Validators.required]
	 *    })
	 *  });
	 *
	 *  ```
	 */
	var FormBuilder = (function () {
	    function FormBuilder() {
	    }
	    FormBuilder.prototype.group = function (controlsConfig, extra) {
	        if (extra === void 0) { extra = null; }
	        var controls = this._reduceControls(controlsConfig);
	        var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
	        var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.ControlGroup(controls, optionals, validator);
	        }
	        else {
	            return new modelModule.ControlGroup(controls, optionals);
	        }
	    };
	    FormBuilder.prototype.control = function (value, validator) {
	        if (validator === void 0) { validator = null; }
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.Control(value, validator);
	        }
	        else {
	            return new modelModule.Control(value);
	        }
	    };
	    FormBuilder.prototype.array = function (controlsConfig, validator) {
	        var _this = this;
	        if (validator === void 0) { validator = null; }
	        var controls = collection_1.ListWrapper.map(controlsConfig, function (c) { return _this._createControl(c); });
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.ControlArray(controls, validator);
	        }
	        else {
	            return new modelModule.ControlArray(controls);
	        }
	    };
	    FormBuilder.prototype._reduceControls = function (controlsConfig) {
	        var _this = this;
	        var controls = {};
	        collection_1.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
	            controls[controlName] = _this._createControl(controlConfig);
	        });
	        return controls;
	    };
	    FormBuilder.prototype._createControl = function (controlConfig) {
	        if (controlConfig instanceof modelModule.Control ||
	            controlConfig instanceof modelModule.ControlGroup ||
	            controlConfig instanceof modelModule.ControlArray) {
	            return controlConfig;
	        }
	        else if (lang_1.isArray(controlConfig)) {
	            var value = collection_1.ListWrapper.get(controlConfig, 0);
	            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	            return this.control(value, validator);
	        }
	        else {
	            return this.control(controlConfig);
	        }
	    };
	    return FormBuilder;
	})();
	exports.FormBuilder = FormBuilder;
	//# sourceMappingURL=form_builder.js.map

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var _nextRequestId = 0;
	exports.JSONP_HOME = '__ng_jsonp__';
	var _jsonpConnections = null;
	function _getJsonpConnections() {
	    if (_jsonpConnections === null) {
	        _jsonpConnections = lang_1.global[exports.JSONP_HOME] = {};
	    }
	    return _jsonpConnections;
	}
	// Make sure not to evaluate this in a non-browser environment!
	var BrowserJsonp = (function () {
	    function BrowserJsonp() {
	    }
	    // Construct a <script> element with the specified URL
	    BrowserJsonp.prototype.build = function (url) {
	        var node = document.createElement('script');
	        node.src = url;
	        return node;
	    };
	    BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
	    BrowserJsonp.prototype.requestCallback = function (id) { return exports.JSONP_HOME + "." + id + ".finished"; };
	    BrowserJsonp.prototype.exposeConnection = function (id, connection) {
	        var connections = _getJsonpConnections();
	        connections[id] = connection;
	    };
	    BrowserJsonp.prototype.removeConnection = function (id) {
	        var connections = _getJsonpConnections();
	        connections[id] = null;
	    };
	    // Attach the <script> element to the DOM
	    BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };
	    // Remove <script> element from the DOM
	    BrowserJsonp.prototype.cleanup = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild((node));
	        }
	    };
	    BrowserJsonp = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserJsonp);
	    return BrowserJsonp;
	})();
	exports.BrowserJsonp = BrowserJsonp;
	//# sourceMappingURL=browser_jsonp.js.map

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	// Make sure not to evaluate this in a non-browser environment!
	var BrowserXhr = (function () {
	    function BrowserXhr() {
	    }
	    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };
	    BrowserXhr = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], BrowserXhr);
	    return BrowserXhr;
	})();
	exports.BrowserXhr = BrowserXhr;
	//# sourceMappingURL=browser_xhr.js.map

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var enums_1 = __webpack_require__(22);
	var static_response_1 = __webpack_require__(85);
	var base_response_options_1 = __webpack_require__(54);
	var di_1 = __webpack_require__(3);
	var browser_jsonp_1 = __webpack_require__(145);
	var async_1 = __webpack_require__(5);
	var lang_1 = __webpack_require__(1);
	var JSONPConnection = (function () {
	    function JSONPConnection(req, _dom, baseResponseOptions) {
	        var _this = this;
	        this._dom = _dom;
	        this.baseResponseOptions = baseResponseOptions;
	        this._finished = false;
	        if (req.method !== enums_1.RequestMethods.GET) {
	            throw lang_1.makeTypeError("JSONP requests must use GET request method.");
	        }
	        this.request = req;
	        this.response = new async_1.EventEmitter();
	        this.readyState = enums_1.ReadyStates.LOADING;
	        this._id = _dom.nextRequestID();
	        _dom.exposeConnection(this._id, this);
	        // Workaround Dart
	        // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
	        var callback = _dom.requestCallback(this._id);
	        var url = req.url;
	        if (url.indexOf('=JSONP_CALLBACK&') > -1) {
	            url = lang_1.StringWrapper.replace(url, '=JSONP_CALLBACK&', "=" + callback + "&");
	        }
	        else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
	            url = lang_1.StringWrapper.substring(url, 0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
	        }
	        var script = this._script = _dom.build(url);
	        script.addEventListener('load', function (event) {
	            if (_this.readyState === enums_1.ReadyStates.CANCELLED)
	                return;
	            _this.readyState = enums_1.ReadyStates.DONE;
	            _dom.cleanup(script);
	            if (!_this._finished) {
	                async_1.ObservableWrapper.callThrow(_this.response, lang_1.makeTypeError('JSONP injected script did not invoke callback.'));
	                return;
	            }
	            var responseOptions = new base_response_options_1.ResponseOptions({ body: _this._responseData });
	            if (lang_1.isPresent(_this.baseResponseOptions)) {
	                responseOptions = _this.baseResponseOptions.merge(responseOptions);
	            }
	            async_1.ObservableWrapper.callNext(_this.response, new static_response_1.Response(responseOptions));
	        });
	        script.addEventListener('error', function (error) {
	            if (_this.readyState === enums_1.ReadyStates.CANCELLED)
	                return;
	            _this.readyState = enums_1.ReadyStates.DONE;
	            _dom.cleanup(script);
	            async_1.ObservableWrapper.callThrow(_this.response, error);
	        });
	        _dom.send(script);
	    }
	    JSONPConnection.prototype.finished = function (data) {
	        // Don't leak connections
	        this._finished = true;
	        this._dom.removeConnection(this._id);
	        if (this.readyState === enums_1.ReadyStates.CANCELLED)
	            return;
	        this._responseData = data;
	    };
	    JSONPConnection.prototype.dispose = function () {
	        this.readyState = enums_1.ReadyStates.CANCELLED;
	        var script = this._script;
	        this._script = null;
	        if (lang_1.isPresent(script)) {
	            this._dom.cleanup(script);
	        }
	        async_1.ObservableWrapper.callReturn(this.response);
	    };
	    return JSONPConnection;
	})();
	exports.JSONPConnection = JSONPConnection;
	var JSONPBackend = (function () {
	    function JSONPBackend(_browserJSONP, _baseResponseOptions) {
	        this._browserJSONP = _browserJSONP;
	        this._baseResponseOptions = _baseResponseOptions;
	    }
	    JSONPBackend.prototype.createConnection = function (request) {
	        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);
	    };
	    JSONPBackend = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_jsonp_1.BrowserJsonp, base_response_options_1.ResponseOptions])
	    ], JSONPBackend);
	    return JSONPBackend;
	})();
	exports.JSONPBackend = JSONPBackend;
	//# sourceMappingURL=jsonp_backend.js.map

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var enums_1 = __webpack_require__(22);
	var static_response_1 = __webpack_require__(85);
	var base_response_options_1 = __webpack_require__(54);
	var di_1 = __webpack_require__(3);
	var browser_xhr_1 = __webpack_require__(146);
	var async_1 = __webpack_require__(5);
	var lang_1 = __webpack_require__(1);
	/**
	 * Creates connections using `XMLHttpRequest`. Given a fully-qualified
	 * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
	 * request.
	 *
	 * This class would typically not be created or interacted with directly inside applications, though
	 * the {@link MockConnection} may be interacted with in tests.
	 */
	var XHRConnection = (function () {
	    // https://github.com/angular/ts2dart/issues/230
	    function XHRConnection(req, browserXHR, baseResponseOptions) {
	        var _this = this;
	        // TODO: get rid of this when enum lookups are available in ts2dart
	        // https://github.com/angular/ts2dart/issues/221
	        var requestMethodsMap = new enums_1.RequestMethodsMap();
	        this.request = req;
	        this.response = new async_1.EventEmitter();
	        this._xhr = browserXHR.build();
	        // TODO(jeffbcross): implement error listening/propagation
	        this._xhr.open(requestMethodsMap.getMethod(lang_1.ENUM_INDEX(req.method)), req.url);
	        this._xhr.addEventListener('load', function (_) {
	            var responseOptions = new base_response_options_1.ResponseOptions({ body: lang_1.isPresent(_this._xhr.response) ? _this._xhr.response : _this._xhr.responseText });
	            if (lang_1.isPresent(baseResponseOptions)) {
	                responseOptions = baseResponseOptions.merge(responseOptions);
	            }
	            async_1.ObservableWrapper.callNext(_this.response, new static_response_1.Response(responseOptions));
	        });
	        // TODO(jeffbcross): make this more dynamic based on body type
	        if (lang_1.isPresent(req.headers)) {
	            req.headers.forEach(function (value, name) { _this._xhr.setRequestHeader(name, value); });
	        }
	        this._xhr.send(this.request.text());
	    }
	    /**
	     * Calls abort on the underlying XMLHttpRequest.
	     */
	    XHRConnection.prototype.dispose = function () { this._xhr.abort(); };
	    return XHRConnection;
	})();
	exports.XHRConnection = XHRConnection;
	/**
	 * Creates {@link XHRConnection} instances.
	 *
	 * This class would typically not be used by end users, but could be
	 * overridden if a different backend implementation should be used,
	 * such as in a node backend.
	 *
	 * #Example
	 *
	 * ```
	 * import {Http, MyNodeBackend, httpInjectables, BaseRequestOptions} from 'angular2/http';
	 * @Component({
	 *   viewInjector: [
	 *     httpInjectables,
	 *     bind(Http).toFactory((backend, options) => {
	 *       return new Http(backend, options);
	 *     }, [MyNodeBackend, BaseRequestOptions])]
	 * })
	 * class MyComponent {
	 *   constructor(http:Http) {
	 *     http('people.json').subscribe(res => this.people = res.json());
	 *   }
	 * }
	 * ```
	 *
	 **/
	var XHRBackend = (function () {
	    function XHRBackend(_browserXHR, _baseResponseOptions) {
	        this._browserXHR = _browserXHR;
	        this._baseResponseOptions = _baseResponseOptions;
	    }
	    XHRBackend.prototype.createConnection = function (request) {
	        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
	    };
	    XHRBackend = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [browser_xhr_1.BrowserXhr, base_response_options_1.ResponseOptions])
	    ], XHRBackend);
	    return XHRBackend;
	})();
	exports.XHRBackend = XHRBackend;
	//# sourceMappingURL=xhr_backend.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var decorators_1 = __webpack_require__(50);
	var interfaces_1 = __webpack_require__(56);
	var static_request_1 = __webpack_require__(84);
	var base_request_options_1 = __webpack_require__(83);
	var enums_1 = __webpack_require__(22);
	function httpRequest(backend, request) {
	    return backend.createConnection(request).response;
	}
	function mergeOptions(defaultOpts, providedOpts, method, url) {
	    var newOptions = defaultOpts;
	    if (lang_1.isPresent(providedOpts)) {
	        // Hack so Dart can used named parameters
	        newOptions = newOptions.merge(new base_request_options_1.RequestOptions({
	            method: providedOpts.method,
	            url: providedOpts.url,
	            headers: providedOpts.headers,
	            body: providedOpts.body,
	            mode: providedOpts.mode,
	            credentials: providedOpts.credentials,
	            cache: providedOpts.cache
	        }));
	    }
	    if (lang_1.isPresent(method)) {
	        return newOptions.merge(new base_request_options_1.RequestOptions({ method: method, url: url }));
	    }
	    else {
	        return newOptions.merge(new base_request_options_1.RequestOptions({ url: url }));
	    }
	}
	/**
	 * Performs http requests using `XMLHttpRequest` as the default backend.
	 *
	 * `Http` is available as an injectable class, with methods to perform http requests. Calling
	 * `request` returns an {@link EventEmitter} which will emit a single {@link Response} when a
	 * response is received.
	 *
	 *
	 * ## Breaking Change
	 *
	 * Previously, methods of `Http` would return an RxJS Observable directly. For now,
	 * the `toRx()` method of {@link EventEmitter} needs to be called in order to get the RxJS
	 * Subject. `EventEmitter` does not provide combinators like `map`, and has different semantics for
	 * subscribing/observing. This is temporary; the result of all `Http` method calls will be either an
	 * Observable
	 * or Dart Stream when [issue #2794](https://github.com/angular/angular/issues/2794) is resolved.
	 *
	 * #Example
	 *
	 * ```
	 * import {Http, httpInjectables} from 'angular2/http';
	 * @Component({selector: 'http-app', viewInjector: [httpInjectables]})
	 * @View({templateUrl: 'people.html'})
	 * class PeopleComponent {
	 *   constructor(http: Http) {
	 *     http.get('people.json')
	 *       //Get the RxJS Subject
	 *       .toRx()
	 *       // Call map on the response observable to get the parsed people object
	 *       .map(res => res.json())
	 *       // Subscribe to the observable to get the parsed people object and attach it to the
	 *       // component
	 *       .subscribe(people => this.people = people);
	 *   }
	 * }
	 * ```
	 *
	 * To use the {@link EventEmitter} returned by `Http`, simply pass a generator (See "interface
	 *Generator" in the Async Generator spec: https://github.com/jhusain/asyncgenerator) to the
	 *`observer` method of the returned emitter, with optional methods of `next`, `throw`, and `return`.
	 *
	 * #Example
	 *
	 * ```
	 * http.get('people.json').observer({next: (value) => this.people = people});
	 * ```
	 *
	 * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
	 * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
	 * the {@link XHRBackend} binding, as in the following example:
	 *
	 * #Example
	 *
	 * ```
	 * import {MockBackend, BaseRequestOptions, Http} from 'angular2/http';
	 * var injector = Injector.resolveAndCreate([
	 *   BaseRequestOptions,
	 *   MockBackend,
	 *   bind(Http).toFactory(
	 *       function(backend, defaultOptions) {
	 *         return new Http(backend, defaultOptions);
	 *       },
	 *       [MockBackend, BaseRequestOptions])
	 * ]);
	 * var http = injector.get(Http);
	 * http.get('request-from-mock-backend.json').toRx().subscribe((res:Response) => doSomething(res));
	 * ```
	 *
	 **/
	var Http = (function () {
	    function Http(_backend, _defaultOptions) {
	        this._backend = _backend;
	        this._defaultOptions = _defaultOptions;
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {@link BaseRequestOptions} before performing the request.
	     */
	    Http.prototype.request = function (url, options) {
	        var responseObservable;
	        if (lang_1.isString(url)) {
	            responseObservable = httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.GET, url)));
	        }
	        else if (url instanceof static_request_1.Request) {
	            responseObservable = httpRequest(this._backend, url);
	        }
	        return responseObservable;
	    };
	    /**
	     * Performs a request with `get` http method.
	     */
	    Http.prototype.get = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.GET, url)));
	    };
	    /**
	     * Performs a request with `post` http method.
	     */
	    Http.prototype.post = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethods.POST, url)));
	    };
	    /**
	     * Performs a request with `put` http method.
	     */
	    Http.prototype.put = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethods.PUT, url)));
	    };
	    /**
	     * Performs a request with `delete` http method.
	     */
	    Http.prototype.delete = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.DELETE, url)));
	    };
	    /**
	     * Performs a request with `patch` http method.
	     */
	    Http.prototype.patch = function (url, body, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({ body: body })), options, enums_1.RequestMethods.PATCH, url)));
	    };
	    /**
	     * Performs a request with `head` http method.
	     */
	    Http.prototype.head = function (url, options) {
	        return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.HEAD, url)));
	    };
	    Http = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [interfaces_1.ConnectionBackend, base_request_options_1.RequestOptions])
	    ], Http);
	    return Http;
	})();
	exports.Http = Http;
	var Jsonp = (function (_super) {
	    __extends(Jsonp, _super);
	    function Jsonp(backend, defaultOptions) {
	        _super.call(this, backend, defaultOptions);
	    }
	    /**
	     * Performs any type of http request. First argument is required, and can either be a url or
	     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
	     * object can be provided as the 2nd argument. The options object will be merged with the values
	     * of {@link BaseRequestOptions} before performing the request.
	     */
	    Jsonp.prototype.request = function (url, options) {
	        var responseObservable;
	        if (lang_1.isString(url)) {
	            url = new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethods.GET, url));
	        }
	        if (url instanceof static_request_1.Request) {
	            if (url.method !== enums_1.RequestMethods.GET) {
	                lang_1.makeTypeError('JSONP requests must use GET request method.');
	            }
	            responseObservable = httpRequest(this._backend, url);
	        }
	        return responseObservable;
	    };
	    Jsonp = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [interfaces_1.ConnectionBackend, base_request_options_1.RequestOptions])
	    ], Jsonp);
	    return Jsonp;
	})(Http);
	exports.Jsonp = Jsonp;
	//# sourceMappingURL=http.js.map

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var Reflector = (function () {
	    function Reflector(reflectionCapabilities) {
	        this._injectableInfo = new collection_1.Map();
	        this._getters = new collection_1.Map();
	        this._setters = new collection_1.Map();
	        this._methods = new collection_1.Map();
	        this.reflectionCapabilities = reflectionCapabilities;
	    }
	    Reflector.prototype.isReflectionEnabled = function () { return this.reflectionCapabilities.isReflectionEnabled(); };
	    Reflector.prototype.registerFunction = function (func, funcInfo) {
	        this._injectableInfo.set(func, funcInfo);
	    };
	    Reflector.prototype.registerType = function (type, typeInfo) {
	        this._injectableInfo.set(type, typeInfo);
	    };
	    Reflector.prototype.registerGetters = function (getters) {
	        _mergeMaps(this._getters, getters);
	    };
	    Reflector.prototype.registerSetters = function (setters) {
	        _mergeMaps(this._setters, setters);
	    };
	    Reflector.prototype.registerMethods = function (methods) {
	        _mergeMaps(this._methods, methods);
	    };
	    Reflector.prototype.factory = function (type) {
	        if (this._containsTypeInfo(type)) {
	            return this._getTypeInfoField(type, "factory", null);
	        }
	        else {
	            return this.reflectionCapabilities.factory(type);
	        }
	    };
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            return this._getTypeInfoField(typeOrFunc, "parameters", []);
	        }
	        else {
	            return this.reflectionCapabilities.parameters(typeOrFunc);
	        }
	    };
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        if (this._injectableInfo.has(typeOrFunc)) {
	            return this._getTypeInfoField(typeOrFunc, "annotations", []);
	        }
	        else {
	            return this.reflectionCapabilities.annotations(typeOrFunc);
	        }
	    };
	    Reflector.prototype.interfaces = function (type) {
	        if (this._injectableInfo.has(type)) {
	            return this._getTypeInfoField(type, "interfaces", []);
	        }
	        else {
	            return this.reflectionCapabilities.interfaces(type);
	        }
	    };
	    Reflector.prototype.getter = function (name) {
	        if (this._getters.has(name)) {
	            return this._getters.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.getter(name);
	        }
	    };
	    Reflector.prototype.setter = function (name) {
	        if (this._setters.has(name)) {
	            return this._setters.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.setter(name);
	        }
	    };
	    Reflector.prototype.method = function (name) {
	        if (this._methods.has(name)) {
	            return this._methods.get(name);
	        }
	        else {
	            return this.reflectionCapabilities.method(name);
	        }
	    };
	    Reflector.prototype._getTypeInfoField = function (typeOrFunc, key, defaultValue) {
	        var res = this._injectableInfo.get(typeOrFunc)[key];
	        return lang_1.isPresent(res) ? res : defaultValue;
	    };
	    Reflector.prototype._containsTypeInfo = function (typeOrFunc) { return this._injectableInfo.has(typeOrFunc); };
	    return Reflector;
	})();
	exports.Reflector = Reflector;
	function _mergeMaps(target, config) {
	    collection_1.StringMapWrapper.forEach(config, function (v, k) { return target.set(k, v); });
	}
	//# sourceMappingURL=reflector.js.map

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var dom_adapter_1 = __webpack_require__(6);
	var lang_1 = __webpack_require__(1);
	/**
	 * Collects all data that is needed to process an element
	 * in the compile process. Fields are filled
	 * by the CompileSteps starting out with the pure HTMLElement.
	 */
	var CompileElement = (function () {
	    // error
	    function CompileElement(element, compilationUnit) {
	        if (compilationUnit === void 0) { compilationUnit = ''; }
	        this.element = element;
	        this._attrs = null;
	        this._classList = null;
	        this.isViewRoot = false;
	        // inherited down to children if they don't have an own protoView
	        this.inheritedProtoView = null;
	        this.distanceToInheritedBinder = 0;
	        // inherited down to children if they don't have an own elementBinder
	        this.inheritedElementBinder = null;
	        this.compileChildren = true;
	        // description is calculated here as compilation steps may change the element
	        var tplDesc = lang_1.assertionsEnabled() ? getElementDescription(element) : null;
	        if (compilationUnit !== '') {
	            this.elementDescription = compilationUnit;
	            if (lang_1.isPresent(tplDesc))
	                this.elementDescription += ": " + tplDesc;
	        }
	        else {
	            this.elementDescription = tplDesc;
	        }
	    }
	    CompileElement.prototype.isBound = function () {
	        return lang_1.isPresent(this.inheritedElementBinder) && this.distanceToInheritedBinder === 0;
	    };
	    CompileElement.prototype.bindElement = function () {
	        if (!this.isBound()) {
	            var parentBinder = this.inheritedElementBinder;
	            this.inheritedElementBinder =
	                this.inheritedProtoView.bindElement(this.element, this.elementDescription);
	            if (lang_1.isPresent(parentBinder)) {
	                this.inheritedElementBinder.setParent(parentBinder, this.distanceToInheritedBinder);
	            }
	            this.distanceToInheritedBinder = 0;
	        }
	        return this.inheritedElementBinder;
	    };
	    CompileElement.prototype.refreshAttrs = function () { this._attrs = null; };
	    CompileElement.prototype.attrs = function () {
	        if (lang_1.isBlank(this._attrs)) {
	            this._attrs = dom_adapter_1.DOM.attributeMap(this.element);
	        }
	        return this._attrs;
	    };
	    CompileElement.prototype.refreshClassList = function () { this._classList = null; };
	    CompileElement.prototype.classList = function () {
	        if (lang_1.isBlank(this._classList)) {
	            this._classList = [];
	            var elClassList = dom_adapter_1.DOM.classList(this.element);
	            for (var i = 0; i < elClassList.length; i++) {
	                this._classList.push(elClassList[i]);
	            }
	        }
	        return this._classList;
	    };
	    return CompileElement;
	})();
	exports.CompileElement = CompileElement;
	// return an HTML representation of an element start tag - without its content
	// this is used to give contextual information in case of errors
	function getElementDescription(domElement) {
	    var buf = new lang_1.StringJoiner();
	    var atts = dom_adapter_1.DOM.attributeMap(domElement);
	    buf.add("<");
	    buf.add(dom_adapter_1.DOM.tagName(domElement).toLowerCase());
	    // show id and class first to ease element identification
	    addDescriptionAttribute(buf, "id", atts.get("id"));
	    addDescriptionAttribute(buf, "class", atts.get("class"));
	    collection_1.MapWrapper.forEach(atts, function (attValue, attName) {
	        if (attName !== "id" && attName !== "class") {
	            addDescriptionAttribute(buf, attName, attValue);
	        }
	    });
	    buf.add(">");
	    return buf.toString();
	}
	function addDescriptionAttribute(buffer, attName, attValue) {
	    if (lang_1.isPresent(attValue)) {
	        if (attValue.length === 0) {
	            buffer.add(' ' + attName);
	        }
	        else {
	            buffer.add(' ' + attName + '="' + attValue + '"');
	        }
	    }
	}
	//# sourceMappingURL=compile_element.js.map

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var xhr_1 = __webpack_require__(58);
	var collection_1 = __webpack_require__(2);
	var url_resolver_1 = __webpack_require__(42);
	var style_url_resolver_1 = __webpack_require__(86);
	var lang_1 = __webpack_require__(1);
	var async_1 = __webpack_require__(5);
	/**
	 * Inline @import rules in the given CSS.
	 *
	 * When an @import rules is inlined, it's url are rewritten.
	 */
	var StyleInliner = (function () {
	    function StyleInliner(_xhr, _styleUrlResolver, _urlResolver) {
	        this._xhr = _xhr;
	        this._styleUrlResolver = _styleUrlResolver;
	        this._urlResolver = _urlResolver;
	    }
	    /**
	     * Inline the @imports rules in the given CSS text.
	     *
	     * The baseUrl is required to rewrite URLs in the inlined content.
	     *
	     * @param {string} cssText
	     * @param {string} baseUrl
	     * @returns {*} a Promise<string> when @import rules are present, a string otherwise
	     */
	    StyleInliner.prototype.inlineImports = function (cssText, baseUrl) {
	        return this._inlineImports(cssText, baseUrl, []);
	    };
	    StyleInliner.prototype._inlineImports = function (cssText, baseUrl, inlinedUrls) {
	        var _this = this;
	        var partIndex = 0;
	        var parts = lang_1.StringWrapper.split(cssText, _importRe);
	        if (parts.length === 1) {
	            // no @import rule found, return the original css
	            return cssText;
	        }
	        var promises = [];
	        while (partIndex < parts.length - 1) {
	            // prefix is the content before the @import rule
	            var prefix = parts[partIndex];
	            // rule is the parameter of the @import rule
	            var rule = parts[partIndex + 1];
	            var url = _extractUrl(rule);
	            if (lang_1.isPresent(url)) {
	                url = this._urlResolver.resolve(baseUrl, url);
	            }
	            var mediaQuery = _extractMediaQuery(rule);
	            var promise;
	            if (lang_1.isBlank(url)) {
	                promise = async_1.PromiseWrapper.resolve("/* Invalid import rule: \"@import " + rule + ";\" */");
	            }
	            else if (collection_1.ListWrapper.contains(inlinedUrls, url)) {
	                // The current import rule has already been inlined, return the prefix only
	                // Importing again might cause a circular dependency
	                promise = async_1.PromiseWrapper.resolve(prefix);
	            }
	            else {
	                inlinedUrls.push(url);
	                promise = async_1.PromiseWrapper.then(this._xhr.get(url), function (rawCss) {
	                    // resolve nested @import rules
	                    var inlinedCss = _this._inlineImports(rawCss, url, inlinedUrls);
	                    if (lang_1.isPromise(inlinedCss)) {
	                        // wait until nested @import are inlined
	                        return inlinedCss
	                            .then(function (css) { return prefix + _this._transformImportedCss(css, mediaQuery, url) + '\n'; });
	                    }
	                    else {
	                        // there are no nested @import, return the css
	                        return prefix + _this._transformImportedCss(inlinedCss, mediaQuery, url) + '\n';
	                    }
	                }, function (error) { return ("/* failed to import " + url + " */\n"); });
	            }
	            promises.push(promise);
	            partIndex += 2;
	        }
	        return async_1.PromiseWrapper.all(promises).then(function (cssParts) {
	            var cssText = cssParts.join('');
	            if (partIndex < parts.length) {
	                // append then content located after the last @import rule
	                cssText += parts[partIndex];
	            }
	            return cssText;
	        });
	    };
	    StyleInliner.prototype._transformImportedCss = function (css, mediaQuery, url) {
	        css = this._styleUrlResolver.resolveUrls(css, url);
	        return _wrapInMediaRule(css, mediaQuery);
	    };
	    StyleInliner = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [xhr_1.XHR, style_url_resolver_1.StyleUrlResolver, url_resolver_1.UrlResolver])
	    ], StyleInliner);
	    return StyleInliner;
	})();
	exports.StyleInliner = StyleInliner;
	// Extracts the url from an import rule, supported formats:
	// - 'url' / "url",
	// - url(url) / url('url') / url("url")
	function _extractUrl(importRule) {
	    var match = lang_1.RegExpWrapper.firstMatch(_urlRe, importRule);
	    if (lang_1.isBlank(match))
	        return null;
	    return lang_1.isPresent(match[1]) ? match[1] : match[2];
	}
	// Extracts the media query from an import rule.
	// Returns null when there is no media query.
	function _extractMediaQuery(importRule) {
	    var match = lang_1.RegExpWrapper.firstMatch(_mediaQueryRe, importRule);
	    if (lang_1.isBlank(match))
	        return null;
	    var mediaQuery = match[1].trim();
	    return (mediaQuery.length > 0) ? mediaQuery : null;
	}
	// Wraps the css in a media rule when the media query is not null
	function _wrapInMediaRule(css, query) {
	    return (lang_1.isBlank(query)) ? css : "@media " + query + " {\n" + css + "\n}";
	}
	var _importRe = /@import\s+([^;]+);/g;
	var _urlRe = lang_1.RegExpWrapper.create('url\\(\\s*?[\'"]?([^\'")]+)[\'"]?|' +
	    '[\'"]([^\'")]+)[\'"]' // "url" or 'url'
	);
	var _mediaQueryRe = /['"][^'"]+['"]\s*\)?\s*(.*)/g;
	//# sourceMappingURL=style_inliner.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var dom_adapter_1 = __webpack_require__(6);
	var shadow_css_1 = __webpack_require__(204);
	var _componentUIDs = new collection_1.Map();
	var _nextComponentUID = 0;
	var _sharedStyleTexts = new collection_1.Map();
	var _lastInsertedStyleEl;
	function getComponentId(componentStringId) {
	    var id = _componentUIDs.get(componentStringId);
	    if (lang_1.isBlank(id)) {
	        id = _nextComponentUID++;
	        _componentUIDs.set(componentStringId, id);
	    }
	    return id;
	}
	exports.getComponentId = getComponentId;
	function insertSharedStyleText(cssText, styleHost, styleEl) {
	    if (!_sharedStyleTexts.has(cssText)) {
	        // Styles are unscoped and shared across components, only append them to the head
	        // when there are not present yet
	        _sharedStyleTexts.set(cssText, true);
	        insertStyleElement(styleHost, styleEl);
	    }
	}
	exports.insertSharedStyleText = insertSharedStyleText;
	function insertStyleElement(host, styleEl) {
	    if (lang_1.isBlank(_lastInsertedStyleEl)) {
	        var firstChild = dom_adapter_1.DOM.firstChild(host);
	        if (lang_1.isPresent(firstChild)) {
	            dom_adapter_1.DOM.insertBefore(firstChild, styleEl);
	        }
	        else {
	            dom_adapter_1.DOM.appendChild(host, styleEl);
	        }
	    }
	    else {
	        dom_adapter_1.DOM.insertAfter(_lastInsertedStyleEl, styleEl);
	    }
	    _lastInsertedStyleEl = styleEl;
	}
	exports.insertStyleElement = insertStyleElement;
	// Return the attribute to be added to the component
	function getHostAttribute(id) {
	    return "_nghost-" + id;
	}
	exports.getHostAttribute = getHostAttribute;
	// Returns the attribute to be added on every single element nodes in the component
	function getContentAttribute(id) {
	    return "_ngcontent-" + id;
	}
	exports.getContentAttribute = getContentAttribute;
	function shimCssForComponent(cssText, componentId) {
	    var id = getComponentId(componentId);
	    var shadowCss = new shadow_css_1.ShadowCss();
	    return shadowCss.shimCssText(cssText, getContentAttribute(id), getHostAttribute(id));
	}
	exports.shimCssForComponent = shimCssForComponent;
	// Reset the caches - used for tests only
	function resetShadowDomCache() {
	    _componentUIDs.clear();
	    _nextComponentUID = 0;
	    _sharedStyleTexts.clear();
	    _lastInsertedStyleEl = null;
	}
	exports.resetShadowDomCache = resetShadowDomCache;
	//# sourceMappingURL=util.js.map

/***/ },
/* 154 */
/***/ function(module, exports) {

	'use strict';var DomElementBinder = (function () {
	    function DomElementBinder(_a) {
	        var _b = _a === void 0 ? {} : _a, textNodeIndices = _b.textNodeIndices, hasNestedProtoView = _b.hasNestedProtoView, eventLocals = _b.eventLocals, localEvents = _b.localEvents, globalEvents = _b.globalEvents, hasNativeShadowRoot = _b.hasNativeShadowRoot;
	        this.textNodeIndices = textNodeIndices;
	        this.hasNestedProtoView = hasNestedProtoView;
	        this.eventLocals = eventLocals;
	        this.localEvents = localEvents;
	        this.globalEvents = globalEvents;
	        this.hasNativeShadowRoot = hasNativeShadowRoot;
	    }
	    return DomElementBinder;
	})();
	exports.DomElementBinder = DomElementBinder;
	var Event = (function () {
	    function Event(name, target, fullName) {
	        this.name = name;
	        this.target = target;
	        this.fullName = fullName;
	    }
	    return Event;
	})();
	exports.Event = Event;
	var HostAction = (function () {
	    function HostAction(actionName, actionExpression, expression) {
	        this.actionName = actionName;
	        this.actionExpression = actionExpression;
	        this.expression = expression;
	    }
	    return HostAction;
	})();
	exports.HostAction = HostAction;
	//# sourceMappingURL=element_binder.js.map

/***/ },
/* 155 */,
/* 156 */,
/* 157 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(252)
	
	var md5 = toConstructor(__webpack_require__(248))
	var rmd160 = toConstructor(__webpack_require__(250))
	
	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}
	
	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))

/***/ },
/* 159 */
/***/ function(module, exports) {

	'use strict';
	
	// might need similar for object.freeze
	// i regret nothing
	
	var _defineProperty = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	
	function apply() {
	  Object.defineProperty = function (obj, prop, desc) {
	    if (isUnconfigurable(obj, prop)) {
	      throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	    }
	    if (prop !== 'prototype') {
	      desc = rewriteDescriptor(obj, prop, desc);
	    }
	    return _defineProperty(obj, prop, desc);
	  };
	
	  Object.defineProperties = function (obj, props) {
	    Object.keys(props).forEach(function (prop) {
	      Object.defineProperty(obj, prop, props[prop]);
	    });
	    return obj;
	  };
	
	  Object.create = function (obj, proto) {
	    if (typeof proto === 'object') {
	      Object.keys(proto).forEach(function (prop) {
	        proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	      });
	    }
	    return _create(obj, proto);
	  };
	
	  Object.getOwnPropertyDescriptor = function (obj, prop) {
	    var desc = _getOwnPropertyDescriptor(obj, prop);
	    if (isUnconfigurable(obj, prop)) {
	      desc.configurable = false;
	    }
	    return desc;
	  };
	};
	
	function _redefineProperty(obj, prop, desc) {
	  desc = rewriteDescriptor(obj, prop, desc);
	  return _defineProperty(obj, prop, desc);
	};
	
	function isUnconfigurable (obj, prop) {
	  return obj && obj.__unconfigurables && obj.__unconfigurables[prop];
	}
	
	function rewriteDescriptor (obj, prop, desc) {
	  desc.configurable = true;
	  if (!desc.configurable) {
	    if (!obj.__unconfigurables) {
	      _defineProperty(obj, '__unconfigurables', { writable: true, value: {} });
	    }
	    obj.__unconfigurables[prop] = true;
	  }
	  return desc;
	}
	
	module.exports = {
	  apply: apply,
	  _redefineProperty: _redefineProperty
	};
	
	


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var utils = __webpack_require__(29);
	
	/*
	 * Patches a function that returns a Promise-like instance.
	 *
	 * This function must be used when either:
	 * - Native Promises are not available,
	 * - The function returns a Promise-like object.
	 *
	 * This is required because zones rely on a Promise monkey patch that could not be applied when
	 * Promise is not natively available or when the returned object is not an instance of Promise.
	 *
	 * Note that calling `bindPromiseFn` on a function that returns a native Promise will also work
	 * with minimal overhead.
	 *
	 * ```
	 * var boundFunction = bindPromiseFn(FunctionReturningAPromise);
	 *
	 * boundFunction.then(successHandler, errorHandler);
	 * ```
	 */
	var bindPromiseFn;
	
	if (global.Promise) {
	  bindPromiseFn = function (delegate) {
	    return function() {
	      var delegatePromise = delegate.apply(this, arguments);
	
	      // if the delegate returned an instance of Promise, forward it.
	      if (delegatePromise instanceof Promise) {
	        return delegatePromise;
	      }
	
	      // Otherwise wrap the Promise-like in a global Promise
	      return new Promise(function(resolve, reject) {
	        delegatePromise.then(resolve, reject);
	      });
	    };
	  };
	} else {
	  bindPromiseFn = function (delegate) {
	    return function () {
	      return _patchThenable(delegate.apply(this, arguments));
	    };
	  };
	}
	
	
	function _patchPromiseFnsOnObject(objectPath, fnNames) {
	  var obj = global;
	
	  var exists = objectPath.every(function (segment) {
	    obj = obj[segment];
	    return obj;
	  });
	
	  if (!exists) {
	    return;
	  }
	
	  fnNames.forEach(function (name) {
	    var fn = obj[name];
	    if (fn) {
	      obj[name] = bindPromiseFn(fn);
	    }
	  });
	}
	
	function _patchThenable(thenable) {
	  var then = thenable.then;
	  thenable.then = function () {
	    var args = utils.bindArguments(arguments);
	    var nextThenable = then.apply(thenable, args);
	    return _patchThenable(nextThenable);
	  };
	
	  var ocatch = thenable.catch;
	  thenable.catch = function () {
	    var args = utils.bindArguments(arguments);
	    var nextThenable = ocatch.apply(thenable, args);
	    return _patchThenable(nextThenable);
	  };
	
	  return thenable;
	}
	
	
	function apply() {
	  // Patch .then() and .catch() on native Promises to execute callbacks in the zone where
	  // those functions are called.
	  if (global.Promise) {
	    utils.patchPrototype(Promise.prototype, [
	      'then',
	      'catch'
	    ]);
	
	    // Patch browser APIs that return a Promise
	    var patchFns = [
	      // fetch
	      [[], ['fetch']],
	      [['Response', 'prototype'], ['arrayBuffer', 'blob', 'json', 'text']]
	    ];
	
	    patchFns.forEach(function(objPathAndFns) {
	      _patchPromiseFnsOnObject(objPathAndFns[0], objPathAndFns[1]);
	    });
	  }
	}
	
	module.exports = {
	  apply: apply,
	  bindPromiseFn: bindPromiseFn
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var utils = __webpack_require__(29);
	
	// we have to patch the instance since the proto is non-configurable
	function apply() {
	  var WS = global.WebSocket;
	  utils.patchEventTargetMethods(WS.prototype);
	  global.WebSocket = function(a, b) {
	    var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	    var proxySocket;
	
	    // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	    var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	    if (onmessageDesc && onmessageDesc.configurable === false) {
	      proxySocket = Object.create(socket);
	      ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function(propName) {
	        proxySocket[propName] = function() {
	          return socket[propName].apply(socket, arguments);
	        };
	      });
	    } else {
	      // we can patch the real socket
	      proxySocket = socket;
	    }
	
	    utils.patchProperties(proxySocket, ['onclose', 'onerror', 'onmessage', 'onopen']);
	
	    return proxySocket;
	  };
	}
	
	module.exports = {
	  apply: apply
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * Common directives shipped with Angular.
	 */
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var lang_1 = __webpack_require__(1);
	var ng_for_1 = __webpack_require__(139);
	var ng_if_1 = __webpack_require__(140);
	var ng_non_bindable_1 = __webpack_require__(141);
	var ng_switch_1 = __webpack_require__(142);
	__export(__webpack_require__(179));
	__export(__webpack_require__(139));
	__export(__webpack_require__(140));
	__export(__webpack_require__(141));
	__export(__webpack_require__(180));
	__export(__webpack_require__(142));
	/**
	 * A collection of the Angular core directives that are likely to be used in each and every Angular
	 * application.
	 *
	 * This collection can be used to quickly enumerate all the built-in directives in the `@View`
	 * annotation. For example,
	 * instead of writing:
	 *
	 * ```
	 * import {If, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from 'angular2/angular2';
	 * import {OtherDirective} from 'myDirectives';
	 *
	 * @Component({
	 *  selector: 'my-component'
	 * })
	 * @View({
	 *   templateUrl: 'myComponent.html',
	 *   directives: [If, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 * one could enumerate all the core directives at once:
	 *
	 * ```
	 * import {coreDirectives} from 'angular2/angular2';
	 * import {OtherDirective} from 'myDirectives';
	 *
	 * @Component({
	 *  selector: 'my-component'
	 * })
	 * @View({
	 *   templateUrl: 'myComponent.html',
	 *   directives: [coreDirectives, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 *
	 */
	exports.coreDirectives = lang_1.CONST_EXPR([ng_for_1.NgFor, ng_if_1.NgIf, ng_non_bindable_1.NgNonBindable, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);
	//# sourceMappingURL=directives.js.map

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/**
	 * @module
	 * @description
	 * The http module provides services to perform http requests. To get started, see the {@link Http}
	 * class.
	 */
	var di_1 = __webpack_require__(3);
	var http_1 = __webpack_require__(149);
	var xhr_backend_1 = __webpack_require__(148);
	var jsonp_backend_1 = __webpack_require__(147);
	var browser_xhr_1 = __webpack_require__(146);
	var browser_jsonp_1 = __webpack_require__(145);
	var base_request_options_1 = __webpack_require__(83);
	var interfaces_1 = __webpack_require__(56);
	var mock_backend_1 = __webpack_require__(186);
	exports.MockConnection = mock_backend_1.MockConnection;
	exports.MockBackend = mock_backend_1.MockBackend;
	var static_request_1 = __webpack_require__(84);
	exports.Request = static_request_1.Request;
	var static_response_1 = __webpack_require__(85);
	exports.Response = static_response_1.Response;
	var base_response_options_1 = __webpack_require__(54);
	var interfaces_2 = __webpack_require__(56);
	exports.Connection = interfaces_2.Connection;
	exports.ConnectionBackend = interfaces_2.ConnectionBackend;
	var base_request_options_2 = __webpack_require__(83);
	exports.BaseRequestOptions = base_request_options_2.BaseRequestOptions;
	exports.RequestOptions = base_request_options_2.RequestOptions;
	var base_response_options_2 = __webpack_require__(54);
	exports.BaseResponseOptions = base_response_options_2.BaseResponseOptions;
	exports.ResponseOptions = base_response_options_2.ResponseOptions;
	var xhr_backend_2 = __webpack_require__(148);
	exports.XHRBackend = xhr_backend_2.XHRBackend;
	exports.XHRConnection = xhr_backend_2.XHRConnection;
	var jsonp_backend_2 = __webpack_require__(147);
	exports.JSONPBackend = jsonp_backend_2.JSONPBackend;
	exports.JSONPConnection = jsonp_backend_2.JSONPConnection;
	var http_2 = __webpack_require__(149);
	exports.Http = http_2.Http;
	exports.Jsonp = http_2.Jsonp;
	var headers_1 = __webpack_require__(55);
	exports.Headers = headers_1.Headers;
	var enums_1 = __webpack_require__(22);
	exports.ResponseTypes = enums_1.ResponseTypes;
	exports.ReadyStates = enums_1.ReadyStates;
	exports.RequestMethods = enums_1.RequestMethods;
	exports.RequestCredentialsOpts = enums_1.RequestCredentialsOpts;
	exports.RequestCacheOpts = enums_1.RequestCacheOpts;
	exports.RequestModesOpts = enums_1.RequestModesOpts;
	var url_search_params_1 = __webpack_require__(188);
	exports.URLSearchParams = url_search_params_1.URLSearchParams;
	/**
	 * Provides a basic set of injectables to use the {@link Http} service in any application.
	 *
	 * #Example
	 *
	 * ```
	 * import {httpInjectables, Http} from 'angular2/http';
	 * @Component({selector: 'http-app', viewInjector: [httpInjectables]})
	 * @View({template: '{{data}}'})
	 * class MyApp {
	 *   constructor(http:Http) {
	 *     http.request('data.txt').subscribe(res => this.data = res.text());
	 *   }
	 * }
	 * ```
	 *
	 */
	exports.httpInjectables = [
	    di_1.bind(interfaces_1.ConnectionBackend)
	        .toClass(xhr_backend_1.XHRBackend),
	    browser_xhr_1.BrowserXhr,
	    di_1.bind(base_request_options_1.RequestOptions).toClass(base_request_options_1.BaseRequestOptions),
	    di_1.bind(base_response_options_1.ResponseOptions).toClass(base_response_options_1.BaseResponseOptions),
	    http_1.Http
	];
	exports.jsonpInjectables = [
	    di_1.bind(interfaces_1.ConnectionBackend)
	        .toClass(jsonp_backend_1.JSONPBackend),
	    browser_jsonp_1.BrowserJsonp,
	    di_1.bind(base_request_options_1.RequestOptions).toClass(base_request_options_1.BaseRequestOptions),
	    di_1.bind(base_response_options_1.ResponseOptions).toClass(base_response_options_1.BaseResponseOptions),
	    http_1.Jsonp
	];
	//# sourceMappingURL=http.js.map

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, process) {// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.
	
	;(function (undefined) {
	
	  var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	  };
	
	  var root = (objectTypes[typeof window] && window) || this,
	    freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
	    freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
	    moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
	    freeGlobal = objectTypes[typeof global] && global;
	
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    root = freeGlobal;
	  }
	
	  var Rx = {
	      internals: {},
	      config: {
	        Promise: root.Promise
	      },
	      helpers: { }
	  };
	
	  // Defaults
	  var noop = Rx.helpers.noop = function () { },
	    notDefined = Rx.helpers.notDefined = function (x) { return typeof x === 'undefined'; },
	    isScheduler = Rx.helpers.isScheduler = function (x) { return x instanceof Rx.Scheduler; },
	    identity = Rx.helpers.identity = function (x) { return x; },
	    pluck = Rx.helpers.pluck = function (property) { return function (x) { return x[property]; }; },
	    just = Rx.helpers.just = function (value) { return function () { return value; }; },
	    defaultNow = Rx.helpers.defaultNow = Date.now,
	    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
	    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
	    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
	    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
	    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.then === 'function'; },
	    asArray = Rx.helpers.asArray = function () { return Array.prototype.slice.call(arguments); },
	    not = Rx.helpers.not = function (a) { return !a; },
	    isFunction = Rx.helpers.isFunction = (function () {
	
	      var isFn = function (value) {
	        return typeof value == 'function' || false;
	      }
	
	      // fallback for older versions of Chrome and Safari
	      if (isFn(/x/)) {
	        isFn = function(value) {
	          return typeof value == 'function' && toString.call(value) == '[object Function]';
	        };
	      }
	
	      return isFn;
	    }());
	
	  function cloneArray(arr) { for(var a = [], i = 0, len = arr.length; i < len; i++) { a.push(arr[i]); } return a;}
	
	  Rx.config.longStackSupport = false;
	  var hasStacks = false;
	  try {
	    throw new Error();
	  } catch (e) {
	    hasStacks = !!e.stack;
	  }
	
	  // All code after this point will be filtered from stack traces reported by RxJS
	  var rStartingLine = captureLine(), rFileName;
	
	  var STACK_JUMP_SEPARATOR = "From previous event:";
	
	  function makeStackTraceLong(error, observable) {
	      // If possible, transform the error stack trace by removing Node and RxJS
	      // cruft, then concatenating with the stack trace of `observable`.
	      if (hasStacks &&
	          observable.stack &&
	          typeof error === "object" &&
	          error !== null &&
	          error.stack &&
	          error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	      ) {
	        var stacks = [];
	        for (var o = observable; !!o; o = o.source) {
	          if (o.stack) {
	            stacks.unshift(o.stack);
	          }
	        }
	        stacks.unshift(error.stack);
	
	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	  }
	
	  function filterStackString(stackString) {
	    var lines = stackString.split("\n"),
	        desiredLines = [];
	    for (var i = 0, len = lines.length; i < len; i++) {
	      var line = lines[i];
	
	      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	        desiredLines.push(line);
	      }
	    }
	    return desiredLines.join("\n");
	  }
	
	  function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	    if (!fileNameAndLineNumber) {
	      return false;
	    }
	    var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === rFileName &&
	      lineNumber >= rStartingLine &&
	      lineNumber <= rEndingLine;
	  }
	
	  function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	      stackLine.indexOf("(node.js:") !== -1;
	  }
	
	  function captureLine() {
	    if (!hasStacks) { return; }
	
	    try {
	      throw new Error();
	    } catch (e) {
	      var lines = e.stack.split("\n");
	      var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	      if (!fileNameAndLineNumber) { return; }
	
	      rFileName = fileNameAndLineNumber[0];
	      return fileNameAndLineNumber[1];
	    }
	  }
	
	  function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) { return [attempt1[1], Number(attempt1[2])]; }
	
	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) { return [attempt2[1], Number(attempt2[2])]; }
	
	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) { return [attempt3[1], Number(attempt3[2])]; }
	  }
	
	  var EmptyError = Rx.EmptyError = function() {
	    this.message = 'Sequence contains no elements.';
	    Error.call(this);
	  };
	  EmptyError.prototype = Error.prototype;
	
	  var ObjectDisposedError = Rx.ObjectDisposedError = function() {
	    this.message = 'Object has been disposed';
	    Error.call(this);
	  };
	  ObjectDisposedError.prototype = Error.prototype;
	
	  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
	    this.message = 'Argument out of range';
	    Error.call(this);
	  };
	  ArgumentOutOfRangeError.prototype = Error.prototype;
	
	  var NotSupportedError = Rx.NotSupportedError = function (message) {
	    this.message = message || 'This operation is not supported';
	    Error.call(this);
	  };
	  NotSupportedError.prototype = Error.prototype;
	
	  var NotImplementedError = Rx.NotImplementedError = function (message) {
	    this.message = message || 'This operation is not implemented';
	    Error.call(this);
	  };
	  NotImplementedError.prototype = Error.prototype;
	
	  var notImplemented = Rx.helpers.notImplemented = function () {
	    throw new NotImplementedError();
	  };
	
	  var notSupported = Rx.helpers.notSupported = function () {
	    throw new NotSupportedError();
	  };
	
	  // Shim in iterator support
	  var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) ||
	    '_es6shim_iterator_';
	  // Bug for mozilla version
	  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
	    $iterator$ = '@@iterator';
	  }
	
	  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };
	
	  var isIterable = Rx.helpers.isIterable = function (o) {
	    return o[$iterator$] !== undefined;
	  }
	
	  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
	    return o && o.length !== undefined;
	  }
	
	  Rx.helpers.iterator = $iterator$;
	
	  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
	    if (typeof thisArg === 'undefined') { return func; }
	    switch(argCount) {
	      case 0:
	        return function() {
	          return func.call(thisArg)
	        };
	      case 1:
	        return function(arg) {
	          return func.call(thisArg, arg);
	        }
	      case 2:
	        return function(value, index) {
	          return func.call(thisArg, value, index);
	        };
	      case 3:
	        return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	    }
	
	    return function() {
	      return func.apply(thisArg, arguments);
	    };
	  };
	
	  /** Used to determine if values are of the language type Object */
	  var dontEnums = ['toString',
	    'toLocaleString',
	    'valueOf',
	    'hasOwnProperty',
	    'isPrototypeOf',
	    'propertyIsEnumerable',
	    'constructor'],
	  dontEnumsLength = dontEnums.length;
	
	  /** `Object#toString` result shortcuts */
	  var argsClass = '[object Arguments]',
	    arrayClass = '[object Array]',
	    boolClass = '[object Boolean]',
	    dateClass = '[object Date]',
	    errorClass = '[object Error]',
	    funcClass = '[object Function]',
	    numberClass = '[object Number]',
	    objectClass = '[object Object]',
	    regexpClass = '[object RegExp]',
	    stringClass = '[object String]';
	
	  var toString = Object.prototype.toString,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    supportsArgsClass = toString.call(arguments) == argsClass, // For less <IE9 && FF<4
	    supportNodeClass,
	    errorProto = Error.prototype,
	    objectProto = Object.prototype,
	    stringProto = String.prototype,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	  try {
	    supportNodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
	  } catch (e) {
	    supportNodeClass = true;
	  }
	
	  var nonEnumProps = {};
	  nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
	  nonEnumProps[objectClass] = { 'constructor': true };
	
	  var support = {};
	  (function () {
	    var ctor = function() { this.x = 1; },
	      props = [];
	
	    ctor.prototype = { 'valueOf': 1, 'y': 1 };
	    for (var key in new ctor) { props.push(key); }
	    for (key in arguments) { }
	
	    // Detect if `name` or `message` properties of `Error.prototype` are enumerable by default.
	    support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');
	
	    // Detect if `prototype` properties are enumerable by default.
	    support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');
	
	    // Detect if `arguments` object indexes are non-enumerable
	    support.nonEnumArgs = key != 0;
	
	    // Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	    support.nonEnumShadows = !/valueOf/.test(props);
	  }(1));
	
	  var isObject = Rx.internals.isObject = function(value) {
	    var type = typeof value;
	    return value && (type == 'function' || type == 'object') || false;
	  };
	
	  function keysIn(object) {
	    var result = [];
	    if (!isObject(object)) {
	      return result;
	    }
	    if (support.nonEnumArgs && object.length && isArguments(object)) {
	      object = slice.call(object);
	    }
	    var skipProto = support.enumPrototypes && typeof object == 'function',
	        skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);
	
	    for (var key in object) {
	      if (!(skipProto && key == 'prototype') &&
	          !(skipErrorProps && (key == 'message' || key == 'name'))) {
	        result.push(key);
	      }
	    }
	
	    if (support.nonEnumShadows && object !== objectProto) {
	      var ctor = object.constructor,
	          index = -1,
	          length = dontEnumsLength;
	
	      if (object === (ctor && ctor.prototype)) {
	        var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
	            nonEnum = nonEnumProps[className];
	      }
	      while (++index < length) {
	        key = dontEnums[index];
	        if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	    }
	    return result;
	  }
	
	  function internalFor(object, callback, keysFunc) {
	    var index = -1,
	      props = keysFunc(object),
	      length = props.length;
	
	    while (++index < length) {
	      var key = props[index];
	      if (callback(object[key], key, object) === false) {
	        break;
	      }
	    }
	    return object;
	  }
	
	  function internalForIn(object, callback) {
	    return internalFor(object, callback, keysIn);
	  }
	
	  function isNode(value) {
	    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
	    // methods that are `typeof` "string" and still can coerce nodes to strings
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  }
	
	  var isArguments = function(value) {
	    return (value && typeof value == 'object') ? toString.call(value) == argsClass : false;
	  }
	
	  // fallback for browsers that can't detect `arguments` objects by [[Class]]
	  if (!supportsArgsClass) {
	    isArguments = function(value) {
	      return (value && typeof value == 'object') ? hasOwnProperty.call(value, 'callee') : false;
	    };
	  }
	
	  var isEqual = Rx.internals.isEqual = function (x, y) {
	    return deepEquals(x, y, [], []);
	  };
	
	  /** @private
	   * Used for deep comparison
	   **/
	  function deepEquals(a, b, stackA, stackB) {
	    // exit early for identical values
	    if (a === b) {
	      // treat `+0` vs. `-0` as not equal
	      return a !== 0 || (1 / a == 1 / b);
	    }
	
	    var type = typeof a,
	        otherType = typeof b;
	
	    // exit early for unlike primitive values
	    if (a === a && (a == null || b == null ||
	        (type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object'))) {
	      return false;
	    }
	
	    // compare [[Class]] names
	    var className = toString.call(a),
	        otherClass = toString.call(b);
	
	    if (className == argsClass) {
	      className = objectClass;
	    }
	    if (otherClass == argsClass) {
	      otherClass = objectClass;
	    }
	    if (className != otherClass) {
	      return false;
	    }
	    switch (className) {
	      case boolClass:
	      case dateClass:
	        // coerce dates and booleans to numbers, dates to milliseconds and booleans
	        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
	        return +a == +b;
	
	      case numberClass:
	        // treat `NaN` vs. `NaN` as equal
	        return (a != +a) ?
	          b != +b :
	          // but treat `-0` vs. `+0` as not equal
	          (a == 0 ? (1 / a == 1 / b) : a == +b);
	
	      case regexpClass:
	      case stringClass:
	        // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
	        // treat string primitives and their corresponding object instances as equal
	        return a == String(b);
	    }
	    var isArr = className == arrayClass;
	    if (!isArr) {
	
	      // exit for functions and DOM nodes
	      if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
	        return false;
	      }
	      // in older versions of Opera, `arguments` objects have `Array` constructors
	      var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
	          ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;
	
	      // non `Object` object instances with different constructors are not equal
	      if (ctorA != ctorB &&
	            !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) &&
	            !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
	            ('constructor' in a && 'constructor' in b)
	          ) {
	        return false;
	      }
	    }
	    // assume cyclic structures are equal
	    // the algorithm for detecting cyclic structures is adapted from ES 5.1
	    // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
	    var initedStack = !stackA;
	    stackA || (stackA = []);
	    stackB || (stackB = []);
	
	    var length = stackA.length;
	    while (length--) {
	      if (stackA[length] == a) {
	        return stackB[length] == b;
	      }
	    }
	    var size = 0;
	    var result = true;
	
	    // add `a` and `b` to the stack of traversed objects
	    stackA.push(a);
	    stackB.push(b);
	
	    // recursively compare objects and arrays (susceptible to call stack limits)
	    if (isArr) {
	      // compare lengths to determine if a deep comparison is necessary
	      length = a.length;
	      size = b.length;
	      result = size == length;
	
	      if (result) {
	        // deep compare the contents, ignoring non-numeric properties
	        while (size--) {
	          var index = length,
	              value = b[size];
	
	          if (!(result = deepEquals(a[size], value, stackA, stackB))) {
	            break;
	          }
	        }
	      }
	    }
	    else {
	      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
	      // which, in this case, is more costly
	      internalForIn(b, function(value, key, b) {
	        if (hasOwnProperty.call(b, key)) {
	          // count the number of properties.
	          size++;
	          // deep compare each property value.
	          return (result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB));
	        }
	      });
	
	      if (result) {
	        // ensure both objects have the same number of properties
	        internalForIn(a, function(value, key, a) {
	          if (hasOwnProperty.call(a, key)) {
	            // `size` will be `-1` if `a` has more properties than `b`
	            return (result = --size > -1);
	          }
	        });
	      }
	    }
	    stackA.pop();
	    stackB.pop();
	
	    return result;
	  }
	
	  var hasProp = {}.hasOwnProperty,
	      slice = Array.prototype.slice;
	
	  var inherits = this.inherits = Rx.internals.inherits = function (child, parent) {
	    function __() { this.constructor = child; }
	    __.prototype = parent.prototype;
	    child.prototype = new __();
	  };
	
	  var addProperties = Rx.internals.addProperties = function (obj) {
	    for(var sources = [], i = 1, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
	    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
	      var source = sources[idx];
	      for (var prop in source) {
	        obj[prop] = source[prop];
	      }
	    }
	  };
	
	  // Rx Utils
	  var addRef = Rx.internals.addRef = function (xs, r) {
	    return new AnonymousObservable(function (observer) {
	      return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
	    });
	  };
	
	  function arrayInitialize(count, factory) {
	    var a = new Array(count);
	    for (var i = 0; i < count; i++) {
	      a[i] = factory();
	    }
	    return a;
	  }
	
	  var errorObj = {e: {}};
	  var tryCatchTarget;
	  function tryCatcher() {
	    try {
	      return tryCatchTarget.apply(this, arguments);
	    } catch (e) {
	      errorObj.e = e;
	      return errorObj;
	    }
	  }
	  function tryCatch(fn) {
	    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
	    tryCatchTarget = fn;
	    return tryCatcher;
	  }
	  function thrower(e) {
	    throw e;
	  }
	
	  // Collections
	  function IndexedItem(id, value) {
	    this.id = id;
	    this.value = value;
	  }
	
	  IndexedItem.prototype.compareTo = function (other) {
	    var c = this.value.compareTo(other.value);
	    c === 0 && (c = this.id - other.id);
	    return c;
	  };
	
	  // Priority Queue for Scheduling
	  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
	    this.items = new Array(capacity);
	    this.length = 0;
	  };
	
	  var priorityProto = PriorityQueue.prototype;
	  priorityProto.isHigherPriority = function (left, right) {
	    return this.items[left].compareTo(this.items[right]) < 0;
	  };
	
	  priorityProto.percolate = function (index) {
	    if (index >= this.length || index < 0) { return; }
	    var parent = index - 1 >> 1;
	    if (parent < 0 || parent === index) { return; }
	    if (this.isHigherPriority(index, parent)) {
	      var temp = this.items[index];
	      this.items[index] = this.items[parent];
	      this.items[parent] = temp;
	      this.percolate(parent);
	    }
	  };
	
	  priorityProto.heapify = function (index) {
	    +index || (index = 0);
	    if (index >= this.length || index < 0) { return; }
	    var left = 2 * index + 1,
	        right = 2 * index + 2,
	        first = index;
	    if (left < this.length && this.isHigherPriority(left, first)) {
	      first = left;
	    }
	    if (right < this.length && this.isHigherPriority(right, first)) {
	      first = right;
	    }
	    if (first !== index) {
	      var temp = this.items[index];
	      this.items[index] = this.items[first];
	      this.items[first] = temp;
	      this.heapify(first);
	    }
	  };
	
	  priorityProto.peek = function () { return this.items[0].value; };
	
	  priorityProto.removeAt = function (index) {
	    this.items[index] = this.items[--this.length];
	    this.items[this.length] = undefined;
	    this.heapify();
	  };
	
	  priorityProto.dequeue = function () {
	    var result = this.peek();
	    this.removeAt(0);
	    return result;
	  };
	
	  priorityProto.enqueue = function (item) {
	    var index = this.length++;
	    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
	    this.percolate(index);
	  };
	
	  priorityProto.remove = function (item) {
	    for (var i = 0; i < this.length; i++) {
	      if (this.items[i].value === item) {
	        this.removeAt(i);
	        return true;
	      }
	    }
	    return false;
	  };
	  PriorityQueue.count = 0;
	
	  /**
	   * Represents a group of disposable resources that are disposed together.
	   * @constructor
	   */
	  var CompositeDisposable = Rx.CompositeDisposable = function () {
	    var args = [], i, len;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	      len = args.length;
	    } else {
	      len = arguments.length;
	      args = new Array(len);
	      for(i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    for(i = 0; i < len; i++) {
	      if (!isDisposable(args[i])) { throw new TypeError('Not a disposable'); }
	    }
	    this.disposables = args;
	    this.isDisposed = false;
	    this.length = args.length;
	  };
	
	  var CompositeDisposablePrototype = CompositeDisposable.prototype;
	
	  /**
	   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
	   * @param {Mixed} item Disposable to add.
	   */
	  CompositeDisposablePrototype.add = function (item) {
	    if (this.isDisposed) {
	      item.dispose();
	    } else {
	      this.disposables.push(item);
	      this.length++;
	    }
	  };
	
	  /**
	   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
	   * @param {Mixed} item Disposable to remove.
	   * @returns {Boolean} true if found; false otherwise.
	   */
	  CompositeDisposablePrototype.remove = function (item) {
	    var shouldDispose = false;
	    if (!this.isDisposed) {
	      var idx = this.disposables.indexOf(item);
	      if (idx !== -1) {
	        shouldDispose = true;
	        this.disposables.splice(idx, 1);
	        this.length--;
	        item.dispose();
	      }
	    }
	    return shouldDispose;
	  };
	
	  /**
	   *  Disposes all disposables in the group and removes them from the group.
	   */
	  CompositeDisposablePrototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var len = this.disposables.length, currentDisposables = new Array(len);
	      for(var i = 0; i < len; i++) { currentDisposables[i] = this.disposables[i]; }
	      this.disposables = [];
	      this.length = 0;
	
	      for (i = 0; i < len; i++) {
	        currentDisposables[i].dispose();
	      }
	    }
	  };
	
	  /**
	   * Provides a set of static methods for creating Disposables.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   */
	  var Disposable = Rx.Disposable = function (action) {
	    this.isDisposed = false;
	    this.action = action || noop;
	  };
	
	  /** Performs the task of cleaning up resources. */
	  Disposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.action();
	      this.isDisposed = true;
	    }
	  };
	
	  /**
	   * Creates a disposable object that invokes the specified action when disposed.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   * @return {Disposable} The disposable object that runs the given action upon disposal.
	   */
	  var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };
	
	  /**
	   * Gets the disposable that does nothing when disposed.
	   */
	  var disposableEmpty = Disposable.empty = { dispose: noop };
	
	  /**
	   * Validates whether the given object is a disposable
	   * @param {Object} Object to test whether it has a dispose method
	   * @returns {Boolean} true if a disposable object, else false.
	   */
	  var isDisposable = Disposable.isDisposable = function (d) {
	    return d && isFunction(d.dispose);
	  };
	
	  var checkDisposed = Disposable.checkDisposed = function (disposable) {
	    if (disposable.isDisposed) { throw new ObjectDisposedError(); }
	  };
	
	  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = (function () {
	    function BooleanDisposable () {
	      this.isDisposed = false;
	      this.current = null;
	    }
	
	    var booleanDisposablePrototype = BooleanDisposable.prototype;
	
	    /**
	     * Gets the underlying disposable.
	     * @return The underlying disposable.
	     */
	    booleanDisposablePrototype.getDisposable = function () {
	      return this.current;
	    };
	
	    /**
	     * Sets the underlying disposable.
	     * @param {Disposable} value The new underlying disposable.
	     */
	    booleanDisposablePrototype.setDisposable = function (value) {
	      var shouldDispose = this.isDisposed;
	      if (!shouldDispose) {
	        var old = this.current;
	        this.current = value;
	      }
	      old && old.dispose();
	      shouldDispose && value && value.dispose();
	    };
	
	    /**
	     * Disposes the underlying disposable as well as all future replacements.
	     */
	    booleanDisposablePrototype.dispose = function () {
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        var old = this.current;
	        this.current = null;
	      }
	      old && old.dispose();
	    };
	
	    return BooleanDisposable;
	  }());
	  var SerialDisposable = Rx.SerialDisposable = SingleAssignmentDisposable;
	
	  /**
	   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
	   */
	  var RefCountDisposable = Rx.RefCountDisposable = (function () {
	
	    function InnerDisposable(disposable) {
	      this.disposable = disposable;
	      this.disposable.count++;
	      this.isInnerDisposed = false;
	    }
	
	    InnerDisposable.prototype.dispose = function () {
	      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
	        this.isInnerDisposed = true;
	        this.disposable.count--;
	        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
	          this.disposable.isDisposed = true;
	          this.disposable.underlyingDisposable.dispose();
	        }
	      }
	    };
	
	    /**
	     * Initializes a new instance of the RefCountDisposable with the specified disposable.
	     * @constructor
	     * @param {Disposable} disposable Underlying disposable.
	      */
	    function RefCountDisposable(disposable) {
	      this.underlyingDisposable = disposable;
	      this.isDisposed = false;
	      this.isPrimaryDisposed = false;
	      this.count = 0;
	    }
	
	    /**
	     * Disposes the underlying disposable only when all dependent disposables have been disposed
	     */
	    RefCountDisposable.prototype.dispose = function () {
	      if (!this.isDisposed && !this.isPrimaryDisposed) {
	        this.isPrimaryDisposed = true;
	        if (this.count === 0) {
	          this.isDisposed = true;
	          this.underlyingDisposable.dispose();
	        }
	      }
	    };
	
	    /**
	     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
	     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
	     */
	    RefCountDisposable.prototype.getDisposable = function () {
	      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
	    };
	
	    return RefCountDisposable;
	  })();
	
	  function ScheduledDisposable(scheduler, disposable) {
	    this.scheduler = scheduler;
	    this.disposable = disposable;
	    this.isDisposed = false;
	  }
	
	  function scheduleItem(s, self) {
	    if (!self.isDisposed) {
	      self.isDisposed = true;
	      self.disposable.dispose();
	    }
	  }
	
	  ScheduledDisposable.prototype.dispose = function () {
	    this.scheduler.scheduleWithState(this, scheduleItem);
	  };
	
	  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
	    this.scheduler = scheduler;
	    this.state = state;
	    this.action = action;
	    this.dueTime = dueTime;
	    this.comparer = comparer || defaultSubComparer;
	    this.disposable = new SingleAssignmentDisposable();
	  }
	
	  ScheduledItem.prototype.invoke = function () {
	    this.disposable.setDisposable(this.invokeCore());
	  };
	
	  ScheduledItem.prototype.compareTo = function (other) {
	    return this.comparer(this.dueTime, other.dueTime);
	  };
	
	  ScheduledItem.prototype.isCancelled = function () {
	    return this.disposable.isDisposed;
	  };
	
	  ScheduledItem.prototype.invokeCore = function () {
	    return this.action(this.scheduler, this.state);
	  };
	
	  /** Provides a set of static properties to access commonly used schedulers. */
	  var Scheduler = Rx.Scheduler = (function () {
	
	    function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
	      this.now = now;
	      this._schedule = schedule;
	      this._scheduleRelative = scheduleRelative;
	      this._scheduleAbsolute = scheduleAbsolute;
	    }
	
	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }
	
	    var schedulerProto = Scheduler.prototype;
	
	    /**
	     * Schedules an action to be executed.
	     * @param {Function} action Action to execute.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.schedule = function (action) {
	      return this._schedule(action, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithState = function (state, action) {
	      return this._schedule(state, action);
	    };
	
	    /**
	     * Schedules an action to be executed after the specified relative due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelative = function (dueTime, action) {
	      return this._scheduleRelative(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative(state, dueTime, action);
	    };
	
	    /**
	     * Schedules an action to be executed at the specified absolute due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	      */
	    schedulerProto.scheduleWithAbsolute = function (dueTime, action) {
	      return this._scheduleAbsolute(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number}dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute(state, dueTime, action);
	    };
	
	    /** Gets the current time according to the local machine's system clock. */
	    Scheduler.now = defaultNow;
	
	    /**
	     * Normalizes the specified TimeSpan value to a positive value.
	     * @param {Number} timeSpan The time span value to normalize.
	     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
	     */
	    Scheduler.normalize = function (timeSpan) {
	      timeSpan < 0 && (timeSpan = 0);
	      return timeSpan;
	    };
	
	    return Scheduler;
	  }());
	
	  var normalizeTime = Scheduler.normalize;
	
	  (function (schedulerProto) {
	
	    function invokeRecImmediate(scheduler, pair) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();
	
	      function recursiveAction(state1) {
	        action(state1, function (state2) {
	          var isAdded = false, isDone = false,
	          d = scheduler.scheduleWithState(state2, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      }
	
	      recursiveAction(state);
	      return group;
	    }
	
	    function invokeRecDate(scheduler, pair, method) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();
	      function recursiveAction(state1) {
	        action(state1, function (state2, dueTime1) {
	          var isAdded = false, isDone = false,
	          d = scheduler[method](state2, dueTime1, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      };
	      recursiveAction(state);
	      return group;
	    }
	
	    function scheduleInnerRecursive(action, self) {
	      action(function(dt) { self(action, dt); });
	    }
	
	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursive = function (action) {
	      return this.scheduleRecursiveWithState(action, function (_action, self) {
	        _action(function () { self(_action); }); });
	    };
	
	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithState = function (state, action) {
	      return this.scheduleWithState([state, action], invokeRecImmediate);
	    };
	
	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelative = function (dueTime, action) {
	      return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
	    };
	
	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
	      });
	    };
	
	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsolute = function (dueTime, action) {
	      return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
	    };
	
	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
	      });
	    };
	  }(Scheduler.prototype));
	
	  (function (schedulerProto) {
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodic = function (period, action) {
	      return this.schedulePeriodicWithState(null, period, action);
	    };
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
	      if (typeof root.setInterval === 'undefined') { throw new NotSupportedError(); }
	      period = normalizeTime(period);
	      var s = state, id = root.setInterval(function () { s = action(s); }, period);
	      return disposableCreate(function () { root.clearInterval(id); });
	    };
	
	  }(Scheduler.prototype));
	
	  (function (schedulerProto) {
	    /**
	     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
	     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
	     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
	     */
	    schedulerProto.catchError = schedulerProto['catch'] = function (handler) {
	      return new CatchScheduler(this, handler);
	    };
	  }(Scheduler.prototype));
	
	  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
	    function tick(command, recurse) {
	      recurse(0, this._period);
	      try {
	        this._state = this._action(this._state);
	      } catch (e) {
	        this._cancel.dispose();
	        throw e;
	      }
	    }
	
	    function SchedulePeriodicRecursive(scheduler, state, period, action) {
	      this._scheduler = scheduler;
	      this._state = state;
	      this._period = period;
	      this._action = action;
	    }
	
	    SchedulePeriodicRecursive.prototype.start = function () {
	      var d = new SingleAssignmentDisposable();
	      this._cancel = d;
	      d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));
	
	      return d;
	    };
	
	    return SchedulePeriodicRecursive;
	  }());
	
	  /** Gets a scheduler that schedules work immediately on the current thread. */
	  var immediateScheduler = Scheduler.immediate = (function () {
	    function scheduleNow(state, action) { return action(this, state); }
	    return new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	  }());
	
	  /**
	   * Gets a scheduler that schedules work as soon as possible on the current thread.
	   */
	  var currentThreadScheduler = Scheduler.currentThread = (function () {
	    var queue;
	
	    function runTrampoline () {
	      while (queue.length > 0) {
	        var item = queue.dequeue();
	        !item.isCancelled() && item.invoke();
	      }
	    }
	
	    function scheduleNow(state, action) {
	      var si = new ScheduledItem(this, state, action, this.now());
	
	      if (!queue) {
	        queue = new PriorityQueue(4);
	        queue.enqueue(si);
	
	        var result = tryCatch(runTrampoline)();
	        queue = null;
	        if (result === errorObj) { return thrower(result.e); }
	      } else {
	        queue.enqueue(si);
	      }
	      return si.disposable;
	    }
	
	    var currentScheduler = new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	    currentScheduler.scheduleRequired = function () { return !queue; };
	
	    return currentScheduler;
	  }());
	
	  var scheduleMethod, clearMethod;
	
	  var localTimer = (function () {
	    var localSetTimeout, localClearTimeout = noop;
	    if (!!root.WScript) {
	      localSetTimeout = function (fn, time) {
	        root.WScript.Sleep(time);
	        fn();
	      };
	    } else if (!!root.setTimeout) {
	      localSetTimeout = root.setTimeout;
	      localClearTimeout = root.clearTimeout;
	    } else {
	      throw new NotSupportedError();
	    }
	
	    return {
	      setTimeout: localSetTimeout,
	      clearTimeout: localClearTimeout
	    };
	  }());
	  var localSetTimeout = localTimer.setTimeout,
	    localClearTimeout = localTimer.clearTimeout;
	
	  (function () {
	
	    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;
	
	    clearMethod = function (handle) {
	      delete tasksByHandle[handle];
	    };
	
	    function runTask(handle) {
	      if (currentlyRunning) {
	        localSetTimeout(function () { runTask(handle) }, 0);
	      } else {
	        var task = tasksByHandle[handle];
	        if (task) {
	          currentlyRunning = true;
	          var result = tryCatch(task)();
	          clearMethod(handle);
	          currentlyRunning = false;
	          if (result === errorObj) { return thrower(result.e); }
	        }
	      }
	    }
	
	    var reNative = RegExp('^' +
	      String(toString)
	        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
	        .replace(/toString| for [^\]]+/g, '.*?') + '$'
	    );
	
	    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
	      !reNative.test(setImmediate) && setImmediate;
	
	    function postMessageSupported () {
	      // Ensure not in a worker
	      if (!root.postMessage || root.importScripts) { return false; }
	      var isAsync = false, oldHandler = root.onmessage;
	      // Test for async
	      root.onmessage = function () { isAsync = true; };
	      root.postMessage('', '*');
	      root.onmessage = oldHandler;
	
	      return isAsync;
	    }
	
	    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
	    if (isFunction(setImmediate)) {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        setImmediate(function () { runTask(id); });
	
	        return id;
	      };
	    } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        process.nextTick(function () { runTask(id); });
	
	        return id;
	      };
	    } else if (postMessageSupported()) {
	      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();
	
	      function onGlobalPostMessage(event) {
	        // Only if we're a match to avoid any other global events
	        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
	          runTask(event.data.substring(MSG_PREFIX.length));
	        }
	      }
	
	      if (root.addEventListener) {
	        root.addEventListener('message', onGlobalPostMessage, false);
	      } else {
	        root.attachEvent('onmessage', onGlobalPostMessage, false);
	      }
	
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        root.postMessage(MSG_PREFIX + currentId, '*');
	        return id;
	      };
	    } else if (!!root.MessageChannel) {
	      var channel = new root.MessageChannel();
	
	      channel.port1.onmessage = function (e) { runTask(e.data); };
	
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        channel.port2.postMessage(id);
	        return id;
	      };
	    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {
	
	      scheduleMethod = function (action) {
	        var scriptElement = root.document.createElement('script');
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	
	        scriptElement.onreadystatechange = function () {
	          runTask(id);
	          scriptElement.onreadystatechange = null;
	          scriptElement.parentNode.removeChild(scriptElement);
	          scriptElement = null;
	        };
	        root.document.documentElement.appendChild(scriptElement);
	        return id;
	      };
	
	    } else {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        localSetTimeout(function () {
	          runTask(id);
	        }, 0);
	
	        return id;
	      };
	    }
	  }());
	
	  /**
	   * Gets a scheduler that schedules work via a timed callback based upon platform.
	   */
	  var timeoutScheduler = Scheduler.timeout = Scheduler.default = (function () {
	
	    function scheduleNow(state, action) {
	      var scheduler = this,
	        disposable = new SingleAssignmentDisposable();
	      var id = scheduleMethod(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      });
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        clearMethod(id);
	      }));
	    }
	
	    function scheduleRelative(state, dueTime, action) {
	      var scheduler = this, dt = Scheduler.normalize(dueTime);
	      if (dt === 0) { return scheduler.scheduleWithState(state, action); }
	      var disposable = new SingleAssignmentDisposable();
	      var id = localSetTimeout(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      }, dt);
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        localClearTimeout(id);
	      }));
	    }
	
	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
	    }
	
	    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	  })();
	
	  var CatchScheduler = (function (__super__) {
	
	    function scheduleNow(state, action) {
	      return this._scheduler.scheduleWithState(state, this._wrap(action));
	    }
	
	    function scheduleRelative(state, dueTime, action) {
	      return this._scheduler.scheduleWithRelativeAndState(state, dueTime, this._wrap(action));
	    }
	
	    function scheduleAbsolute(state, dueTime, action) {
	      return this._scheduler.scheduleWithAbsoluteAndState(state, dueTime, this._wrap(action));
	    }
	
	    inherits(CatchScheduler, __super__);
	
	    function CatchScheduler(scheduler, handler) {
	      this._scheduler = scheduler;
	      this._handler = handler;
	      this._recursiveOriginal = null;
	      this._recursiveWrapper = null;
	      __super__.call(this, this._scheduler.now.bind(this._scheduler), scheduleNow, scheduleRelative, scheduleAbsolute);
	    }
	
	    CatchScheduler.prototype._clone = function (scheduler) {
	        return new CatchScheduler(scheduler, this._handler);
	    };
	
	    CatchScheduler.prototype._wrap = function (action) {
	      var parent = this;
	      return function (self, state) {
	        try {
	          return action(parent._getRecursiveWrapper(self), state);
	        } catch (e) {
	          if (!parent._handler(e)) { throw e; }
	          return disposableEmpty;
	        }
	      };
	    };
	
	    CatchScheduler.prototype._getRecursiveWrapper = function (scheduler) {
	      if (this._recursiveOriginal !== scheduler) {
	        this._recursiveOriginal = scheduler;
	        var wrapper = this._clone(scheduler);
	        wrapper._recursiveOriginal = scheduler;
	        wrapper._recursiveWrapper = wrapper;
	        this._recursiveWrapper = wrapper;
	      }
	      return this._recursiveWrapper;
	    };
	
	    CatchScheduler.prototype.schedulePeriodicWithState = function (state, period, action) {
	      var self = this, failed = false, d = new SingleAssignmentDisposable();
	
	      d.setDisposable(this._scheduler.schedulePeriodicWithState(state, period, function (state1) {
	        if (failed) { return null; }
	        try {
	          return action(state1);
	        } catch (e) {
	          failed = true;
	          if (!self._handler(e)) { throw e; }
	          d.dispose();
	          return null;
	        }
	      }));
	
	      return d;
	    };
	
	    return CatchScheduler;
	  }(Scheduler));
	
	  /**
	   *  Represents a notification to an observer.
	   */
	  var Notification = Rx.Notification = (function () {
	    function Notification(kind, value, exception, accept, acceptObservable, toString) {
	      this.kind = kind;
	      this.value = value;
	      this.exception = exception;
	      this._accept = accept;
	      this._acceptObservable = acceptObservable;
	      this.toString = toString;
	    }
	
	    /**
	     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
	     *
	     * @memberOf Notification
	     * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..
	     * @param {Function} onError Delegate to invoke for an OnError notification.
	     * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.
	     * @returns {Any} Result produced by the observation.
	     */
	    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
	      return observerOrOnNext && typeof observerOrOnNext === 'object' ?
	        this._acceptObservable(observerOrOnNext) :
	        this._accept(observerOrOnNext, onError, onCompleted);
	    };
	
	    /**
	     * Returns an observable sequence with a single notification.
	     *
	     * @memberOf Notifications
	     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
	     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
	     */
	    Notification.prototype.toObservable = function (scheduler) {
	      var self = this;
	      isScheduler(scheduler) || (scheduler = immediateScheduler);
	      return new AnonymousObservable(function (observer) {
	        return scheduler.scheduleWithState(self, function (_, notification) {
	          notification._acceptObservable(observer);
	          notification.kind === 'N' && observer.onCompleted();
	        });
	      });
	    };
	
	    return Notification;
	  })();
	
	  /**
	   * Creates an object that represents an OnNext notification to an observer.
	   * @param {Any} value The value contained in the notification.
	   * @returns {Notification} The OnNext notification containing the value.
	   */
	  var notificationCreateOnNext = Notification.createOnNext = (function () {
	      function _accept(onNext) { return onNext(this.value); }
	      function _acceptObservable(observer) { return observer.onNext(this.value); }
	      function toString() { return 'OnNext(' + this.value + ')'; }
	
	      return function (value) {
	        return new Notification('N', value, null, _accept, _acceptObservable, toString);
	      };
	  }());
	
	  /**
	   * Creates an object that represents an OnError notification to an observer.
	   * @param {Any} error The exception contained in the notification.
	   * @returns {Notification} The OnError notification containing the exception.
	   */
	  var notificationCreateOnError = Notification.createOnError = (function () {
	    function _accept (onNext, onError) { return onError(this.exception); }
	    function _acceptObservable(observer) { return observer.onError(this.exception); }
	    function toString () { return 'OnError(' + this.exception + ')'; }
	
	    return function (e) {
	      return new Notification('E', null, e, _accept, _acceptObservable, toString);
	    };
	  }());
	
	  /**
	   * Creates an object that represents an OnCompleted notification to an observer.
	   * @returns {Notification} The OnCompleted notification.
	   */
	  var notificationCreateOnCompleted = Notification.createOnCompleted = (function () {
	    function _accept (onNext, onError, onCompleted) { return onCompleted(); }
	    function _acceptObservable(observer) { return observer.onCompleted(); }
	    function toString () { return 'OnCompleted()'; }
	
	    return function () {
	      return new Notification('C', null, null, _accept, _acceptObservable, toString);
	    };
	  }());
	
	  var Enumerator = Rx.internals.Enumerator = function (next) {
	    this._next = next;
	  };
	
	  Enumerator.prototype.next = function () {
	    return this._next();
	  };
	
	  Enumerator.prototype[$iterator$] = function () { return this; }
	
	  var Enumerable = Rx.internals.Enumerable = function (iterator) {
	    this._iterator = iterator;
	  };
	
	  Enumerable.prototype[$iterator$] = function () {
	    return this._iterator();
	  };
	
	  Enumerable.prototype.concat = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();
	
	      var isDisposed, subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) { return; }
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }
	
	        if (currentItem.done) {
	          return o.onCompleted();
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function(err) { o.onError(err); },
	          self)
	        );
	      });
	
	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };
	
	  Enumerable.prototype.catchError = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();
	
	      var isDisposed, subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursiveWithState(null, function (lastException, self) {
	        if (isDisposed) { return; }
	
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return observer.onError(ex);
	        }
	
	        if (currentItem.done) {
	          if (lastException !== null) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          self,
	          function() { o.onCompleted(); }));
	      });
	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };
	
	
	  Enumerable.prototype.catchErrorWhen = function (notificationHandler) {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var exceptions = new Subject(),
	        notifier = new Subject(),
	        handled = notificationHandler(exceptions),
	        notificationDisposable = handled.subscribe(notifier);
	
	      var e = sources[$iterator$]();
	
	      var isDisposed,
	        lastException,
	        subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) { return; }
	
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }
	
	        if (currentItem.done) {
	          if (lastException) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var outer = new SingleAssignmentDisposable();
	        var inner = new SingleAssignmentDisposable();
	        subscription.setDisposable(new CompositeDisposable(inner, outer));
	        outer.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function (exn) {
	            inner.setDisposable(notifier.subscribe(self, function(ex) {
	              o.onError(ex);
	            }, function() {
	              o.onCompleted();
	            }));
	
	            exceptions.onNext(exn);
	          },
	          function() { o.onCompleted(); }));
	      });
	
	      return new CompositeDisposable(notificationDisposable, subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };
	
	  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
	    if (repeatCount == null) { repeatCount = -1; }
	    return new Enumerable(function () {
	      var left = repeatCount;
	      return new Enumerator(function () {
	        if (left === 0) { return doneEnumerator; }
	        if (left > 0) { left--; }
	        return { done: false, value: value };
	      });
	    });
	  };
	
	  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
	    if (selector) {
	      var selectorFn = bindCallback(selector, thisArg, 3);
	    }
	    return new Enumerable(function () {
	      var index = -1;
	      return new Enumerator(
	        function () {
	          return ++index < source.length ?
	            { done: false, value: !selector ? source[index] : selectorFn(source[index], index, source) } :
	            doneEnumerator;
	        });
	    });
	  };
	
	  /**
	   * Supports push-style iteration over an observable sequence.
	   */
	  var Observer = Rx.Observer = function () { };
	
	  /**
	   *  Creates a notification callback from an observer.
	   * @returns The action that forwards its input notification to the underlying observer.
	   */
	  Observer.prototype.toNotifier = function () {
	    var observer = this;
	    return function (n) { return n.accept(observer); };
	  };
	
	  /**
	   *  Hides the identity of an observer.
	   * @returns An observer that hides the identity of the specified observer.
	   */
	  Observer.prototype.asObserver = function () {
	    return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
	  };
	
	  /**
	   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
	   *  If a violation is detected, an Error is thrown from the offending observer method call.
	   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
	   */
	  Observer.prototype.checked = function () { return new CheckedObserver(this); };
	
	  /**
	   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
	   * @param {Function} [onNext] Observer's OnNext action implementation.
	   * @param {Function} [onError] Observer's OnError action implementation.
	   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
	   * @returns {Observer} The observer object implemented using the given actions.
	   */
	  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
	    onNext || (onNext = noop);
	    onError || (onError = defaultError);
	    onCompleted || (onCompleted = noop);
	    return new AnonymousObserver(onNext, onError, onCompleted);
	  };
	
	  /**
	   *  Creates an observer from a notification callback.
	   *
	   * @static
	   * @memberOf Observer
	   * @param {Function} handler Action that handles a notification.
	   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
	   */
	  Observer.fromNotifier = function (handler, thisArg) {
	    return new AnonymousObserver(function (x) {
	      return handler.call(thisArg, notificationCreateOnNext(x));
	    }, function (e) {
	      return handler.call(thisArg, notificationCreateOnError(e));
	    }, function () {
	      return handler.call(thisArg, notificationCreateOnCompleted());
	    });
	  };
	
	  /**
	   * Schedules the invocation of observer methods on the given scheduler.
	   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
	   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
	   */
	  Observer.prototype.notifyOn = function (scheduler) {
	    return new ObserveOnObserver(scheduler, this);
	  };
	
	  Observer.prototype.makeSafe = function(disposable) {
	    return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
	  };
	
	  /**
	   * Abstract base class for implementations of the Observer class.
	   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
	   */
	  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
	    inherits(AbstractObserver, __super__);
	
	    /**
	     * Creates a new observer in a non-stopped state.
	     */
	    function AbstractObserver() {
	      this.isStopped = false;
	      __super__.call(this);
	    }
	
	    // Must be implemented by other observers
	    AbstractObserver.prototype.next = notImplemented;
	    AbstractObserver.prototype.error = notImplemented;
	    AbstractObserver.prototype.completed = notImplemented;
	
	    /**
	     * Notifies the observer of a new element in the sequence.
	     * @param {Any} value Next element in the sequence.
	     */
	    AbstractObserver.prototype.onNext = function (value) {
	      if (!this.isStopped) { this.next(value); }
	    };
	
	    /**
	     * Notifies the observer that an exception has occurred.
	     * @param {Any} error The error that has occurred.
	     */
	    AbstractObserver.prototype.onError = function (error) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(error);
	      }
	    };
	
	    /**
	     * Notifies the observer of the end of the sequence.
	     */
	    AbstractObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.completed();
	      }
	    };
	
	    /**
	     * Disposes the observer, causing it to transition to the stopped state.
	     */
	    AbstractObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };
	
	    AbstractObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    return AbstractObserver;
	  }(Observer));
	
	  /**
	   * Class to create an Observer instance from delegate-based implementations of the on* methods.
	   */
	  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
	    inherits(AnonymousObserver, __super__);
	
	    /**
	     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
	     * @param {Any} onNext Observer's OnNext action implementation.
	     * @param {Any} onError Observer's OnError action implementation.
	     * @param {Any} onCompleted Observer's OnCompleted action implementation.
	     */
	    function AnonymousObserver(onNext, onError, onCompleted) {
	      __super__.call(this);
	      this._onNext = onNext;
	      this._onError = onError;
	      this._onCompleted = onCompleted;
	    }
	
	    /**
	     * Calls the onNext action.
	     * @param {Any} value Next element in the sequence.
	     */
	    AnonymousObserver.prototype.next = function (value) {
	      this._onNext(value);
	    };
	
	    /**
	     * Calls the onError action.
	     * @param {Any} error The error that has occurred.
	     */
	    AnonymousObserver.prototype.error = function (error) {
	      this._onError(error);
	    };
	
	    /**
	     *  Calls the onCompleted action.
	     */
	    AnonymousObserver.prototype.completed = function () {
	      this._onCompleted();
	    };
	
	    return AnonymousObserver;
	  }(AbstractObserver));
	
	  var CheckedObserver = (function (__super__) {
	    inherits(CheckedObserver, __super__);
	
	    function CheckedObserver(observer) {
	      __super__.call(this);
	      this._observer = observer;
	      this._state = 0; // 0 - idle, 1 - busy, 2 - done
	    }
	
	    var CheckedObserverPrototype = CheckedObserver.prototype;
	
	    CheckedObserverPrototype.onNext = function (value) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onNext).call(this._observer, value);
	      this._state = 0;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.onError = function (err) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onError).call(this._observer, err);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.onCompleted = function () {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onCompleted).call(this._observer);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.checkAccess = function () {
	      if (this._state === 1) { throw new Error('Re-entrancy detected'); }
	      if (this._state === 2) { throw new Error('Observer completed'); }
	      if (this._state === 0) { this._state = 1; }
	    };
	
	    return CheckedObserver;
	  }(Observer));
	
	  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
	    inherits(ScheduledObserver, __super__);
	
	    function ScheduledObserver(scheduler, observer) {
	      __super__.call(this);
	      this.scheduler = scheduler;
	      this.observer = observer;
	      this.isAcquired = false;
	      this.hasFaulted = false;
	      this.queue = [];
	      this.disposable = new SerialDisposable();
	    }
	
	    ScheduledObserver.prototype.next = function (value) {
	      var self = this;
	      this.queue.push(function () { self.observer.onNext(value); });
	    };
	
	    ScheduledObserver.prototype.error = function (e) {
	      var self = this;
	      this.queue.push(function () { self.observer.onError(e); });
	    };
	
	    ScheduledObserver.prototype.completed = function () {
	      var self = this;
	      this.queue.push(function () { self.observer.onCompleted(); });
	    };
	
	    ScheduledObserver.prototype.ensureActive = function () {
	      var isOwner = false, parent = this;
	      if (!this.hasFaulted && this.queue.length > 0) {
	        isOwner = !this.isAcquired;
	        this.isAcquired = true;
	      }
	      if (isOwner) {
	        this.disposable.setDisposable(this.scheduler.scheduleRecursive(function (self) {
	          var work;
	          if (parent.queue.length > 0) {
	            work = parent.queue.shift();
	          } else {
	            parent.isAcquired = false;
	            return;
	          }
	          try {
	            work();
	          } catch (ex) {
	            parent.queue = [];
	            parent.hasFaulted = true;
	            throw ex;
	          }
	          self();
	        }));
	      }
	    };
	
	    ScheduledObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.disposable.dispose();
	    };
	
	    return ScheduledObserver;
	  }(AbstractObserver));
	
	  var ObserveOnObserver = (function (__super__) {
	    inherits(ObserveOnObserver, __super__);
	
	    function ObserveOnObserver(scheduler, observer, cancel) {
	      __super__.call(this, scheduler, observer);
	      this._cancel = cancel;
	    }
	
	    ObserveOnObserver.prototype.next = function (value) {
	      __super__.prototype.next.call(this, value);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.error = function (e) {
	      __super__.prototype.error.call(this, e);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.completed = function () {
	      __super__.prototype.completed.call(this);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this._cancel && this._cancel.dispose();
	      this._cancel = null;
	    };
	
	    return ObserveOnObserver;
	  })(ScheduledObserver);
	
	  var observableProto;
	
	  /**
	   * Represents a push-style collection.
	   */
	  var Observable = Rx.Observable = (function () {
	
	    function Observable(subscribe) {
	      if (Rx.config.longStackSupport && hasStacks) {
	        try {
	          throw new Error();
	        } catch (e) {
	          this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	
	        var self = this;
	        this._subscribe = function (observer) {
	          var oldOnError = observer.onError.bind(observer);
	
	          observer.onError = function (err) {
	            makeStackTraceLong(err, self);
	            oldOnError(err);
	          };
	
	          return subscribe.call(self, observer);
	        };
	      } else {
	        this._subscribe = subscribe;
	      }
	    }
	
	    observableProto = Observable.prototype;
	
	    /**
	     *  Subscribes an observer to the observable sequence.
	     *  @param {Mixed} [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
	     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
	     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
	     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribe = observableProto.forEach = function (observerOrOnNext, onError, onCompleted) {
	      return this._subscribe(typeof observerOrOnNext === 'object' ?
	        observerOrOnNext :
	        observerCreate(observerOrOnNext, onError, onCompleted));
	    };
	
	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onNext The function to invoke on each element in the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnNext = function (onNext, thisArg) {
	      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) { onNext.call(thisArg, x); } : onNext));
	    };
	
	    /**
	     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
	     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnError = function (onError, thisArg) {
	      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) { onError.call(thisArg, e); } : onError));
	    };
	
	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
	      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() { onCompleted.call(thisArg); } : onCompleted));
	    };
	
	    return Observable;
	  })();
	
	  var ObservableBase = Rx.ObservableBase = (function (__super__) {
	    inherits(ObservableBase, __super__);
	
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }
	
	    function setDisposable(s, state) {
	      var ado = state[0], self = state[1];
	      var sub = tryCatch(self.subscribeCore).call(self, ado);
	
	      if (sub === errorObj) {
	        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }
	
	    function subscribe(observer) {
	      var ado = new AutoDetachObserver(observer), state = [ado, this];
	
	      if (currentThreadScheduler.scheduleRequired()) {
	        currentThreadScheduler.scheduleWithState(state, setDisposable);
	      } else {
	        setDisposable(null, state);
	      }
	      return ado;
	    }
	
	    function ObservableBase() {
	      __super__.call(this, subscribe);
	    }
	
	    ObservableBase.prototype.subscribeCore = notImplemented;
	
	    return ObservableBase;
	  }(Observable));
	
	   /**
	   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
	   *
	   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
	   *  that require to be run on a scheduler, use subscribeOn.
	   *
	   *  @param {Scheduler} scheduler Scheduler to notify observers on.
	   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
	   */
	  observableProto.observeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(new ObserveOnObserver(scheduler, observer));
	    }, source);
	  };
	
	   /**
	   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
	   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.
	
	   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
	   *  callbacks on a scheduler, use observeOn.
	
	   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
	   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
	   */
	  observableProto.subscribeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(), d = new SerialDisposable();
	      d.setDisposable(m);
	      m.setDisposable(scheduler.schedule(function () {
	        d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
	      }));
	      return d;
	    }, source);
	  };
	
	  /**
	   * Converts a Promise to an Observable sequence
	   * @param {Promise} An ES6 Compliant promise.
	   * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
	   */
	  var observableFromPromise = Observable.fromPromise = function (promise) {
	    return observableDefer(function () {
	      var subject = new Rx.AsyncSubject();
	
	      promise.then(
	        function (value) {
	          subject.onNext(value);
	          subject.onCompleted();
	        },
	        subject.onError.bind(subject));
	
	      return subject;
	    });
	  };
	
	  /*
	   * Converts an existing observable sequence to an ES6 Compatible Promise
	   * @example
	   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
	   *
	   * // With config
	   * Rx.config.Promise = RSVP.Promise;
	   * var promise = Rx.Observable.return(42).toPromise();
	   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
	   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
	   */
	  observableProto.toPromise = function (promiseCtor) {
	    promiseCtor || (promiseCtor = Rx.config.Promise);
	    if (!promiseCtor) { throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise'); }
	    var source = this;
	    return new promiseCtor(function (resolve, reject) {
	      // No cancellation can be done
	      var value, hasValue = false;
	      source.subscribe(function (v) {
	        value = v;
	        hasValue = true;
	      }, reject, function () {
	        hasValue && resolve(value);
	      });
	    });
	  };
	
	  var ToArrayObservable = (function(__super__) {
	    inherits(ToArrayObservable, __super__);
	    function ToArrayObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    ToArrayObservable.prototype.subscribeCore = function(observer) {
	      return this.source.subscribe(new ToArrayObserver(observer));
	    };
	
	    return ToArrayObservable;
	  }(ObservableBase));
	
	  function ToArrayObserver(observer) {
	    this.observer = observer;
	    this.a = [];
	    this.isStopped = false;
	  }
	  ToArrayObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.a.push(x); } };
	  ToArrayObserver.prototype.onError = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	    }
	  };
	  ToArrayObserver.prototype.onCompleted = function () {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onNext(this.a);
	      this.observer.onCompleted();
	    }
	  };
	  ToArrayObserver.prototype.dispose = function () { this.isStopped = true; }
	  ToArrayObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	
	    return false;
	  };
	
	  /**
	  * Creates an array from an observable sequence.
	  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
	  */
	  observableProto.toArray = function () {
	    return new ToArrayObservable(this);
	  };
	
	  /**
	   *  Creates an observable sequence from a specified subscribe method implementation.
	   * @example
	   *  var res = Rx.Observable.create(function (observer) { return function () { } );
	   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
	   *  var res = Rx.Observable.create(function (observer) { } );
	   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
	   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
	   */
	  Observable.create = Observable.createWithDisposable = function (subscribe, parent) {
	    return new AnonymousObservable(subscribe, parent);
	  };
	
	  /**
	   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
	   *
	   * @example
	   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
	   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
	   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
	   */
	  var observableDefer = Observable.defer = function (observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var result;
	      try {
	        result = observableFactory();
	      } catch (e) {
	        return observableThrow(e).subscribe(observer);
	      }
	      isPromise(result) && (result = observableFromPromise(result));
	      return result.subscribe(observer);
	    });
	  };
	
	  /**
	   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
	   *
	   * @example
	   *  var res = Rx.Observable.empty();
	   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
	   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
	   * @returns {Observable} An observable sequence with no elements.
	   */
	  var observableEmpty = Observable.empty = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithState(null, function () {
	        observer.onCompleted();
	      });
	    });
	  };
	
	  var FromObservable = (function(__super__) {
	    inherits(FromObservable, __super__);
	    function FromObservable(iterable, mapper, scheduler) {
	      this.iterable = iterable;
	      this.mapper = mapper;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    FromObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromSink(observer, this);
	      return sink.run();
	    };
	
	    return FromObservable;
	  }(ObservableBase));
	
	  var FromSink = (function () {
	    function FromSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }
	
	    FromSink.prototype.run = function () {
	      var list = Object(this.parent.iterable),
	          it = getIterable(list),
	          observer = this.observer,
	          mapper = this.parent.mapper;
	
	      function loopRecursive(i, recurse) {
	        try {
	          var next = it.next();
	        } catch (e) {
	          return observer.onError(e);
	        }
	        if (next.done) {
	          return observer.onCompleted();
	        }
	
	        var result = next.value;
	
	        if (mapper) {
	          try {
	            result = mapper(result, i);
	          } catch (e) {
	            return observer.onError(e);
	          }
	        }
	
	        observer.onNext(result);
	        recurse(i + 1);
	      }
	
	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };
	
	    return FromSink;
	  }());
	
	  var maxSafeInteger = Math.pow(2, 53) - 1;
	
	  function StringIterable(str) {
	    this._s = s;
	  }
	
	  StringIterable.prototype[$iterator$] = function () {
	    return new StringIterator(this._s);
	  };
	
	  function StringIterator(str) {
	    this._s = s;
	    this._l = s.length;
	    this._i = 0;
	  }
	
	  StringIterator.prototype[$iterator$] = function () {
	    return this;
	  };
	
	  StringIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
	  };
	
	  function ArrayIterable(a) {
	    this._a = a;
	  }
	
	  ArrayIterable.prototype[$iterator$] = function () {
	    return new ArrayIterator(this._a);
	  };
	
	  function ArrayIterator(a) {
	    this._a = a;
	    this._l = toLength(a);
	    this._i = 0;
	  }
	
	  ArrayIterator.prototype[$iterator$] = function () {
	    return this;
	  };
	
	  ArrayIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
	  };
	
	  function numberIsFinite(value) {
	    return typeof value === 'number' && root.isFinite(value);
	  }
	
	  function isNan(n) {
	    return n !== n;
	  }
	
	  function getIterable(o) {
	    var i = o[$iterator$], it;
	    if (!i && typeof o === 'string') {
	      it = new StringIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i && o.length !== undefined) {
	      it = new ArrayIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i) { throw new TypeError('Object is not iterable'); }
	    return o[$iterator$]();
	  }
	
	  function sign(value) {
	    var number = +value;
	    if (number === 0) { return number; }
	    if (isNaN(number)) { return number; }
	    return number < 0 ? -1 : 1;
	  }
	
	  function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) { return 0; }
	    if (len === 0 || !numberIsFinite(len)) { return len; }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) { return 0; }
	    if (len > maxSafeInteger) { return maxSafeInteger; }
	    return len;
	  }
	
	  /**
	  * This method creates a new Observable sequence from an array-like or iterable object.
	  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
	  * @param {Function} [mapFn] Map function to call on every element of the array.
	  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
	  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
	  */
	  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
	    if (iterable == null) {
	      throw new Error('iterable cannot be null.')
	    }
	    if (mapFn && !isFunction(mapFn)) {
	      throw new Error('mapFn when provided must be a function');
	    }
	    if (mapFn) {
	      var mapper = bindCallback(mapFn, thisArg, 2);
	    }
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromObservable(iterable, mapper, scheduler);
	  }
	
	  var FromArrayObservable = (function(__super__) {
	    inherits(FromArrayObservable, __super__);
	    function FromArrayObservable(args, scheduler) {
	      this.args = args;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    FromArrayObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromArraySink(observer, this);
	      return sink.run();
	    };
	
	    return FromArrayObservable;
	  }(ObservableBase));
	
	  function FromArraySink(observer, parent) {
	    this.observer = observer;
	    this.parent = parent;
	  }
	
	  FromArraySink.prototype.run = function () {
	    var observer = this.observer, args = this.parent.args, len = args.length;
	    function loopRecursive(i, recurse) {
	      if (i < len) {
	        observer.onNext(args[i]);
	        recurse(i + 1);
	      } else {
	        observer.onCompleted();
	      }
	    }
	
	    return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	  };
	
	  /**
	  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
	  * @deprecated use Observable.from or Observable.of
	  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
	  */
	  var observableFromArray = Observable.fromArray = function (array, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler)
	  };
	
	  /**
	   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new AnonymousObservable(function (o) {
	      var first = true;
	      return scheduler.scheduleRecursiveWithState(initialState, function (state, self) {
	        var hasResult, result;
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          hasResult && (result = resultSelector(state));
	        } catch (e) {
	          return o.onError(e);
	        }
	        if (hasResult) {
	          o.onNext(result);
	          self(state);
	        } else {
	          o.onCompleted();
	        }
	      });
	    });
	  };
	
	  function observableOf (scheduler, array) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler);
	  }
	
	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.of = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return new FromArrayObservable(args, currentThreadScheduler);
	  };
	
	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.ofWithScheduler = function (scheduler) {
	    var len = arguments.length, args = new Array(len - 1);
	    for(var i = 1; i < len; i++) { args[i - 1] = arguments[i]; }
	    return new FromArrayObservable(args, scheduler);
	  };
	
	  /**
	   * Creates an Observable sequence from changes to an array using Array.observe.
	   * @param {Array} array An array to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
	   */
	  Observable.ofArrayChanges = function(array) {
	    if (!Array.isArray(array)) { throw new TypeError('Array.observe only accepts arrays.'); }
	    if (typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }
	      
	      Array.observe(array, observerFn);
	
	      return function () {
	        Array.unobserve(array, observerFn);
	      };
	    });
	  };
	
	  /**
	   * Creates an Observable sequence from changes to an object using Object.observe.
	   * @param {Object} obj An object to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
	   */
	  Observable.ofObjectChanges = function(obj) {
	    if (obj == null) { throw new TypeError('object must not be null or undefined.'); }
	    if (typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }
	
	      Object.observe(obj, observerFn);
	
	      return function () {
	        Object.unobserve(obj, observerFn);
	      };
	    });
	  };
	
	  /**
	   *  Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
	   * @returns {Observable} An observable sequence whose observers will never get called.
	   */
	  var observableNever = Observable.never = function () {
	    return new AnonymousObservable(function () {
	      return disposableEmpty;
	    });
	  };
	
	  /**
	   * Convert an object into an observable sequence of [key, value] pairs.
	   * @param {Object} obj The object to inspect.
	   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
	   */
	  Observable.pairs = function (obj, scheduler) {
	    scheduler || (scheduler = Rx.Scheduler.currentThread);
	    return new AnonymousObservable(function (observer) {
	      var keys = Object.keys(obj), len = keys.length;
	      return scheduler.scheduleRecursiveWithState(0, function (idx, self) {
	        if (idx < len) {
	          var key = keys[idx];
	          observer.onNext([key, obj[key]]);
	          self(idx + 1);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };
	
	    var RangeObservable = (function(__super__) {
	    inherits(RangeObservable, __super__);
	    function RangeObservable(start, count, scheduler) {
	      this.start = start;
	      this.count = count;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    RangeObservable.prototype.subscribeCore = function (observer) {
	      var sink = new RangeSink(observer, this);
	      return sink.run();
	    };
	
	    return RangeObservable;
	  }(ObservableBase));
	
	  var RangeSink = (function () {
	    function RangeSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }
	
	    RangeSink.prototype.run = function () {
	      var start = this.parent.start, count = this.parent.count, observer = this.observer;
	      function loopRecursive(i, recurse) {
	        if (i < count) {
	          observer.onNext(start + i);
	          recurse(i + 1);
	        } else {
	          observer.onCompleted();
	        }
	      }
	
	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };
	
	    return RangeSink;
	  }());
	
	  /**
	  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
	  * @param {Number} start The value of the first integer in the sequence.
	  * @param {Number} count The number of sequential integers to generate.
	  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
	  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
	  */
	  Observable.range = function (start, count, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new RangeObservable(start, count, scheduler);
	  };
	
	  /**
	   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.repeat(42);
	   *  var res = Rx.Observable.repeat(42, 4);
	   *  3 - res = Rx.Observable.repeat(42, 4, Rx.Scheduler.timeout);
	   *  4 - res = Rx.Observable.repeat(42, null, Rx.Scheduler.timeout);
	   * @param {Mixed} value Element to repeat.
	   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
	   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
	   */
	  Observable.repeat = function (value, repeatCount, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return observableReturn(value, scheduler).repeat(repeatCount == null ? -1 : repeatCount);
	  };
	
	  /**
	   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
	   *  There is an alias called 'just' or browsers <IE9.
	   * @param {Mixed} value Single element in the resulting observable sequence.
	   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence containing the single specified element.
	   */
	  var observableReturn = Observable['return'] = Observable.just = Observable.returnValue = function (value, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (o) {
	      return scheduler.scheduleWithState(value, function(_,v) {
	        o.onNext(v);
	        o.onCompleted();
	      });
	    });
	  };
	
	  /**
	   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
	   *  There is an alias to this method called 'throwError' for browsers <IE9.
	   * @param {Mixed} error An object used for the sequence's termination.
	   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
	   */
	  var observableThrow = Observable['throw'] = Observable.throwError = function (error, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.schedule(function () {
	        observer.onError(error);
	      });
	    });
	  };
	
	  /** @deprecated use #some instead */
	  Observable.throwException = function () {
	    //deprecate('throwException', 'throwError');
	    return Observable.throwError.apply(null, arguments);
	  };
	
	  /**
	   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
	   * @param {Function} resourceFactory Factory function to obtain a resource object.
	   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
	   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
	   */
	  Observable.using = function (resourceFactory, observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var disposable = disposableEmpty, resource, source;
	      try {
	        resource = resourceFactory();
	        resource && (disposable = resource);
	        source = observableFactory(resource);
	      } catch (exception) {
	        return new CompositeDisposable(observableThrow(exception).subscribe(observer), disposable);
	      }
	      return new CompositeDisposable(source.subscribe(observer), disposable);
	    });
	  };
	
	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   * @param {Observable} rightSource Second observable sequence or Promise.
	   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
	   */
	  observableProto.amb = function (rightSource) {
	    var leftSource = this;
	    return new AnonymousObservable(function (observer) {
	      var choice,
	        leftChoice = 'L', rightChoice = 'R',
	        leftSubscription = new SingleAssignmentDisposable(),
	        rightSubscription = new SingleAssignmentDisposable();
	
	      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));
	
	      function choiceL() {
	        if (!choice) {
	          choice = leftChoice;
	          rightSubscription.dispose();
	        }
	      }
	
	      function choiceR() {
	        if (!choice) {
	          choice = rightChoice;
	          leftSubscription.dispose();
	        }
	      }
	
	      leftSubscription.setDisposable(leftSource.subscribe(function (left) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onNext(left);
	        }
	      }, function (err) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onCompleted();
	        }
	      }));
	
	      rightSubscription.setDisposable(rightSource.subscribe(function (right) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onNext(right);
	        }
	      }, function (err) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onCompleted();
	        }
	      }));
	
	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    });
	  };
	
	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   *
	   * @example
	   * var = Rx.Observable.amb(xs, ys, zs);
	   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
	   */
	  Observable.amb = function () {
	    var acc = observableNever(), items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
	    }
	
	    function func(previous, current) {
	      return previous.amb(current);
	    }
	    for (var i = 0, len = items.length; i < len; i++) {
	      acc = func(acc, items[i]);
	    }
	    return acc;
	  };
	
	  function observableCatchHandler(source, handler) {
	    return new AnonymousObservable(function (o) {
	      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
	      subscription.setDisposable(d1);
	      d1.setDisposable(source.subscribe(function (x) { o.onNext(x); }, function (e) {
	        try {
	          var result = handler(e);
	        } catch (ex) {
	          return o.onError(ex);
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	
	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(result.subscribe(o));
	      }, function (x) { o.onCompleted(x); }));
	
	      return subscription;
	    }, source);
	  }
	
	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @example
	   * 1 - xs.catchException(ys)
	   * 2 - xs.catchException(function (ex) { return ys(ex); })
	   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
	   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
	   */
	  observableProto['catch'] = observableProto.catchError = observableProto.catchException = function (handlerOrSecond) {
	    return typeof handlerOrSecond === 'function' ?
	      observableCatchHandler(this, handlerOrSecond) :
	      observableCatch([this, handlerOrSecond]);
	  };
	
	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
	   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
	   */
	  var observableCatch = Observable.catchError = Observable['catch'] = Observable.catchException = function () {
	    var items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
	    }
	    return enumerableOf(items).catchError();
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   * This can be in the form of an argument list of observables or an array.
	   *
	   * @example
	   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    if (Array.isArray(args[0])) {
	      args[0].unshift(this);
	    } else {
	      args.unshift(this);
	    }
	    return combineLatest.apply(this, args);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   *
	   * @example
	   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  var combineLatest = Observable.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = args.pop();
	    Array.isArray(args[0]) && (args = args[0]);
	
	    return new AnonymousObservable(function (o) {
	      var n = args.length,
	        falseFactory = function () { return false; },
	        hasValue = arrayInitialize(n, falseFactory),
	        hasValueAll = false,
	        isDone = arrayInitialize(n, falseFactory),
	        values = new Array(n);
	
	      function next(i) {
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          try {
	            var res = resultSelector.apply(null, values);
	          } catch (e) {
	            return o.onError(e);
	          }
	          o.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          o.onCompleted();
	        }
	      }
	
	      function done (i) {
	        isDone[i] = true;
	        isDone.every(identity) && o.onCompleted();
	      }
	
	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	              values[i] = x;
	              next(i);
	            },
	            function(e) { o.onError(e); },
	            function () { done(i); }
	          ));
	          subscriptions[i] = sad;
	        }(idx));
	      }
	
	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };
	
	  /**
	   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  observableProto.concat = function () {
	    for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    args.unshift(this);
	    return observableConcat.apply(null, args);
	  };
	
	  /**
	   * Concatenates all the observable sequences.
	   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  var observableConcat = Observable.concat = function () {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      args = new Array(arguments.length);
	      for(var i = 0, len = arguments.length; i < len; i++) { args[i] = arguments[i]; }
	    }
	    return enumerableOf(args).concat();
	  };
	
	  /**
	   * Concatenates an observable sequence of observable sequences.
	   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
	   */
	  observableProto.concatAll = observableProto.concatObservable = function () {
	    return this.merge(1);
	  };
	
	  var MergeObservable = (function (__super__) {
	    inherits(MergeObservable, __super__);
	
	    function MergeObservable(source, maxConcurrent) {
	      this.source = source;
	      this.maxConcurrent = maxConcurrent;
	      __super__.call(this);
	    }
	
	    MergeObservable.prototype.subscribeCore = function(observer) {
	      var g = new CompositeDisposable();
	      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
	      return g;
	    };
	
	    return MergeObservable;
	
	  }(ObservableBase));
	
	  var MergeObserver = (function () {
	    function MergeObserver(o, max, g) {
	      this.o = o;
	      this.max = max;
	      this.g = g;
	      this.done = false;
	      this.q = [];
	      this.activeCount = 0;
	      this.isStopped = false;
	    }
	    MergeObserver.prototype.handleSubscribe = function (xs) {
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	      isPromise(xs) && (xs = observableFromPromise(xs));
	      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
	    };
	    MergeObserver.prototype.onNext = function (innerSource) {
	      if (this.isStopped) { return; }
	        if(this.activeCount < this.max) {
	          this.activeCount++;
	          this.handleSubscribe(innerSource);
	        } else {
	          this.q.push(innerSource);
	        }
	      };
	      MergeObserver.prototype.onError = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.o.onError(e);
	        }
	      };
	      MergeObserver.prototype.onCompleted = function () {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.done = true;
	          this.activeCount === 0 && this.o.onCompleted();
	        }
	      };
	      MergeObserver.prototype.dispose = function() { this.isStopped = true; };
	      MergeObserver.prototype.fail = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.o.onError(e);
	          return true;
	        }
	
	        return false;
	      };
	
	      function InnerObserver(parent, sad) {
	        this.parent = parent;
	        this.sad = sad;
	        this.isStopped = false;
	      }
	      InnerObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.parent.o.onNext(x); } };
	      InnerObserver.prototype.onError = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.parent.o.onError(e);
	        }
	      };
	      InnerObserver.prototype.onCompleted = function () {
	        if(!this.isStopped) {
	          this.isStopped = true;
	          var parent = this.parent;
	          parent.g.remove(this.sad);
	          if (parent.q.length > 0) {
	            parent.handleSubscribe(parent.q.shift());
	          } else {
	            parent.activeCount--;
	            parent.done && parent.activeCount === 0 && parent.o.onCompleted();
	          }
	        }
	      };
	      InnerObserver.prototype.dispose = function() { this.isStopped = true; };
	      InnerObserver.prototype.fail = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.parent.o.onError(e);
	          return true;
	        }
	
	        return false;
	      };
	
	      return MergeObserver;
	  }());
	
	
	
	
	
	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
	  * Or merges two observable sequences into a single observable sequence.
	  *
	  * @example
	  * 1 - merged = sources.merge(1);
	  * 2 - merged = source.merge(otherSource);
	  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.merge = function (maxConcurrentOrOther) {
	    return typeof maxConcurrentOrOther !== 'number' ?
	      observableMerge(this, maxConcurrentOrOther) :
	      new MergeObservable(this, maxConcurrentOrOther);
	  };
	
	  /**
	   * Merges all the observable sequences into a single observable sequence.
	   * The scheduler is optional and if not specified, the immediate scheduler is used.
	   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
	   */
	  var observableMerge = Observable.merge = function () {
	    var scheduler, sources = [], i, len = arguments.length;
	    if (!arguments[0]) {
	      scheduler = immediateScheduler;
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else if (isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else {
	      scheduler = immediateScheduler;
	      for(i = 0; i < len; i++) { sources.push(arguments[i]); }
	    }
	    if (Array.isArray(sources[0])) {
	      sources = sources[0];
	    }
	    return observableOf(scheduler, sources).mergeAll();
	  };
	
	  var MergeAllObservable = (function (__super__) {
	    inherits(MergeAllObservable, __super__);
	
	    function MergeAllObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    MergeAllObservable.prototype.subscribeCore = function (observer) {
	      var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();
	      g.add(m);
	      m.setDisposable(this.source.subscribe(new MergeAllObserver(observer, g)));
	      return g;
	    };
	
	    return MergeAllObservable;
	  }(ObservableBase));
	
	  var MergeAllObserver = (function() {
	
	    function MergeAllObserver(o, g) {
	      this.o = o;
	      this.g = g;
	      this.isStopped = false;
	      this.done = false;
	    }
	    MergeAllObserver.prototype.onNext = function(innerSource) {
	      if(this.isStopped) { return; }
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	
	      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, this.g, sad)));
	    };
	    MergeAllObserver.prototype.onError = function (e) {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	      }
	    };
	    MergeAllObserver.prototype.onCompleted = function () {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.done = true;
	        this.g.length === 1 && this.o.onCompleted();
	      }
	    };
	    MergeAllObserver.prototype.dispose = function() { this.isStopped = true; };
	    MergeAllObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    function InnerObserver(parent, g, sad) {
	      this.parent = parent;
	      this.g = g;
	      this.sad = sad;
	      this.isStopped = false;
	    }
	    InnerObserver.prototype.onNext = function (x) { if (!this.isStopped) { this.parent.o.onNext(x); } };
	    InnerObserver.prototype.onError = function (e) {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	      }
	    };
	    InnerObserver.prototype.onCompleted = function () {
	      if(!this.isStopped) {
	        var parent = this.parent;
	        this.isStopped = true;
	        parent.g.remove(this.sad);
	        parent.done && parent.g.length === 1 && parent.o.onCompleted();
	      }
	    };
	    InnerObserver.prototype.dispose = function() { this.isStopped = true; };
	    InnerObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    return MergeAllObserver;
	
	  }());
	
	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.mergeAll = observableProto.mergeObservable = function () {
	    return new MergeAllObservable(this);
	  };
	
	  var CompositeError = Rx.CompositeError = function(errors) {
	    this.name = "NotImplementedError";
	    this.innerErrors = errors;
	    this.message = 'This contains multiple errors. Check the innerErrors';
	    Error.call(this);
	  }
	  CompositeError.prototype = Error.prototype;
	
	  /**
	  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
	  * receive all successfully emitted items from all of the source Observables without being interrupted by
	  * an error notification from one of them.
	  *
	  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
	  * error via the Observer's onError, mergeDelayError will refrain from propagating that
	  * error notification until all of the merged Observables have finished emitting items.
	  * @param {Array | Arguments} args Arguments or an array to merge.
	  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
	  */
	  Observable.mergeDelayError = function() {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      var len = arguments.length;
	      args = new Array(len);
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    var source = observableOf(null, args);
	
	    return new AnonymousObservable(function (o) {
	      var group = new CompositeDisposable(),
	        m = new SingleAssignmentDisposable(),
	        isStopped = false,
	        errors = [];
	
	      function setCompletion() {
	        if (errors.length === 0) {
	          o.onCompleted();
	        } else if (errors.length === 1) {
	          o.onError(errors[0]);
	        } else {
	          o.onError(new CompositeError(errors));
	        }
	      }
	
	      group.add(m);
	
	      m.setDisposable(source.subscribe(
	        function (innerSource) {
	          var innerSubscription = new SingleAssignmentDisposable();
	          group.add(innerSubscription);
	
	          // Check for promises support
	          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	          innerSubscription.setDisposable(innerSource.subscribe(
	            function (x) { o.onNext(x); },
	            function (e) {
	              errors.push(e);
	              group.remove(innerSubscription);
	              isStopped && group.length === 1 && setCompletion();
	            },
	            function () {
	              group.remove(innerSubscription);
	              isStopped && group.length === 1 && setCompletion();
	          }));
	        },
	        function (e) {
	          errors.push(e);
	          isStopped = true;
	          group.length === 1 && setCompletion();
	        },
	        function () {
	          isStopped = true;
	          group.length === 1 && setCompletion();
	        }));
	      return group;
	    });
	  };
	
	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
	   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
	   */
	  observableProto.onErrorResumeNext = function (second) {
	    if (!second) { throw new Error('Second observable is required'); }
	    return onErrorResumeNext([this, second]);
	  };
	
	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   *
	   * @example
	   * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);
	   * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);
	   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
	   */
	  var onErrorResumeNext = Observable.onErrorResumeNext = function () {
	    var sources = [];
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
	    }
	    return new AnonymousObservable(function (observer) {
	      var pos = 0, subscription = new SerialDisposable(),
	      cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        var current, d;
	        if (pos < sources.length) {
	          current = sources[pos++];
	          isPromise(current) && (current = observableFromPromise(current));
	          d = new SingleAssignmentDisposable();
	          subscription.setDisposable(d);
	          d.setDisposable(current.subscribe(observer.onNext.bind(observer), self, self));
	        } else {
	          observer.onCompleted();
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    });
	  };
	
	  /**
	   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
	   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
	   */
	  observableProto.skipUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var isOpen = false;
	      var disposables = new CompositeDisposable(source.subscribe(function (left) {
	        isOpen && o.onNext(left);
	      }, function (e) { o.onError(e); }, function () {
	        isOpen && o.onCompleted();
	      }));
	
	      isPromise(other) && (other = observableFromPromise(other));
	
	      var rightSubscription = new SingleAssignmentDisposable();
	      disposables.add(rightSubscription);
	      rightSubscription.setDisposable(other.subscribe(function () {
	        isOpen = true;
	        rightSubscription.dispose();
	      }, function (e) { o.onError(e); }, function () {
	        rightSubscription.dispose();
	      }));
	
	      return disposables;
	    }, source);
	  };
	
	  /**
	   * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto['switch'] = observableProto.switchLatest = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasLatest = false,
	        innerSubscription = new SerialDisposable(),
	        isStopped = false,
	        latest = 0,
	        subscription = sources.subscribe(
	          function (innerSource) {
	            var d = new SingleAssignmentDisposable(), id = ++latest;
	            hasLatest = true;
	            innerSubscription.setDisposable(d);
	
	            // Check if Promise or Observable
	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	            d.setDisposable(innerSource.subscribe(
	              function (x) { latest === id && observer.onNext(x); },
	              function (e) { latest === id && observer.onError(e); },
	              function () {
	                if (latest === id) {
	                  hasLatest = false;
	                  isStopped && observer.onCompleted();
	                }
	              }));
	          },
	          function (e) { observer.onError(e); },
	          function () {
	            isStopped = true;
	            !hasLatest && observer.onCompleted();
	          });
	      return new CompositeDisposable(subscription, innerSubscription);
	    }, sources);
	  };
	
	  /**
	   * Returns the values from the source observable sequence until the other observable sequence produces a value.
	   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
	   */
	  observableProto.takeUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      isPromise(other) && (other = observableFromPromise(other));
	      return new CompositeDisposable(
	        source.subscribe(o),
	        other.subscribe(function () { o.onCompleted(); }, function (e) { o.onError(e); }, noop)
	      );
	    }, source);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
	   *
	   * @example
	   * 1 - obs = obs1.withLatestFrom(obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = obs1.withLatestFrom([obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.withLatestFrom = function () {
	    var len = arguments.length, args = new Array(len)
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = args.pop(), source = this;
	
	    if (typeof source === 'undefined') {
	      throw new Error('Source observable not found for withLatestFrom().');
	    }
	    if (typeof resultSelector !== 'function') {
	      throw new Error('withLatestFrom() expects a resultSelector function.');
	    }
	    if (Array.isArray(args[0])) {
	      args = args[0];
	    }
	
	    return new AnonymousObservable(function (observer) {
	      var falseFactory = function () { return false; },
	        n = args.length,
	        hasValue = arrayInitialize(n, falseFactory),
	        hasValueAll = false,
	        values = new Array(n);
	
	      var subscriptions = new Array(n + 1);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var other = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(other) && (other = observableFromPromise(other));
	          sad.setDisposable(other.subscribe(function (x) {
	            values[i] = x;
	            hasValue[i] = true;
	            hasValueAll = hasValue.every(identity);
	          }, observer.onError.bind(observer), function () {}));
	          subscriptions[i] = sad;
	        }(idx));
	      }
	
	      var sad = new SingleAssignmentDisposable();
	      sad.setDisposable(source.subscribe(function (x) {
	        var res;
	        var allValues = [x].concat(values);
	        if (!hasValueAll) return;
	        try {
	          res = resultSelector.apply(null, allValues);
	        } catch (ex) {
	          observer.onError(ex);
	          return;
	        }
	        observer.onNext(res);
	      }, observer.onError.bind(observer), function () {
	        observer.onCompleted();
	      }));
	      subscriptions[n] = sad;
	
	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };
	
	  function zipArray(second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0, len = second.length;
	      return first.subscribe(function (left) {
	        if (index < len) {
	          var right = second[index++], result;
	          try {
	            result = resultSelector(left, right);
	          } catch (e) {
	            return observer.onError(e);
	          }
	          observer.onNext(result);
	        } else {
	          observer.onCompleted();
	        }
	      }, function (e) { observer.onError(e); }, function () { observer.onCompleted(); });
	    }, first);
	  }
	
	  function falseFactory() { return false; }
	  function emptyArrayFactory() { return []; }
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
	   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
	   *
	   * @example
	   * 1 - res = obs1.zip(obs2, fn);
	   * 1 - res = x1.zip([1,2,3], fn);
	   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
	   */
	  observableProto.zip = function () {
	    if (Array.isArray(arguments[0])) { return zipArray.apply(this, arguments); }
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	
	    var parent = this, resultSelector = args.pop();
	    args.unshift(parent);
	    return new AnonymousObservable(function (observer) {
	      var n = args.length,
	        queues = arrayInitialize(n, emptyArrayFactory),
	        isDone = arrayInitialize(n, falseFactory);
	
	      function next(i) {
	        var res, queuedValues;
	        if (queues.every(function (x) { return x.length > 0; })) {
	          try {
	            queuedValues = queues.map(function (x) { return x.shift(); });
	            res = resultSelector.apply(parent, queuedValues);
	          } catch (ex) {
	            observer.onError(ex);
	            return;
	          }
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          observer.onCompleted();
	        }
	      };
	
	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(function (x) { return x; })) {
	          observer.onCompleted();
	        }
	      }
	
	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) { observer.onError(e); }, function () {
	            done(i);
	          }));
	          subscriptions[i] = sad;
	        })(idx);
	      }
	
	      return new CompositeDisposable(subscriptions);
	    }, parent);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
	   * @param arguments Observable sources.
	   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  Observable.zip = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var first = args.shift();
	    return first.zip.apply(first, args);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
	   * @param arguments Observable sources.
	   * @returns {Observable} An observable sequence containing lists of elements at corresponding indexes.
	   */
	  Observable.zipArray = function () {
	    var sources;
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      var len = arguments.length;
	      sources = new Array(len);
	      for(var i = 0; i < len; i++) { sources[i] = arguments[i]; }
	    }
	    return new AnonymousObservable(function (observer) {
	      var n = sources.length,
	        queues = arrayInitialize(n, function () { return []; }),
	        isDone = arrayInitialize(n, function () { return false; });
	
	      function next(i) {
	        if (queues.every(function (x) { return x.length > 0; })) {
	          var res = queues.map(function (x) { return x.shift(); });
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      };
	
	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      }
	
	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          subscriptions[i] = new SingleAssignmentDisposable();
	          subscriptions[i].setDisposable(sources[i].subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) { observer.onError(e); }, function () {
	            done(i);
	          }));
	        })(idx);
	      }
	
	      return new CompositeDisposable(subscriptions);
	    });
	  };
	
	  /**
	   *  Hides the identity of an observable sequence.
	   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
	   */
	  observableProto.asObservable = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) { return source.subscribe(o); }, this);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
	   *
	   * @example
	   *  var res = xs.bufferWithCount(10);
	   *  var res = xs.bufferWithCount(10, 1);
	   * @param {Number} count Length of each buffer.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithCount = function (count, skip) {
	    if (typeof skip !== 'number') {
	      skip = count;
	    }
	    return this.windowWithCount(count, skip).selectMany(function (x) {
	      return x.toArray();
	    }).where(function (x) {
	      return x.length > 0;
	    });
	  };
	
	  /**
	   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
	   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
	   */
	  observableProto.dematerialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) { return x.accept(o); }, function(e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };
	
	  /**
	   *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
	   *
	   *  var obs = observable.distinctUntilChanged();
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });
	   *
	   * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
	   * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
	   * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinctUntilChanged = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hasCurrentKey = false, currentKey;
	      return source.subscribe(function (value) {
	        var key = value;
	        if (keySelector) {
	          try {
	            key = keySelector(value);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (hasCurrentKey) {
	          try {
	            var comparerEquals = comparer(currentKey, key);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (!hasCurrentKey || !comparerEquals) {
	          hasCurrentKey = true;
	          currentKey = key;
	          o.onNext(value);
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };
	
	  /**
	   *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
	   * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var tapObserver = !observerOrOnNext || isFunction(observerOrOnNext) ?
	        observerCreate(observerOrOnNext || noop, onError || noop, onCompleted || noop) :
	        observerOrOnNext;
	
	      return source.subscribe(function (x) {
	        try {
	          tapObserver.onNext(x);
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onNext(x);
	      }, function (err) {
	          try {
	            tapObserver.onError(err);
	          } catch (e) {
	            observer.onError(e);
	          }
	        observer.onError(err);
	      }, function () {
	        try {
	          tapObserver.onCompleted();
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onCompleted();
	      });
	    }, this);
	  };
	
	  /**
	   *  Invokes an action for each element in the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onNext Action to invoke for each element in the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
	    return this.tap(typeof thisArg !== 'undefined' ? function (x) { onNext.call(thisArg, x); } : onNext);
	  };
	
	  /**
	   *  Invokes an action upon exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
	    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) { onError.call(thisArg, e); } : onError);
	  };
	
	  /**
	   *  Invokes an action upon graceful termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
	    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () { onCompleted.call(thisArg); } : onCompleted);
	  };
	
	  /**
	   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
	   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
	   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
	   */
	  observableProto['finally'] = observableProto.ensure = function (action) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var subscription;
	      try {
	        subscription = source.subscribe(observer);
	      } catch (e) {
	        action();
	        throw e;
	      }
	      return disposableCreate(function () {
	        try {
	          subscription.dispose();
	        } catch (e) {
	          throw e;
	        } finally {
	          action();
	        }
	      });
	    }, this);
	  };
	
	  /**
	   * @deprecated use #finally or #ensure instead.
	   */
	  observableProto.finallyAction = function (action) {
	    //deprecate('finallyAction', 'finally or ensure');
	    return this.ensure(action);
	  };
	
	  /**
	   *  Ignores all elements in an observable sequence leaving only the termination messages.
	   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
	   */
	  observableProto.ignoreElements = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(noop, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
	   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
	   */
	  observableProto.materialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(function (value) {
	        observer.onNext(notificationCreateOnNext(value));
	      }, function (e) {
	        observer.onNext(notificationCreateOnError(e));
	        observer.onCompleted();
	      }, function () {
	        observer.onNext(notificationCreateOnCompleted());
	        observer.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
	   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
	   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
	   */
	  observableProto.repeat = function (repeatCount) {
	    return enumerableRepeat(this, repeatCount).concat();
	  };
	
	  /**
	   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
	   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
	   *
	   * @example
	   *  var res = retried = retry.repeat();
	   *  var res = retried = retry.repeat(2);
	   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retry = function (retryCount) {
	    return enumerableRepeat(this, retryCount).catchError();
	  };
	
	  /**
	   *  Repeats the source observable sequence upon error each time the notifier emits or until it successfully terminates. 
	   *  if the notifier completes, the observable sequence completes.
	   *
	   * @example
	   *  var timer = Observable.timer(500);
	   *  var source = observable.retryWhen(timer);
	   * @param {Observable} [notifier] An observable that triggers the retries or completes the observable with onNext or onCompleted respectively.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retryWhen = function (notifier) {
	    return enumerableRepeat(this).catchErrorWhen(notifier);
	  };
	  /**
	   *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
	   *  For aggregation behavior with no intermediate results, see Observable.aggregate.
	   * @example
	   *  var res = source.scan(function (acc, x) { return acc + x; });
	   *  var res = source.scan(0, function (acc, x) { return acc + x; });
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing the accumulated values.
	   */
	  observableProto.scan = function () {
	    var hasSeed = false, seed, accumulator, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	
	          o.onNext(accumulation);
	        },
	        function (e) { o.onError(e); },
	        function () {
	          !hasValue && hasSeed && o.onNext(seed);
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };
	
	  /**
	   *  Bypasses a specified number of elements at the end of an observable sequence.
	   * @description
	   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
	   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
	   * @param count Number of elements to bypass at the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
	   */
	  observableProto.skipLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && o.onNext(q.shift());
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
	   *  @example
	   *  var res = source.startWith(1, 2, 3);
	   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
	   * @param {Arguments} args The specified values to prepend to the observable sequence
	   * @returns {Observable} The source sequence prepended with the specified values.
	   */
	  observableProto.startWith = function () {
	    var values, scheduler, start = 0;
	    if (!!arguments.length && isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      start = 1;
	    } else {
	      scheduler = immediateScheduler;
	    }
	    for(var args = [], i = start, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    return enumerableOf([observableFromArray(args, scheduler), this]).concat();
	  };
	
	  /**
	   *  Returns a specified number of contiguous elements from the end of an observable sequence.
	   * @description
	   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
	   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) { o.onError(e); }, function () {
	        while (q.length > 0) { o.onNext(q.shift()); }
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
	   *
	   * @description
	   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
	   *  source sequence, this buffer is produced on the result sequence.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLastBuffer = function (count) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(q);
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
	   *
	   *  var res = xs.windowWithCount(10);
	   *  var res = xs.windowWithCount(10, 1);
	   * @param {Number} count Length of each window.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithCount = function (count, skip) {
	    var source = this;
	    +count || (count = 0);
	    Math.abs(count) === Infinity && (count = 0);
	    if (count <= 0) { throw new ArgumentOutOfRangeError(); }
	    skip == null && (skip = count);
	    +skip || (skip = 0);
	    Math.abs(skip) === Infinity && (skip = 0);
	
	    if (skip <= 0) { throw new ArgumentOutOfRangeError(); }
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(),
	        refCountDisposable = new RefCountDisposable(m),
	        n = 0,
	        q = [];
	
	      function createWindow () {
	        var s = new Subject();
	        q.push(s);
	        observer.onNext(addRef(s, refCountDisposable));
	      }
	
	      createWindow();
	
	      m.setDisposable(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	          var c = n - count + 1;
	          c >= 0 && c % skip === 0 && q.shift().onCompleted();
	          ++n % skip === 0 && createWindow();
	        },
	        function (e) {
	          while (q.length > 0) { q.shift().onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          while (q.length > 0) { q.shift().onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	  function concatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).concatAll();
	  }
	
	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
	   * source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.concatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
	
	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      });
	    }
	    return isFunction(selector) ?
	      concatMap(this, selector, thisArg) :
	      concatMap(this, function () { return selector; });
	  };
	
	  /**
	   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
	    var source = this,
	        onNextFunc = bindCallback(onNext, thisArg, 2),
	        onErrorFunc = bindCallback(onError, thisArg, 1),
	        onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNextFunc(x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onErrorFunc(err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompletedFunc();
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, this).concatAll();
	  };
	
	    /**
	     *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
	     *
	     *  var res = obs = xs.defaultIfEmpty();
	     *  2 - obs = xs.defaultIfEmpty(false);
	     *
	     * @memberOf Observable#
	     * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
	     * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
	     */
	    observableProto.defaultIfEmpty = function (defaultValue) {
	      var source = this;
	      defaultValue === undefined && (defaultValue = null);
	      return new AnonymousObservable(function (observer) {
	        var found = false;
	        return source.subscribe(function (x) {
	          found = true;
	          observer.onNext(x);
	        },
	        function (e) { observer.onError(e); }, 
	        function () {
	          !found && observer.onNext(defaultValue);
	          observer.onCompleted();
	        });
	      }, source);
	    };
	
	  // Swap out for Array.findIndex
	  function arrayIndexOfComparer(array, item, comparer) {
	    for (var i = 0, len = array.length; i < len; i++) {
	      if (comparer(array[i], item)) { return i; }
	    }
	    return -1;
	  }
	
	  function HashSet(comparer) {
	    this.comparer = comparer;
	    this.set = [];
	  }
	  HashSet.prototype.push = function(value) {
	    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
	    retValue && this.set.push(value);
	    return retValue;
	  };
	
	  /**
	   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
	   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
	   *
	   * @example
	   *  var res = obs = xs.distinct();
	   *  2 - obs = xs.distinct(function (x) { return x.id; });
	   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
	   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
	   * @param {Function} [comparer]  Used to compare items in the collection.
	   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinct = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hashSet = new HashSet(comparer);
	      return source.subscribe(function (x) {
	        var key = x;
	
	        if (keySelector) {
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        hashSet.push(key) && o.onNext(x);
	      },
	      function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };
	
	  /**
	   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
	   *
	   * @example
	   *  var res = observable.groupBy(function (x) { return x.id; });
	   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
	   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
	   * @param {Function} keySelector A function to extract the key for each element.
	   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
	   * @param {Function} [comparer] Used to determine whether the objects are equal.
	   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	   */
	  observableProto.groupBy = function (keySelector, elementSelector, comparer) {
	    return this.groupByUntil(keySelector, elementSelector, observableNever, comparer);
	  };
	
	    /**
	     *  Groups the elements of an observable sequence according to a specified key selector function.
	     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
	     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
	     *
	     * @example
	     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
	     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
	     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
	     * @param {Function} keySelector A function to extract the key for each element.
	     * @param {Function} durationSelector A function to signal the expiration of a group.
	     * @param {Function} [comparer] Used to compare objects. When not specified, the default comparer is used.
	     * @returns {Observable}
	     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
	     *
	     */
	    observableProto.groupByUntil = function (keySelector, elementSelector, durationSelector, comparer) {
	      var source = this;
	      elementSelector || (elementSelector = identity);
	      comparer || (comparer = defaultComparer);
	      return new AnonymousObservable(function (observer) {
	        function handleError(e) { return function (item) { item.onError(e); }; }
	        var map = new Dictionary(0, comparer),
	          groupDisposable = new CompositeDisposable(),
	          refCountDisposable = new RefCountDisposable(groupDisposable);
	
	        groupDisposable.add(source.subscribe(function (x) {
	          var key;
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            map.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	
	          var fireNewMapEntry = false,
	            writer = map.tryGetValue(key);
	          if (!writer) {
	            writer = new Subject();
	            map.set(key, writer);
	            fireNewMapEntry = true;
	          }
	
	          if (fireNewMapEntry) {
	            var group = new GroupedObservable(key, writer, refCountDisposable),
	              durationGroup = new GroupedObservable(key, writer);
	            try {
	              duration = durationSelector(durationGroup);
	            } catch (e) {
	              map.getValues().forEach(handleError(e));
	              observer.onError(e);
	              return;
	            }
	
	            observer.onNext(group);
	
	            var md = new SingleAssignmentDisposable();
	            groupDisposable.add(md);
	
	            var expire = function () {
	              map.remove(key) && writer.onCompleted();
	              groupDisposable.remove(md);
	            };
	
	            md.setDisposable(duration.take(1).subscribe(
	              noop,
	              function (exn) {
	                map.getValues().forEach(handleError(exn));
	                observer.onError(exn);
	              },
	              expire)
	            );
	          }
	
	          var element;
	          try {
	            element = elementSelector(x);
	          } catch (e) {
	            map.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	
	          writer.onNext(element);
	      }, function (ex) {
	        map.getValues().forEach(handleError(ex));
	        observer.onError(ex);
	      }, function () {
	        map.getValues().forEach(function (item) { item.onCompleted(); });
	        observer.onCompleted();
	      }));
	
	      return refCountDisposable;
	    }, source);
	  };
	
	  var MapObservable = (function (__super__) {
	    inherits(MapObservable, __super__);
	
	    function MapObservable(source, selector, thisArg) {
	      this.source = source;
	      this.selector = bindCallback(selector, thisArg, 3);
	      __super__.call(this);
	    }
	
	    MapObservable.prototype.internalMap = function (selector, thisArg) {
	      var self = this;
	      return new MapObservable(this.source, function (x, i, o) { return selector.call(this, self.selector(x, i, o), i, o); }, thisArg)
	    };
	
	    MapObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new MapObserver(observer, this.selector, this));
	    };
	
	    return MapObservable;
	
	  }(ObservableBase));
	
	  function MapObserver(observer, selector, source) {
	    this.observer = observer;
	    this.selector = selector;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }
	
	  MapObserver.prototype.onNext = function(x) {
	    if (this.isStopped) { return; }
	    var result = tryCatch(this.selector).call(this, x, this.i++, this.source);
	    if (result === errorObj) {
	      return this.observer.onError(result.e);
	    }
	    this.observer.onNext(result);
	  };
	  MapObserver.prototype.onError = function (e) {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
	  };
	  MapObserver.prototype.onCompleted = function () {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
	  };
	  MapObserver.prototype.dispose = function() { this.isStopped = true; };
	  MapObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	
	    return false;
	  };
	
	  /**
	  * Projects each element of an observable sequence into a new form by incorporating the element's index.
	  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
	  */
	  observableProto.map = observableProto.select = function (selector, thisArg) {
	    var selectorFn = typeof selector === 'function' ? selector : function () { return selector; };
	    return this instanceof MapObservable ?
	      this.internalMap(selectorFn, thisArg) :
	      new MapObservable(this, selectorFn, thisArg);
	  };
	
	  /**
	   * Retrieves the value of a specified nested property from all elements in
	   * the Observable sequence.
	   * @param {Arguments} arguments The nested properties to pluck.
	   * @returns {Observable} Returns a new Observable sequence of property values.
	   */
	  observableProto.pluck = function () {
	    var args = arguments, len = arguments.length;
	    if (len === 0) { throw new Error('List of properties cannot be empty.'); }
	    return this.map(function (x) {
	      var currentProp = x;
	      for (var i = 0; i < len; i++) {
	        var p = currentProp[args[i]];
	        if (typeof p !== 'undefined') {
	          currentProp = p;
	        } else {
	          return undefined;
	        }
	      }
	      return currentProp;
	    });
	  };
	
	  function flatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).mergeAll();
	  }
	
	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectMany = observableProto.flatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.flatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
	
	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      }, thisArg);
	    }
	    return isFunction(selector) ?
	      flatMap(this, selector, thisArg) :
	      flatMap(this, function () { return selector; });
	  };
	
	  /**
	   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.flatMapObserver = observableProto.selectManyObserver = function (onNext, onError, onCompleted, thisArg) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	
	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNext.call(thisArg, x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onError.call(thisArg, err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompleted.call(thisArg);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, source).mergeAll();
	  };
	
	  /**
	   *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then
	   *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences
	   *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function (selector, thisArg) {
	    return this.select(selector, thisArg).switchLatest();
	  };
	
	  /**
	   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
	   * @param {Number} count The number of elements to skip before returning the remaining elements.
	   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
	   */
	  observableProto.skip = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining <= 0) {
	          o.onNext(x);
	        } else {
	          remaining--;
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
	   *  The element's index is used in the logic of the predicate function.
	   *
	   *  var res = source.skipWhile(function (value) { return value < 10; });
	   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
	   */
	  observableProto.skipWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0, running = false;
	      return source.subscribe(function (x) {
	        if (!running) {
	          try {
	            running = !callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        running && o.onNext(x);
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
	   *
	   *  var res = source.take(5);
	   *  var res = source.take(0, Rx.Scheduler.timeout);
	   * @param {Number} count The number of elements to return.
	   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
	   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
	   */
	  observableProto.take = function (count, scheduler) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    if (count === 0) { return observableEmpty(scheduler); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining-- > 0) {
	          o.onNext(x);
	          remaining === 0 && o.onCompleted();
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Returns elements from an observable sequence as long as a specified condition is true.
	   *  The element's index is used in the logic of the predicate function.
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
	   */
	  observableProto.takeWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0, running = true;
	      return source.subscribe(function (x) {
	        if (running) {
	          try {
	            running = callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (running) {
	            o.onNext(x);
	          } else {
	            o.onCompleted();
	          }
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  var FilterObservable = (function (__super__) {
	    inherits(FilterObservable, __super__);
	
	    function FilterObservable(source, predicate, thisArg) {
	      this.source = source;
	      this.predicate = bindCallback(predicate, thisArg, 3);
	      __super__.call(this);
	    }
	
	    FilterObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new FilterObserver(observer, this.predicate, this));
	    };
	
	    FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
	      var self = this;
	      return new FilterObservable(this.source, function(x, i, o) { return self.predicate(x, i, o) && predicate.call(this, x, i, o); }, thisArg);
	    };
	
	    return FilterObservable;
	
	  }(ObservableBase));
	
	  function FilterObserver(observer, predicate, source) {
	    this.observer = observer;
	    this.predicate = predicate;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }
	
	  FilterObserver.prototype.onNext = function(x) {
	    if (this.isStopped) { return; }
	    var shouldYield = tryCatch(this.predicate).call(this, x, this.i++, this.source);
	    if (shouldYield === errorObj) {
	      return this.observer.onError(shouldYield.e);
	    }
	    shouldYield && this.observer.onNext(x);
	  };
	  FilterObserver.prototype.onError = function (e) {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
	  };
	  FilterObserver.prototype.onCompleted = function () {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
	  };
	  FilterObserver.prototype.dispose = function() { this.isStopped = true; };
	  FilterObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	    return false;
	  };
	
	  /**
	  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
	  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
	  */
	  observableProto.filter = observableProto.where = function (predicate, thisArg) {
	    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) :
	      new FilterObservable(this, predicate, thisArg);
	  };
	
	  function extremaBy(source, keySelector, comparer) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = false, lastKey = null, list = [];
	      return source.subscribe(function (x) {
	        var comparison, key;
	        try {
	          key = keySelector(x);
	        } catch (ex) {
	          o.onError(ex);
	          return;
	        }
	        comparison = 0;
	        if (!hasValue) {
	          hasValue = true;
	          lastKey = key;
	        } else {
	          try {
	            comparison = comparer(key, lastKey);
	          } catch (ex1) {
	            o.onError(ex1);
	            return;
	          }
	        }
	        if (comparison > 0) {
	          lastKey = key;
	          list = [];
	        }
	        if (comparison >= 0) { list.push(x); }
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(list);
	        o.onCompleted();
	      });
	    }, source);
	  }
	
	  function firstOnly(x) {
	    if (x.length === 0) { throw new EmptyError(); }
	    return x[0];
	  }
	
	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @deprecated Use #reduce instead
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.aggregate = function () {
	    var hasSeed = false, accumulator, seed, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            return o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          hasValue && o.onNext(accumulation);
	          !hasValue && hasSeed && o.onNext(seed);
	          !hasValue && !hasSeed && o.onError(new EmptyError());
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };
	
	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @param {Any} [seed] The initial accumulator value.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.reduce = function (accumulator) {
	    var hasSeed = false, seed, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[1];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            return o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          hasValue && o.onNext(accumulation);
	          !hasValue && hasSeed && o.onNext(seed);
	          !hasValue && !hasSeed && o.onError(new EmptyError());
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };
	
	  /**
	   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
	   */
	  observableProto.some = function (predicate, thisArg) {
	    var source = this;
	    return predicate ?
	      source.filter(predicate, thisArg).some() :
	      new AnonymousObservable(function (observer) {
	        return source.subscribe(function () {
	          observer.onNext(true);
	          observer.onCompleted();
	        }, function (e) { observer.onError(e); }, function () {
	          observer.onNext(false);
	          observer.onCompleted();
	        });
	      }, source);
	  };
	
	  /** @deprecated use #some instead */
	  observableProto.any = function () {
	    //deprecate('any', 'some');
	    return this.some.apply(this, arguments);
	  };
	
	  /**
	   * Determines whether an observable sequence is empty.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
	   */
	  observableProto.isEmpty = function () {
	    return this.any().map(not);
	  };
	
	  /**
	   * Determines whether all elements of an observable sequence satisfy a condition.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
	   */
	  observableProto.every = function (predicate, thisArg) {
	    return this.filter(function (v) { return !predicate(v); }, thisArg).some().map(not);
	  };
	
	  /** @deprecated use #every instead */
	  observableProto.all = function () {
	    //deprecate('all', 'every');
	    return this.every.apply(this, arguments);
	  };
	
	  /**
	   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
	   * @param searchElement The value to locate in the source sequence.
	   * @param {Number} [fromIndex] An equality comparer to compare elements.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
	   */
	  observableProto.includes = function (searchElement, fromIndex) {
	    var source = this;
	    function comparer(a, b) {
	      return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
	    }
	    return new AnonymousObservable(function (o) {
	      var i = 0, n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(false);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(
	        function (x) {
	          if (i++ >= n && comparer(x, searchElement)) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(false);
	          o.onCompleted();
	        });
	    }, this);
	  };
	
	  /**
	   * @deprecated use #includes instead.
	   */
	  observableProto.contains = function (searchElement, fromIndex) {
	    //deprecate('contains', 'includes');
	    observableProto.includes(searchElement, fromIndex);
	  };
	  /**
	   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
	   * @example
	   * res = source.count();
	   * res = source.count(function (x) { return x > 3; });
	   * @param {Function} [predicate]A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
	   */
	  observableProto.count = function (predicate, thisArg) {
	    return predicate ?
	      this.filter(predicate, thisArg).count() :
	      this.reduce(function (count) { return count + 1; }, 0);
	  };
	
	  /**
	   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   * @param {Any} searchElement Element to locate in the array.
	   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
	   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   */
	  observableProto.indexOf = function(searchElement, fromIndex) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var i = 0, n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(-1);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(
	        function (x) {
	          if (i >= n && x === searchElement) {
	            o.onNext(i);
	            o.onCompleted();
	          }
	          i++;
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(-1);
	          o.onCompleted();
	        });
	    }, source);
	  };
	
	  /**
	   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
	   */
	  observableProto.sum = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ?
	      this.map(keySelector, thisArg).sum() :
	      this.reduce(function (prev, curr) { return prev + curr; }, 0);
	  };
	
	  /**
	   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
	   * @example
	   * var res = source.minBy(function (x) { return x.value; });
	   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer] Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
	   */
	  observableProto.minBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, function (x, y) { return comparer(x, y) * -1; });
	  };
	
	  /**
	   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
	   * @example
	   * var res = source.min();
	   * var res = source.min(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
	   */
	  observableProto.min = function (comparer) {
	    return this.minBy(identity, comparer).map(function (x) { return firstOnly(x); });
	  };
	
	  /**
	   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
	   * @example
	   * var res = source.maxBy(function (x) { return x.value; });
	   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer]  Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
	   */
	  observableProto.maxBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, comparer);
	  };
	
	  /**
	   * Returns the maximum value in an observable sequence according to the specified comparer.
	   * @example
	   * var res = source.max();
	   * var res = source.max(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
	   */
	  observableProto.max = function (comparer) {
	    return this.maxBy(identity, comparer).map(function (x) { return firstOnly(x); });
	  };
	
	  /**
	   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
	   */
	  observableProto.average = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ?
	      this.map(keySelector, thisArg).average() :
	      this.reduce(function (prev, cur) {
	        return {
	          sum: prev.sum + cur,
	          count: prev.count + 1
	        };
	      }, {sum: 0, count: 0 }).map(function (s) {
	        if (s.count === 0) { throw new EmptyError(); }
	        return s.sum / s.count;
	      });
	  };
	
	  /**
	   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
	   *
	   * @example
	   * var res = res = source.sequenceEqual([1,2,3]);
	   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
	   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
	   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
	   * @param {Observable} second Second observable sequence or array to compare.
	   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
	   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
	   */
	  observableProto.sequenceEqual = function (second, comparer) {
	    var first = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var donel = false, doner = false, ql = [], qr = [];
	      var subscription1 = first.subscribe(function (x) {
	        var equal, v;
	        if (qr.length > 0) {
	          v = qr.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (doner) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          ql.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        donel = true;
	        if (ql.length === 0) {
	          if (qr.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (doner) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	
	      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
	      isPromise(second) && (second = observableFromPromise(second));
	      var subscription2 = second.subscribe(function (x) {
	        var equal;
	        if (ql.length > 0) {
	          var v = ql.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (exception) {
	            o.onError(exception);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (donel) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          qr.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        doner = true;
	        if (qr.length === 0) {
	          if (ql.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (donel) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	      return new CompositeDisposable(subscription1, subscription2);
	    }, first);
	  };
	
	  function elementAtOrDefault(source, index, hasDefault, defaultValue) {
	    if (index < 0) { throw new ArgumentOutOfRangeError(); }
	    return new AnonymousObservable(function (o) {
	      var i = index;
	      return source.subscribe(function (x) {
	        if (i-- === 0) {
	          o.onNext(x);
	          o.onCompleted();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        if (!hasDefault) {
	          o.onError(new ArgumentOutOfRangeError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the element at a specified index in a sequence.
	   * @example
	   * var res = source.elementAt(5);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
	   */
	  observableProto.elementAt =  function (index) {
	    return elementAtOrDefault(this, index, false);
	  };
	
	  /**
	   * Returns the element at a specified index in a sequence or a default value if the index is out of range.
	   * @example
	   * var res = source.elementAtOrDefault(5);
	   * var res = source.elementAtOrDefault(5, 0);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.
	   */
	  observableProto.elementAtOrDefault = function (index, defaultValue) {
	    return elementAtOrDefault(this, index, true, defaultValue);
	  };
	
	  function singleOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue, seenValue = false;
	      return source.subscribe(function (x) {
	        if (seenValue) {
	          o.onError(new Error('Sequence contains more than one element'));
	        } else {
	          value = x;
	          seenValue = true;
	        }
	      }, function (e) { o.onError(e); }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.single = function (predicate, thisArg) {
	    return predicate && isFunction(predicate) ?
	      this.where(predicate, thisArg).single() :
	      singleOrDefaultAsync(this, false);
	  };
	
	  /**
	   * Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
	   * @example
	   * var res = res = source.singleOrDefault();
	   * var res = res = source.singleOrDefault(function (x) { return x === 42; });
	   * res = source.singleOrDefault(function (x) { return x === 42; }, 0);
	   * res = source.singleOrDefault(null, 0);
	   * @memberOf Observable#
	   * @param {Function} predicate A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.singleOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate && isFunction(predicate) ?
	      this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) :
	      singleOrDefaultAsync(this, true, defaultValue);
	  };
	
	  function firstOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) {
	        o.onNext(x);
	        o.onCompleted();
	      }, function (e) { o.onError(e); }, function () {
	        if (!hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
	   * @example
	   * var res = res = source.first();
	   * var res = res = source.first(function (x) { return x > 3; });
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
	   */
	  observableProto.first = function (predicate, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).first() :
	      firstOrDefaultAsync(this, false);
	  };
	
	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.firstOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ?
	      this.where(predicate).firstOrDefault(null, defaultValue) :
	      firstOrDefaultAsync(this, true, defaultValue);
	  };
	
	  function lastOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue, seenValue = false;
	      return source.subscribe(function (x) {
	        value = x;
	        seenValue = true;
	      }, function (e) { o.onError(e); }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.last = function (predicate, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).last() :
	      lastOrDefaultAsync(this, false);
	  };
	
	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.lastOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).lastOrDefault(null, defaultValue) :
	      lastOrDefaultAsync(this, true, defaultValue);
	  };
	
	  function findValue (source, predicate, thisArg, yieldIndex) {
	    var callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0;
	      return source.subscribe(function (x) {
	        var shouldRun;
	        try {
	          shouldRun = callback(x, i, source);
	        } catch (e) {
	          o.onError(e);
	          return;
	        }
	        if (shouldRun) {
	          o.onNext(yieldIndex ? i : x);
	          o.onCompleted();
	        } else {
	          i++;
	        }
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(yieldIndex ? -1 : undefined);
	        o.onCompleted();
	      });
	    }, source);
	  }
	
	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
	   */
	  observableProto.find = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, false);
	  };
	
	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns
	   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
	  */
	  observableProto.findIndex = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, true);
	  };
	
	  /**
	   * Converts the observable sequence to a Set if it exists.
	   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
	   */
	  observableProto.toSet = function () {
	    if (typeof root.Set === 'undefined') { throw new TypeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var s = new root.Set();
	      return source.subscribe(
	        function (x) { s.add(x); },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(s);
	          o.onCompleted();
	        });
	    }, source);
	  };
	
	  /**
	  * Converts the observable sequence to a Map if it exists.
	  * @param {Function} keySelector A function which produces the key for the Map.
	  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
	  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
	  */
	  observableProto.toMap = function (keySelector, elementSelector) {
	    if (typeof root.Map === 'undefined') { throw new TypeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var m = new root.Map();
	      return source.subscribe(
	        function (x) {
	          var key;
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	
	          var element = x;
	          if (elementSelector) {
	            try {
	              element = elementSelector(x);
	            } catch (e) {
	              o.onError(e);
	              return;
	            }
	          }
	
	          m.set(key, element);
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(m);
	          o.onCompleted();
	        });
	    }, source);
	  };
	
	  var fnString = 'function',
	      throwString = 'throw',
	      isObject = Rx.internals.isObject;
	
	  function toThunk(obj, ctx) {
	    if (Array.isArray(obj)) {  return objectToThunk.call(ctx, obj); }
	    if (isGeneratorFunction(obj)) { return observableSpawn(obj.call(ctx)); }
	    if (isGenerator(obj)) {  return observableSpawn(obj); }
	    if (isObservable(obj)) { return observableToThunk(obj); }
	    if (isPromise(obj)) { return promiseToThunk(obj); }
	    if (typeof obj === fnString) { return obj; }
	    if (isObject(obj) || Array.isArray(obj)) { return objectToThunk.call(ctx, obj); }
	
	    return obj;
	  }
	
	  function objectToThunk(obj) {
	    var ctx = this;
	
	    return function (done) {
	      var keys = Object.keys(obj),
	          pending = keys.length,
	          results = new obj.constructor(),
	          finished;
	
	      if (!pending) {
	        timeoutScheduler.schedule(function () { done(null, results); });
	        return;
	      }
	
	      for (var i = 0, len = keys.length; i < len; i++) {
	        run(obj[keys[i]], keys[i]);
	      }
	
	      function run(fn, key) {
	        if (finished) { return; }
	        try {
	          fn = toThunk(fn, ctx);
	
	          if (typeof fn !== fnString) {
	            results[key] = fn;
	            return --pending || done(null, results);
	          }
	
	          fn.call(ctx, function(err, res) {
	            if (finished) { return; }
	
	            if (err) {
	              finished = true;
	              return done(err);
	            }
	
	            results[key] = res;
	            --pending || done(null, results);
	          });
	        } catch (e) {
	          finished = true;
	          done(e);
	        }
	      }
	    }
	  }
	
	  function observableToThunk(observable) {
	    return function (fn) {
	      var value, hasValue = false;
	      observable.subscribe(
	        function (v) {
	          value = v;
	          hasValue = true;
	        },
	        fn,
	        function () {
	          hasValue && fn(null, value);
	        });
	    }
	  }
	
	  function promiseToThunk(promise) {
	    return function(fn) {
	      promise.then(function(res) {
	        fn(null, res);
	      }, fn);
	    }
	  }
	
	  function isObservable(obj) {
	    return obj && typeof obj.subscribe === fnString;
	  }
	
	  function isGeneratorFunction(obj) {
	    return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';
	  }
	
	  function isGenerator(obj) {
	    return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;
	  }
	
	  /*
	   * Spawns a generator function which allows for Promises, Observable sequences, Arrays, Objects, Generators and functions.
	   * @param {Function} The spawning function.
	   * @returns {Function} a function which has a done continuation.
	   */
	  var observableSpawn = Rx.spawn = function (fn) {
	    var isGenFun = isGeneratorFunction(fn);
	
	    return function (done) {
	      var ctx = this,
	        gen = fn;
	
	      if (isGenFun) {
	        for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	        var len = args.length,
	          hasCallback = len && typeof args[len - 1] === fnString;
	
	        done = hasCallback ? args.pop() : handleError;
	        gen = fn.apply(this, args);
	      } else {
	        done = done || handleError;
	      }
	
	      next();
	
	      function exit(err, res) {
	        timeoutScheduler.schedule(done.bind(ctx, err, res));
	      }
	
	      function next(err, res) {
	        var ret;
	
	        // multiple args
	        if (arguments.length > 2) {
	          for(var res = [], i = 1, len = arguments.length; i < len; i++) { res.push(arguments[i]); }
	        }
	
	        if (err) {
	          try {
	            ret = gen[throwString](err);
	          } catch (e) {
	            return exit(e);
	          }
	        }
	
	        if (!err) {
	          try {
	            ret = gen.next(res);
	          } catch (e) {
	            return exit(e);
	          }
	        }
	
	        if (ret.done)  {
	          return exit(null, ret.value);
	        }
	
	        ret.value = toThunk(ret.value, ctx);
	
	        if (typeof ret.value === fnString) {
	          var called = false;
	          try {
	            ret.value.call(ctx, function() {
	              if (called) {
	                return;
	              }
	
	              called = true;
	              next.apply(ctx, arguments);
	            });
	          } catch (e) {
	            timeoutScheduler.schedule(function () {
	              if (called) {
	                return;
	              }
	
	              called = true;
	              next.call(ctx, e);
	            });
	          }
	          return;
	        }
	
	        // Not supported
	        next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));
	      }
	    }
	  };
	
	  function handleError(err) {
	    if (!err) { return; }
	    timeoutScheduler.schedule(function() {
	      throw err;
	    });
	  }
	
	  /**
	   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
	   *
	   * @example
	   * var res = Rx.Observable.start(function () { console.log('hello'); });
	   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
	   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
	   *
	   * @param {Function} func Function to run asynchronously.
	   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   *
	   * Remarks
	   * * The function is called immediately, not during the subscription of the resulting sequence.
	   * * Multiple subscriptions to the resulting sequence can observe the function's result.
	   */
	  Observable.start = function (func, context, scheduler) {
	    return observableToAsync(func, context, scheduler)();
	  };
	
	  /**
	   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
	   * @param {Function} function Function to convert to an asynchronous function.
	   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Function} Asynchronous function.
	   */
	  var observableToAsync = Observable.toAsync = function (func, context, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return function () {
	      var args = arguments,
	        subject = new AsyncSubject();
	
	      scheduler.schedule(function () {
	        var result;
	        try {
	          result = func.apply(context, args);
	        } catch (e) {
	          subject.onError(e);
	          return;
	        }
	        subject.onNext(result);
	        subject.onCompleted();
	      });
	      return subject.asObservable();
	    };
	  };
	
	  /**
	   * Converts a callback function to an observable sequence.
	   *
	   * @param {Function} function Function with a callback as the last parameter to convert to an Observable sequence.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
	   * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
	   */
	  Observable.fromCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length, args = new Array(len)
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	
	      return new AnonymousObservable(function (observer) {
	        function handler() {
	          var len = arguments.length, results = new Array(len);
	          for(var i = 0; i < len; i++) { results[i] = arguments[i]; }
	
	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }
	
	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }
	
	          observer.onCompleted();
	        }
	
	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };
	
	  /**
	   * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
	   * @param {Function} func The function to call
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
	   * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
	   */
	  Observable.fromNodeCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length, args = new Array(len);
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	
	      return new AnonymousObservable(function (observer) {
	        function handler(err) {
	          if (err) {
	            observer.onError(err);
	            return;
	          }
	
	          var len = arguments.length, results = [];
	          for(var i = 1; i < len; i++) { results[i - 1] = arguments[i]; }
	
	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }
	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }
	
	          observer.onCompleted();
	        }
	
	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };
	
	  function createListener (element, name, handler) {
	    if (element.addEventListener) {
	      element.addEventListener(name, handler, false);
	      return disposableCreate(function () {
	        element.removeEventListener(name, handler, false);
	      });
	    }
	    throw new Error('No listener found');
	  }
	
	  function createEventListener (el, eventName, handler) {
	    var disposables = new CompositeDisposable();
	
	    // Asume NodeList
	    if (Object.prototype.toString.call(el) === '[object NodeList]') {
	      for (var i = 0, len = el.length; i < len; i++) {
	        disposables.add(createEventListener(el.item(i), eventName, handler));
	      }
	    } else if (el) {
	      disposables.add(createListener(el, eventName, handler));
	    }
	
	    return disposables;
	  }
	
	  /**
	   * Configuration option to determine whether to use native events only
	   */
	  Rx.config.useNativeEvents = false;
	
	  /**
	   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
	   *
	   * @example
	   *   var source = Rx.Observable.fromEvent(element, 'mouseup');
	   *
	   * @param {Object} element The DOMElement or NodeList to attach a listener.
	   * @param {String} eventName The event name to attach the observable sequence.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
	   */
	  Observable.fromEvent = function (element, eventName, selector) {
	    // Node.js specific
	    if (element.addListener) {
	      return fromEventPattern(
	        function (h) { element.addListener(eventName, h); },
	        function (h) { element.removeListener(eventName, h); },
	        selector);
	    }
	
	    // Use only if non-native events are allowed
	    if (!Rx.config.useNativeEvents) {
	      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
	      if (typeof element.on === 'function' && typeof element.off === 'function') {
	        return fromEventPattern(
	          function (h) { element.on(eventName, h); },
	          function (h) { element.off(eventName, h); },
	          selector);
	      }
	    }
	    return new AnonymousObservable(function (observer) {
	      return createEventListener(
	        element,
	        eventName,
	        function handler (e) {
	          var results = e;
	
	          if (selector) {
	            try {
	              results = selector(arguments);
	            } catch (err) {
	              return observer.onError(err);
	            }
	          }
	
	          observer.onNext(results);
	        });
	    }).publish().refCount();
	  };
	
	  /**
	   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
	   * @param {Function} addHandler The function to add a handler to the emitter.
	   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence which wraps an event from an event emitter
	   */
	  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
	    return new AnonymousObservable(function (observer) {
	      function innerHandler (e) {
	        var result = e;
	        if (selector) {
	          try {
	            result = selector(arguments);
	          } catch (err) {
	            return observer.onError(err);
	          }
	        }
	        observer.onNext(result);
	      }
	
	      var returnValue = addHandler(innerHandler);
	      return disposableCreate(function () {
	        if (removeHandler) {
	          removeHandler(innerHandler, returnValue);
	        }
	      });
	    }).publish().refCount();
	  };
	
	  /**
	   * Invokes the asynchronous function, surfacing the result through an observable sequence.
	   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   */
	  Observable.startAsync = function (functionAsync) {
	    var promise;
	    try {
	      promise = functionAsync();
	    } catch (e) {
	      return observableThrow(e);
	    }
	    return observableFromPromise(promise);
	  }
	
	  var PausableObservable = (function (__super__) {
	
	    inherits(PausableObservable, __super__);
	
	    function subscribe(observer) {
	      var conn = this.source.publish(),
	        subscription = conn.subscribe(observer),
	        connection = disposableEmpty;
	
	      var pausable = this.pauser.distinctUntilChanged().subscribe(function (b) {
	        if (b) {
	          connection = conn.connect();
	        } else {
	          connection.dispose();
	          connection = disposableEmpty;
	        }
	      });
	
	      return new CompositeDisposable(subscription, connection, pausable);
	    }
	
	    function PausableObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();
	
	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }
	
	      __super__.call(this, subscribe, source);
	    }
	
	    PausableObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };
	
	    PausableObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };
	
	    return PausableObservable;
	
	  }(Observable));
	
	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausable(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausable = function (pauser) {
	    return new PausableObservable(this, pauser);
	  };
	
	  function combineLatestSource(source, subject, resultSelector) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = [false, false],
	        hasValueAll = false,
	        isDone = false,
	        values = new Array(2),
	        err;
	
	      function next(x, i) {
	        values[i] = x
	        var res;
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          if (err) {
	            o.onError(err);
	            return;
	          }
	
	          try {
	            res = resultSelector.apply(null, values);
	          } catch (ex) {
	            o.onError(ex);
	            return;
	          }
	          o.onNext(res);
	        }
	        if (isDone && values[1]) {
	          o.onCompleted();
	        }
	      }
	
	      return new CompositeDisposable(
	        source.subscribe(
	          function (x) {
	            next(x, 0);
	          },
	          function (e) {
	            if (values[1]) {
	              o.onError(e);
	            } else {
	              err = e;
	            }
	          },
	          function () {
	            isDone = true;
	            values[1] && o.onCompleted();
	          }),
	        subject.subscribe(
	          function (x) {
	            next(x, 1);
	          },
	          function (e) { o.onError(e); },
	          function () {
	            isDone = true;
	            next(true, 1);
	          })
	        );
	    }, source);
	  }
	
	  var PausableBufferedObservable = (function (__super__) {
	
	    inherits(PausableBufferedObservable, __super__);
	
	    function subscribe(o) {
	      var q = [], previousShouldFire;
	
	      var subscription =
	        combineLatestSource(
	          this.source,
	          this.pauser.distinctUntilChanged().startWith(false),
	          function (data, shouldFire) {
	            return { data: data, shouldFire: shouldFire };
	          })
	          .subscribe(
	            function (results) {
	              if (previousShouldFire !== undefined && results.shouldFire != previousShouldFire) {
	                previousShouldFire = results.shouldFire;
	                // change in shouldFire
	                if (results.shouldFire) {
	                  while (q.length > 0) {
	                    o.onNext(q.shift());
	                  }
	                }
	              } else {
	                previousShouldFire = results.shouldFire;
	                // new data
	                if (results.shouldFire) {
	                  o.onNext(results.data);
	                } else {
	                  q.push(results.data);
	                }
	              }
	            },
	            function (err) {
	              // Empty buffer before sending error
	              while (q.length > 0) {
	                o.onNext(q.shift());
	              }
	              o.onError(err);
	            },
	            function () {
	              // Empty buffer before sending completion
	              while (q.length > 0) {
	                o.onNext(q.shift());
	              }
	              o.onCompleted();
	            }
	          );
	      return subscription;
	    }
	
	    function PausableBufferedObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();
	
	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }
	
	      __super__.call(this, subscribe, source);
	    }
	
	    PausableBufferedObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };
	
	    PausableBufferedObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };
	
	    return PausableBufferedObservable;
	
	  }(Observable));
	
	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
	   * and yields the values that were buffered while paused.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausableBuffered = function (subject) {
	    return new PausableBufferedObservable(this, subject);
	  };
	
	  var ControlledObservable = (function (__super__) {
	
	    inherits(ControlledObservable, __super__);
	
	    function subscribe (observer) {
	      return this.source.subscribe(observer);
	    }
	
	    function ControlledObservable (source, enableQueue) {
	      __super__.call(this, subscribe, source);
	      this.subject = new ControlledSubject(enableQueue);
	      this.source = source.multicast(this.subject).refCount();
	    }
	
	    ControlledObservable.prototype.request = function (numberOfItems) {
	      if (numberOfItems == null) { numberOfItems = -1; }
	      return this.subject.request(numberOfItems);
	    };
	
	    return ControlledObservable;
	
	  }(Observable));
	
	  var ControlledSubject = (function (__super__) {
	
	    function subscribe (observer) {
	      return this.subject.subscribe(observer);
	    }
	
	    inherits(ControlledSubject, __super__);
	
	    function ControlledSubject(enableQueue) {
	      enableQueue == null && (enableQueue = true);
	
	      __super__.call(this, subscribe);
	      this.subject = new Subject();
	      this.enableQueue = enableQueue;
	      this.queue = enableQueue ? [] : null;
	      this.requestedCount = 0;
	      this.requestedDisposable = disposableEmpty;
	      this.error = null;
	      this.hasFailed = false;
	      this.hasCompleted = false;
	    }
	
	    addProperties(ControlledSubject.prototype, Observer, {
	      onCompleted: function () {
	        this.hasCompleted = true;
	        if (!this.enableQueue || this.queue.length === 0)
	          this.subject.onCompleted();
	        else
	          this.queue.push(Rx.Notification.createOnCompleted());
	      },
	      onError: function (error) {
	        this.hasFailed = true;
	        this.error = error;
	        if (!this.enableQueue || this.queue.length === 0)
	          this.subject.onError(error);
	        else
	          this.queue.push(Rx.Notification.createOnError(error));
	      },
	      onNext: function (value) {
	        var hasRequested = false;
	
	        if (this.requestedCount === 0) {
	          this.enableQueue && this.queue.push(Rx.Notification.createOnNext(value));
	        } else {
	          (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
	          hasRequested = true;
	        }
	        hasRequested && this.subject.onNext(value);
	      },
	      _processRequest: function (numberOfItems) {
	        if (this.enableQueue) {
	          while ((this.queue.length >= numberOfItems && numberOfItems > 0) ||
	          (this.queue.length > 0 && this.queue[0].kind !== 'N')) {
	            var first = this.queue.shift();
	            first.accept(this.subject);
	            if (first.kind === 'N') numberOfItems--;
	            else { this.disposeCurrentRequest(); this.queue = []; }
	          }
	
	          return { numberOfItems : numberOfItems, returnValue: this.queue.length !== 0};
	        }
	
	        //TODO I don't think this is ever necessary, since termination of a sequence without a queue occurs in the onCompletion or onError function
	        //if (this.hasFailed) {
	        //  this.subject.onError(this.error);
	        //} else if (this.hasCompleted) {
	        //  this.subject.onCompleted();
	        //}
	
	        return { numberOfItems: numberOfItems, returnValue: false };
	      },
	      request: function (number) {
	        this.disposeCurrentRequest();
	        var self = this, r = this._processRequest(number);
	
	        var number = r.numberOfItems;
	        if (!r.returnValue) {
	          this.requestedCount = number;
	          this.requestedDisposable = disposableCreate(function () {
	            self.requestedCount = 0;
	          });
	
	          return this.requestedDisposable;
	        } else {
	          return disposableEmpty;
	        }
	      },
	      disposeCurrentRequest: function () {
	        this.requestedDisposable.dispose();
	        this.requestedDisposable = disposableEmpty;
	      }
	    });
	
	    return ControlledSubject;
	  }(Observable));
	
	  /**
	   * Attaches a controller to the observable sequence with the ability to queue.
	   * @example
	   * var source = Rx.Observable.interval(100).controlled();
	   * source.request(3); // Reads 3 values
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.controlled = function (enableQueue) {
	    if (enableQueue == null) {  enableQueue = true; }
	    return new ControlledObservable(this, enableQueue);
	  };
	
	  var StopAndWaitObservable = (function (__super__) {
	
	    function subscribe (observer) {
	      this.subscription = this.source.subscribe(new StopAndWaitObserver(observer, this, this.subscription));
	
	      var self = this;
	      timeoutScheduler.schedule(function () { self.source.request(1); });
	
	      return this.subscription;
	    }
	
	    inherits(StopAndWaitObservable, __super__);
	
	    function StopAndWaitObservable (source) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	    }
	
	    var StopAndWaitObserver = (function (__sub__) {
	
	      inherits(StopAndWaitObserver, __sub__);
	
	      function StopAndWaitObserver (observer, observable, cancel) {
	        __sub__.call(this);
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	      }
	
	      var stopAndWaitObserverProto = StopAndWaitObserver.prototype;
	
	      stopAndWaitObserverProto.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };
	
	      stopAndWaitObserverProto.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      }
	
	      stopAndWaitObserverProto.next = function (value) {
	        this.observer.onNext(value);
	
	        var self = this;
	        timeoutScheduler.schedule(function () {
	          self.observable.source.request(1);
	        });
	      };
	
	      stopAndWaitObserverProto.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };
	
	      return StopAndWaitObserver;
	    }(AbstractObserver));
	
	    return StopAndWaitObservable;
	  }(Observable));
	
	
	  /**
	   * Attaches a stop and wait observable to the current observable.
	   * @returns {Observable} A stop and wait observable.
	   */
	  ControlledObservable.prototype.stopAndWait = function () {
	    return new StopAndWaitObservable(this);
	  };
	
	  var WindowedObservable = (function (__super__) {
	
	    function subscribe (observer) {
	      this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));
	
	      var self = this;
	      timeoutScheduler.schedule(function () {
	        self.source.request(self.windowSize);
	      });
	
	      return this.subscription;
	    }
	
	    inherits(WindowedObservable, __super__);
	
	    function WindowedObservable(source, windowSize) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	      this.windowSize = windowSize;
	    }
	
	    var WindowedObserver = (function (__sub__) {
	
	      inherits(WindowedObserver, __sub__);
	
	      function WindowedObserver(observer, observable, cancel) {
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	        this.received = 0;
	      }
	
	      var windowedObserverPrototype = WindowedObserver.prototype;
	
	      windowedObserverPrototype.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };
	
	      windowedObserverPrototype.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      };
	
	      windowedObserverPrototype.next = function (value) {
	        this.observer.onNext(value);
	
	        this.received = ++this.received % this.observable.windowSize;
	        if (this.received === 0) {
	          var self = this;
	          timeoutScheduler.schedule(function () {
	            self.observable.source.request(self.observable.windowSize);
	          });
	        }
	      };
	
	      windowedObserverPrototype.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };
	
	      return WindowedObserver;
	    }(AbstractObserver));
	
	    return WindowedObservable;
	  }(Observable));
	
	  /**
	   * Creates a sliding windowed observable based upon the window size.
	   * @param {Number} windowSize The number of items in the window
	   * @returns {Observable} A windowed observable based upon the window size.
	   */
	  ControlledObservable.prototype.windowed = function (windowSize) {
	    return new WindowedObservable(this, windowSize);
	  };
	
	  /**
	   * Pipes the existing Observable sequence into a Node.js Stream.
	   * @param {Stream} dest The destination Node.js stream.
	   * @returns {Stream} The destination stream.
	   */
	  observableProto.pipe = function (dest) {
	    var source = this.pausableBuffered();
	
	    function onDrain() {
	      source.resume();
	    }
	
	    dest.addListener('drain', onDrain);
	
	    source.subscribe(
	      function (x) {
	        !dest.write(String(x)) && source.pause();
	      },
	      function (err) {
	        dest.emit('error', err);
	      },
	      function () {
	        // Hack check because STDIO is not closable
	        !dest._isStdio && dest.end();
	        dest.removeListener('drain', onDrain);
	      });
	
	    source.resume();
	
	    return dest;
	  };
	
	  /**
	   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
	   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
	   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
	   *
	   * @example
	   * 1 - res = source.multicast(observable);
	   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
	   *
	   * @param {Function|Subject} subjectOrSubjectSelector
	   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
	   * Or:
	   * Subject to push source elements into.
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
	    var source = this;
	    return typeof subjectOrSubjectSelector === 'function' ?
	      new AnonymousObservable(function (observer) {
	        var connectable = source.multicast(subjectOrSubjectSelector());
	        return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
	      }, source) :
	      new ConnectableObservable(source, subjectOrSubjectSelector);
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of Multicast using a regular Subject.
	   *
	   * @example
	   * var resres = source.publish();
	   * var res = source.publish(function (x) { return x; });
	   *
	   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publish = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new Subject(); }, selector) :
	      this.multicast(new Subject());
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.share = function () {
	    return this.publish().refCount();
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
	   * This operator is a specialization of Multicast using a AsyncSubject.
	   *
	   * @example
	   * var res = source.publishLast();
	   * var res = source.publishLast(function (x) { return x; });
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishLast = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new AsyncSubject(); }, selector) :
	      this.multicast(new AsyncSubject());
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
	   * This operator is a specialization of Multicast using a BehaviorSubject.
	   *
	   * @example
	   * var res = source.publishValue(42);
	   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
	    return arguments.length === 2 ?
	      this.multicast(function () {
	        return new BehaviorSubject(initialValue);
	      }, initialValueOrSelector) :
	      this.multicast(new BehaviorSubject(initialValueOrSelector));
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
	   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareValue = function (initialValue) {
	    return this.publishValue(initialValue).refCount();
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of Multicast using a ReplaySubject.
	   *
	   * @example
	   * var res = source.replay(null, 3);
	   * var res = source.replay(null, 3, 500);
	   * var res = source.replay(null, 3, 500, scheduler);
	   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param windowSize [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new ReplaySubject(bufferSize, windowSize, scheduler); }, selector) :
	      this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   *
	   * @example
	   * var res = source.shareReplay(3);
	   * var res = source.shareReplay(3, 500);
	   * var res = source.shareReplay(3, 500, scheduler);
	   *
	
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param window [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
	    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
	  };
	
	  var InnerSubscription = function (subject, observer) {
	    this.subject = subject;
	    this.observer = observer;
	  };
	
	  InnerSubscription.prototype.dispose = function () {
	    if (!this.subject.isDisposed && this.observer !== null) {
	      var idx = this.subject.observers.indexOf(this.observer);
	      this.subject.observers.splice(idx, 1);
	      this.observer = null;
	    }
	  };
	
	  /**
	   *  Represents a value that changes over time.
	   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
	   */
	  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        observer.onNext(this.value);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	      } else {
	        observer.onCompleted();
	      }
	      return disposableEmpty;
	    }
	
	    inherits(BehaviorSubject, __super__);
	
	    /**
	     *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.
	     *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.
	     */
	    function BehaviorSubject(value) {
	      __super__.call(this, subscribe);
	      this.value = value,
	      this.observers = [],
	      this.isDisposed = false,
	      this.isStopped = false,
	      this.hasError = false;
	    }
	
	    addProperties(BehaviorSubject.prototype, Observer, {
	      /**
	       * Gets the current value or throws an exception.
	       * Value is frozen after onCompleted is called.
	       * After onError is called always throws the specified exception.
	       * An exception is always thrown after dispose is called.
	       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
	       */
	      getValue: function () {
	          checkDisposed(this);
	          if (this.hasError) {
	              throw this.error;
	          }
	          return this.value;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onCompleted();
	        }
	
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.hasError = true;
	        this.error = error;
	
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onError(error);
	        }
	
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onNext(value);
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.value = null;
	        this.exception = null;
	      }
	    });
	
	    return BehaviorSubject;
	  }(Observable));
	
	  /**
	   * Represents an object that is both an observable sequence as well as an observer.
	   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
	   */
	  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {
	
	    var maxSafeInteger = Math.pow(2, 53) - 1;
	
	    function createRemovableDisposable(subject, observer) {
	      return disposableCreate(function () {
	        observer.dispose();
	        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
	      });
	    }
	
	    function subscribe(observer) {
	      var so = new ScheduledObserver(this.scheduler, observer),
	        subscription = createRemovableDisposable(this, so);
	      checkDisposed(this);
	      this._trim(this.scheduler.now());
	      this.observers.push(so);
	
	      for (var i = 0, len = this.q.length; i < len; i++) {
	        so.onNext(this.q[i].value);
	      }
	
	      if (this.hasError) {
	        so.onError(this.error);
	      } else if (this.isStopped) {
	        so.onCompleted();
	      }
	
	      so.ensureActive();
	      return subscription;
	    }
	
	    inherits(ReplaySubject, __super__);
	
	    /**
	     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
	     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
	     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
	     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
	     */
	    function ReplaySubject(bufferSize, windowSize, scheduler) {
	      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
	      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
	      this.scheduler = scheduler || currentThreadScheduler;
	      this.q = [];
	      this.observers = [];
	      this.isStopped = false;
	      this.isDisposed = false;
	      this.hasError = false;
	      this.error = null;
	      __super__.call(this, subscribe);
	    }
	
	    addProperties(ReplaySubject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () {
	        return this.observers.length > 0;
	      },
	      _trim: function (now) {
	        while (this.q.length > this.bufferSize) {
	          this.q.shift();
	        }
	        while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
	          this.q.shift();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        var now = this.scheduler.now();
	        this.q.push({ interval: now, value: value });
	        this._trim(now);
	
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onNext(value);
	          observer.ensureActive();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.error = error;
	        this.hasError = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onError(error);
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onCompleted();
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });
	
	    return ReplaySubject;
	  }(Observable));
	
	  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
	    inherits(ConnectableObservable, __super__);
	
	    function ConnectableObservable(source, subject) {
	      var hasSubscription = false,
	        subscription,
	        sourceObservable = source.asObservable();
	
	      this.connect = function () {
	        if (!hasSubscription) {
	          hasSubscription = true;
	          subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function () {
	            hasSubscription = false;
	          }));
	        }
	        return subscription;
	      };
	
	      __super__.call(this, function (o) { return subject.subscribe(o); });
	    }
	
	    ConnectableObservable.prototype.refCount = function () {
	      var connectableSubscription, count = 0, source = this;
	      return new AnonymousObservable(function (observer) {
	          var shouldConnect = ++count === 1,
	            subscription = source.subscribe(observer);
	          shouldConnect && (connectableSubscription = source.connect());
	          return function () {
	            subscription.dispose();
	            --count === 0 && connectableSubscription.dispose();
	          };
	      });
	    };
	
	    return ConnectableObservable;
	  }(Observable));
	
	  var Dictionary = (function () {
	
	    var primes = [1, 3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554393, 67108859, 134217689, 268435399, 536870909, 1073741789, 2147483647],
	      noSuchkey = "no such key",
	      duplicatekey = "duplicate key";
	
	    function isPrime(candidate) {
	      if ((candidate & 1) === 0) { return candidate === 2; }
	      var num1 = Math.sqrt(candidate),
	        num2 = 3;
	      while (num2 <= num1) {
	        if (candidate % num2 === 0) { return false; }
	        num2 += 2;
	      }
	      return true;
	    }
	
	    function getPrime(min) {
	      var index, num, candidate;
	      for (index = 0; index < primes.length; ++index) {
	        num = primes[index];
	        if (num >= min) { return num; }
	      }
	      candidate = min | 1;
	      while (candidate < primes[primes.length - 1]) {
	        if (isPrime(candidate)) { return candidate; }
	        candidate += 2;
	      }
	      return min;
	    }
	
	    function stringHashFn(str) {
	      var hash = 757602046;
	      if (!str.length) { return hash; }
	      for (var i = 0, len = str.length; i < len; i++) {
	        var character = str.charCodeAt(i);
	        hash = ((hash << 5) - hash) + character;
	        hash = hash & hash;
	      }
	      return hash;
	    }
	
	    function numberHashFn(key) {
	      var c2 = 0x27d4eb2d;
	      key = (key ^ 61) ^ (key >>> 16);
	      key = key + (key << 3);
	      key = key ^ (key >>> 4);
	      key = key * c2;
	      key = key ^ (key >>> 15);
	      return key;
	    }
	
	    var getHashCode = (function () {
	      var uniqueIdCounter = 0;
	
	      return function (obj) {
	        if (obj == null) { throw new Error(noSuchkey); }
	
	        // Check for built-ins before tacking on our own for any object
	        if (typeof obj === 'string') { return stringHashFn(obj); }
	        if (typeof obj === 'number') { return numberHashFn(obj); }
	        if (typeof obj === 'boolean') { return obj === true ? 1 : 0; }
	        if (obj instanceof Date) { return numberHashFn(obj.valueOf()); }
	        if (obj instanceof RegExp) { return stringHashFn(obj.toString()); }
	        if (typeof obj.valueOf === 'function') {
	          // Hack check for valueOf
	          var valueOf = obj.valueOf();
	          if (typeof valueOf === 'number') { return numberHashFn(valueOf); }
	          if (typeof valueOf === 'string') { return stringHashFn(valueOf); }
	        }
	        if (obj.hashCode) { return obj.hashCode(); }
	
	        var id = 17 * uniqueIdCounter++;
	        obj.hashCode = function () { return id; };
	        return id;
	      };
	    }());
	
	    function newEntry() {
	      return { key: null, value: null, next: 0, hashCode: 0 };
	    }
	
	    function Dictionary(capacity, comparer) {
	      if (capacity < 0) { throw new ArgumentOutOfRangeError(); }
	      if (capacity > 0) { this._initialize(capacity); }
	
	      this.comparer = comparer || defaultComparer;
	      this.freeCount = 0;
	      this.size = 0;
	      this.freeList = -1;
	    }
	
	    var dictionaryProto = Dictionary.prototype;
	
	    dictionaryProto._initialize = function (capacity) {
	      var prime = getPrime(capacity), i;
	      this.buckets = new Array(prime);
	      this.entries = new Array(prime);
	      for (i = 0; i < prime; i++) {
	        this.buckets[i] = -1;
	        this.entries[i] = newEntry();
	      }
	      this.freeList = -1;
	    };
	
	    dictionaryProto.add = function (key, value) {
	      this._insert(key, value, true);
	    };
	
	    dictionaryProto._insert = function (key, value, add) {
	      if (!this.buckets) { this._initialize(0); }
	      var index3,
	        num = getHashCode(key) & 2147483647,
	        index1 = num % this.buckets.length;
	      for (var index2 = this.buckets[index1]; index2 >= 0; index2 = this.entries[index2].next) {
	        if (this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key, key)) {
	          if (add) { throw new Error(duplicatekey); }
	          this.entries[index2].value = value;
	          return;
	        }
	      }
	      if (this.freeCount > 0) {
	        index3 = this.freeList;
	        this.freeList = this.entries[index3].next;
	        --this.freeCount;
	      } else {
	        if (this.size === this.entries.length) {
	          this._resize();
	          index1 = num % this.buckets.length;
	        }
	        index3 = this.size;
	        ++this.size;
	      }
	      this.entries[index3].hashCode = num;
	      this.entries[index3].next = this.buckets[index1];
	      this.entries[index3].key = key;
	      this.entries[index3].value = value;
	      this.buckets[index1] = index3;
	    };
	
	    dictionaryProto._resize = function () {
	      var prime = getPrime(this.size * 2),
	        numArray = new Array(prime);
	      for (index = 0; index < numArray.length; ++index) {  numArray[index] = -1; }
	      var entryArray = new Array(prime);
	      for (index = 0; index < this.size; ++index) { entryArray[index] = this.entries[index]; }
	      for (var index = this.size; index < prime; ++index) { entryArray[index] = newEntry(); }
	      for (var index1 = 0; index1 < this.size; ++index1) {
	        var index2 = entryArray[index1].hashCode % prime;
	        entryArray[index1].next = numArray[index2];
	        numArray[index2] = index1;
	      }
	      this.buckets = numArray;
	      this.entries = entryArray;
	    };
	
	    dictionaryProto.remove = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647,
	          index1 = num % this.buckets.length,
	          index2 = -1;
	        for (var index3 = this.buckets[index1]; index3 >= 0; index3 = this.entries[index3].next) {
	          if (this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key, key)) {
	            if (index2 < 0) {
	              this.buckets[index1] = this.entries[index3].next;
	            } else {
	              this.entries[index2].next = this.entries[index3].next;
	            }
	            this.entries[index3].hashCode = -1;
	            this.entries[index3].next = this.freeList;
	            this.entries[index3].key = null;
	            this.entries[index3].value = null;
	            this.freeList = index3;
	            ++this.freeCount;
	            return true;
	          } else {
	            index2 = index3;
	          }
	        }
	      }
	      return false;
	    };
	
	    dictionaryProto.clear = function () {
	      var index, len;
	      if (this.size <= 0) { return; }
	      for (index = 0, len = this.buckets.length; index < len; ++index) {
	        this.buckets[index] = -1;
	      }
	      for (index = 0; index < this.size; ++index) {
	        this.entries[index] = newEntry();
	      }
	      this.freeList = -1;
	      this.size = 0;
	    };
	
	    dictionaryProto._findEntry = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647;
	        for (var index = this.buckets[num % this.buckets.length]; index >= 0; index = this.entries[index].next) {
	          if (this.entries[index].hashCode === num && this.comparer(this.entries[index].key, key)) {
	            return index;
	          }
	        }
	      }
	      return -1;
	    };
	
	    dictionaryProto.count = function () {
	      return this.size - this.freeCount;
	    };
	
	    dictionaryProto.tryGetValue = function (key) {
	      var entry = this._findEntry(key);
	      return entry >= 0 ?
	        this.entries[entry].value :
	        undefined;
	    };
	
	    dictionaryProto.getValues = function () {
	      var index = 0, results = [];
	      if (this.entries) {
	        for (var index1 = 0; index1 < this.size; index1++) {
	          if (this.entries[index1].hashCode >= 0) {
	            results[index++] = this.entries[index1].value;
	          }
	        }
	      }
	      return results;
	    };
	
	    dictionaryProto.get = function (key) {
	      var entry = this._findEntry(key);
	      if (entry >= 0) { return this.entries[entry].value; }
	      throw new Error(noSuchkey);
	    };
	
	    dictionaryProto.set = function (key, value) {
	      this._insert(key, value, false);
	    };
	
	    dictionaryProto.containskey = function (key) {
	      return this._findEntry(key) >= 0;
	    };
	
	    return Dictionary;
	  }());
	
	  /**
	   *  Correlates the elements of two sequences based on overlapping durations.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.join = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var leftDone = false, rightDone = false;
	      var leftId = 0, rightId = 0;
	      var leftMap = new Dictionary(), rightMap = new Dictionary();
	
	      group.add(left.subscribe(
	        function (value) {
	          var id = leftId++;
	          var md = new SingleAssignmentDisposable();
	
	          leftMap.add(id, value);
	          group.add(md);
	
	          var expire = function () {
	            leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = leftDurationSelector(value);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	
	          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
	
	          rightMap.getValues().forEach(function (v) {
	            var result;
	            try {
	              result = resultSelector(value, v);
	            } catch (exn) {
	              observer.onError(exn);
	              return;
	            }
	
	            observer.onNext(result);
	          });
	        },
	        observer.onError.bind(observer),
	        function () {
	          leftDone = true;
	          (rightDone || leftMap.count() === 0) && observer.onCompleted();
	        })
	      );
	
	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++;
	          var md = new SingleAssignmentDisposable();
	
	          rightMap.add(id, value);
	          group.add(md);
	
	          var expire = function () {
	            rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = rightDurationSelector(value);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	
	          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
	
	          leftMap.getValues().forEach(function (v) {
	            var result;
	            try {
	              result = resultSelector(v, value);
	            } catch (exn) {
	              observer.onError(exn);
	              return;
	            }
	
	            observer.onNext(result);
	          });
	        },
	        observer.onError.bind(observer),
	        function () {
	          rightDone = true;
	          (leftDone || rightMap.count() === 0) && observer.onCompleted();
	        })
	      );
	      return group;
	    }, left);
	  };
	
	  /**
	   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.groupJoin = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var r = new RefCountDisposable(group);
	      var leftMap = new Dictionary(), rightMap = new Dictionary();
	      var leftId = 0, rightId = 0;
	
	      function handleError(e) { return function (v) { v.onError(e); }; };
	
	      group.add(left.subscribe(
	        function (value) {
	          var s = new Subject();
	          var id = leftId++;
	          leftMap.add(id, s);
	
	          var result;
	          try {
	            result = resultSelector(value, addRef(s, r));
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	          observer.onNext(result);
	
	          rightMap.getValues().forEach(function (v) { s.onNext(v); });
	
	          var md = new SingleAssignmentDisposable();
	          group.add(md);
	
	          var expire = function () {
	            leftMap.remove(id) && s.onCompleted();
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = leftDurationSelector(value);
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.getValues().forEach(handleError(e));
	              observer.onError(e);
	            },
	            expire)
	          );
	        },
	        function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        },
	        observer.onCompleted.bind(observer))
	      );
	
	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++;
	          rightMap.add(id, value);
	
	          var md = new SingleAssignmentDisposable();
	          group.add(md);
	
	          var expire = function () {
	            rightMap.remove(id);
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = rightDurationSelector(value);
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.getValues().forEach(handleError(e));
	              observer.onError(e);
	            },
	            expire)
	          );
	
	          leftMap.getValues().forEach(function (v) { v.onNext(value); });
	        },
	        function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        })
	      );
	
	      return r;
	    }, left);
	  };
	
	    /**
	     *  Projects each element of an observable sequence into zero or more buffers.
	     *
	     *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	     *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	     *  @returns {Observable} An observable sequence of windows.
	     */
	    observableProto.buffer = function (bufferOpeningsOrClosingSelector, bufferClosingSelector) {
	        return this.window.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
	    };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows.
	   *
	   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.window = function (windowOpeningsOrClosingSelector, windowClosingSelector) {
	    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	      return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
	    }
	    return typeof windowOpeningsOrClosingSelector === 'function' ?
	      observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) :
	      observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
	  };
	
	  function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
	    return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function (_, win) {
	      return win;
	    });
	  }
	
	  function observableWindowWithBoundaries(windowBoundaries) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var win = new Subject(),
	        d = new CompositeDisposable(),
	        r = new RefCountDisposable(d);
	
	      observer.onNext(addRef(win, r));
	
	      d.add(source.subscribe(function (x) {
	        win.onNext(x);
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));
	
	      isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));
	
	      d.add(windowBoundaries.subscribe(function (w) {
	        win.onCompleted();
	        win = new Subject();
	        observer.onNext(addRef(win, r));
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));
	
	      return r;
	    }, source);
	  }
	
	  function observableWindowWithClosingSelector(windowClosingSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        r = new RefCountDisposable(d),
	        win = new Subject();
	      observer.onNext(addRef(win, r));
	      d.add(source.subscribe(function (x) {
	          win.onNext(x);
	      }, function (err) {
	          win.onError(err);
	          observer.onError(err);
	      }, function () {
	          win.onCompleted();
	          observer.onCompleted();
	      }));
	
	      function createWindowClose () {
	        var windowClose;
	        try {
	          windowClose = windowClosingSelector();
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	
	        isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));
	
	        var m1 = new SingleAssignmentDisposable();
	        m.setDisposable(m1);
	        m1.setDisposable(windowClose.take(1).subscribe(noop, function (err) {
	          win.onError(err);
	          observer.onError(err);
	        }, function () {
	          win.onCompleted();
	          win = new Subject();
	          observer.onNext(addRef(win, r));
	          createWindowClose();
	        }));
	      }
	
	      createWindowClose();
	      return r;
	    }, source);
	  }
	
	  /**
	   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
	   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
	   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
	   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
	   */
	  observableProto.pairwise = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var previous, hasPrevious = false;
	      return source.subscribe(
	        function (x) {
	          if (hasPrevious) {
	            observer.onNext([previous, x]);
	          } else {
	            hasPrevious = true;
	          }
	          previous = x;
	        },
	        observer.onError.bind(observer),
	        observer.onCompleted.bind(observer));
	    }, source);
	  };
	
	  /**
	   * Returns two observables which partition the observations of the source by the given function.
	   * The first will trigger observations for those values for which the predicate returns true.
	   * The second will trigger observations for those values where the predicate returns false.
	   * The predicate is executed once for each subscribed observer.
	   * Both also propagate all error observations arising from the source and each completes
	   * when the source completes.
	   * @param {Function} predicate
	   *    The function to determine which output Observable will trigger a particular observation.
	   * @returns {Array}
	   *    An array of observables. The first triggers when the predicate returns true,
	   *    and the second triggers when the predicate returns false.
	  */
	  observableProto.partition = function(predicate, thisArg) {
	    return [
	      this.filter(predicate, thisArg),
	      this.filter(function (x, i, o) { return !predicate.call(thisArg, x, i, o); })
	    ];
	  };
	
	  function enumerableWhile(condition, source) {
	    return new Enumerable(function () {
	      return new Enumerator(function () {
	        return condition() ?
	          { done: false, value: source } :
	          { done: true, value: undefined };
	      });
	    });
	  }
	
	   /**
	   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
	   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
	   *
	   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.letBind = observableProto['let'] = function (func) {
	    return func(this);
	  };
	
	   /**
	   *  Determines whether an observable collection contains values. There is an alias for this method called 'ifThen' for browsers <IE9
	   *
	   * @example
	   *  1 - res = Rx.Observable.if(condition, obs1);
	   *  2 - res = Rx.Observable.if(condition, obs1, obs2);
	   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
	   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
	   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
	   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
	   */
	  Observable['if'] = Observable.ifThen = function (condition, thenSource, elseSourceOrScheduler) {
	    return observableDefer(function () {
	      elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());
	
	      isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
	      isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));
	
	      // Assume a scheduler for empty only
	      typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
	      return condition() ? thenSource : elseSourceOrScheduler;
	    });
	  };
	
	   /**
	   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
	   * There is an alias for this method called 'forIn' for browsers <IE9
	   * @param {Array} sources An array of values to turn into an observable sequence.
	   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
	   * @returns {Observable} An observable sequence from the concatenated observable sequences.
	   */
	  Observable['for'] = Observable.forIn = function (sources, resultSelector, thisArg) {
	    return enumerableOf(sources, resultSelector, thisArg).concat();
	  };
	
	   /**
	   *  Repeats source as long as condition holds emulating a while loop.
	   * There is an alias for this method called 'whileDo' for browsers <IE9
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  var observableWhileDo = Observable['while'] = Observable.whileDo = function (condition, source) {
	    isPromise(source) && (source = observableFromPromise(source));
	    return enumerableWhile(condition, source).concat();
	  };
	
	   /**
	   *  Repeats source as long as condition holds emulating a do while loop.
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  observableProto.doWhile = function (condition) {
	    return observableConcat([this, observableWhileDo(condition, this)]);
	  };
	
	   /**
	   *  Uses selector to determine which source in sources to use.
	   *  There is an alias 'switchCase' for browsers <IE9.
	   *
	   * @example
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 });
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, obs0);
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, scheduler);
	   *
	   * @param {Function} selector The function which extracts the value for to test in a case statement.
	   * @param {Array} sources A object which has keys which correspond to the case statement labels.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
	   *
	   * @returns {Observable} An observable sequence which is determined by a case statement.
	   */
	  Observable['case'] = Observable.switchCase = function (selector, sources, defaultSourceOrScheduler) {
	    return observableDefer(function () {
	      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
	      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());
	
	      typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));
	
	      var result = sources[selector()];
	      isPromise(result) && (result = observableFromPromise(result));
	
	      return result || defaultSourceOrScheduler;
	    });
	  };
	
	   /**
	   *  Expands an observable sequence by recursively invoking selector.
	   *
	   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
	   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
	   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
	   */
	  observableProto.expand = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var q = [],
	        m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        activeCount = 0,
	        isAcquired = false;
	
	      var ensureActive = function () {
	        var isOwner = false;
	        if (q.length > 0) {
	          isOwner = !isAcquired;
	          isAcquired = true;
	        }
	        if (isOwner) {
	          m.setDisposable(scheduler.scheduleRecursive(function (self) {
	            var work;
	            if (q.length > 0) {
	              work = q.shift();
	            } else {
	              isAcquired = false;
	              return;
	            }
	            var m1 = new SingleAssignmentDisposable();
	            d.add(m1);
	            m1.setDisposable(work.subscribe(function (x) {
	              observer.onNext(x);
	              var result = null;
	              try {
	                result = selector(x);
	              } catch (e) {
	                observer.onError(e);
	              }
	              q.push(result);
	              activeCount++;
	              ensureActive();
	            }, observer.onError.bind(observer), function () {
	              d.remove(m1);
	              activeCount--;
	              if (activeCount === 0) {
	                observer.onCompleted();
	              }
	            }));
	            self();
	          }));
	        }
	      };
	
	      q.push(source);
	      activeCount++;
	      ensureActive();
	      return d;
	    }, this);
	  };
	
	   /**
	   *  Runs all observable sequences in parallel and collect their last elements.
	   *
	   * @example
	   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
	   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
	   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
	   */
	  Observable.forkJoin = function () {
	    var allSources = [];
	    if (Array.isArray(arguments[0])) {
	      allSources = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { allSources.push(arguments[i]); }
	    }
	    return new AnonymousObservable(function (subscriber) {
	      var count = allSources.length;
	      if (count === 0) {
	        subscriber.onCompleted();
	        return disposableEmpty;
	      }
	      var group = new CompositeDisposable(),
	        finished = false,
	        hasResults = new Array(count),
	        hasCompleted = new Array(count),
	        results = new Array(count);
	
	      for (var idx = 0; idx < count; idx++) {
	        (function (i) {
	          var source = allSources[i];
	          isPromise(source) && (source = observableFromPromise(source));
	          group.add(
	            source.subscribe(
	              function (value) {
	              if (!finished) {
	                hasResults[i] = true;
	                results[i] = value;
	              }
	            },
	            function (e) {
	              finished = true;
	              subscriber.onError(e);
	              group.dispose();
	            },
	            function () {
	              if (!finished) {
	                if (!hasResults[i]) {
	                    subscriber.onCompleted();
	                    return;
	                }
	                hasCompleted[i] = true;
	                for (var ix = 0; ix < count; ix++) {
	                  if (!hasCompleted[ix]) { return; }
	                }
	                finished = true;
	                subscriber.onNext(results);
	                subscriber.onCompleted();
	              }
	            }));
	        })(idx);
	      }
	
	      return group;
	    });
	  };
	
	   /**
	   *  Runs two observable sequences in parallel and combines their last elemenets.
	   *
	   * @param {Observable} second Second observable sequence.
	   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
	   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
	   */
	  observableProto.forkJoin = function (second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var leftStopped = false, rightStopped = false,
	        hasLeft = false, hasRight = false,
	        lastLeft, lastRight,
	        leftSubscription = new SingleAssignmentDisposable(), rightSubscription = new SingleAssignmentDisposable();
	
	      isPromise(second) && (second = observableFromPromise(second));
	
	      leftSubscription.setDisposable(
	          first.subscribe(function (left) {
	            hasLeft = true;
	            lastLeft = left;
	          }, function (err) {
	            rightSubscription.dispose();
	            observer.onError(err);
	          }, function () {
	            leftStopped = true;
	            if (rightStopped) {
	              if (!hasLeft) {
	                  observer.onCompleted();
	              } else if (!hasRight) {
	                  observer.onCompleted();
	              } else {
	                var result;
	                try {
	                  result = resultSelector(lastLeft, lastRight);
	                } catch (e) {
	                  observer.onError(e);
	                  return;
	                }
	                observer.onNext(result);
	                observer.onCompleted();
	              }
	            }
	          })
	      );
	
	      rightSubscription.setDisposable(
	        second.subscribe(function (right) {
	          hasRight = true;
	          lastRight = right;
	        }, function (err) {
	          leftSubscription.dispose();
	          observer.onError(err);
	        }, function () {
	          rightStopped = true;
	          if (leftStopped) {
	            if (!hasLeft) {
	              observer.onCompleted();
	            } else if (!hasRight) {
	              observer.onCompleted();
	            } else {
	              var result;
	              try {
	                result = resultSelector(lastLeft, lastRight);
	              } catch (e) {
	                observer.onError(e);
	                return;
	              }
	              observer.onNext(result);
	              observer.onCompleted();
	            }
	          }
	        })
	      );
	
	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    }, first);
	  };
	
	  /**
	   * Comonadic bind operator.
	   * @param {Function} selector A transform function to apply to each element.
	   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
	   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
	   */
	  observableProto.manySelect = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return observableDefer(function () {
	      var chain;
	
	      return source
	        .map(function (x) {
	          var curr = new ChainObservable(x);
	
	          chain && chain.onNext(x);
	          chain = curr;
	
	          return curr;
	        })
	        .tap(
	          noop,
	          function (e) { chain && chain.onError(e); },
	          function () { chain && chain.onCompleted(); }
	        )
	        .observeOn(scheduler)
	        .map(selector);
	    }, source);
	  };
	
	  var ChainObservable = (function (__super__) {
	
	    function subscribe (observer) {
	      var self = this, g = new CompositeDisposable();
	      g.add(currentThreadScheduler.schedule(function () {
	        observer.onNext(self.head);
	        g.add(self.tail.mergeAll().subscribe(observer));
	      }));
	
	      return g;
	    }
	
	    inherits(ChainObservable, __super__);
	
	    function ChainObservable(head) {
	      __super__.call(this, subscribe);
	      this.head = head;
	      this.tail = new AsyncSubject();
	    }
	
	    addProperties(ChainObservable.prototype, Observer, {
	      onCompleted: function () {
	        this.onNext(Observable.empty());
	      },
	      onError: function (e) {
	        this.onNext(Observable.throwError(e));
	      },
	      onNext: function (v) {
	        this.tail.onNext(v);
	        this.tail.onCompleted();
	      }
	    });
	
	    return ChainObservable;
	
	  }(Observable));
	
	  /** @private */
	  var Map = root.Map || (function () {
	
	    function Map() {
	      this._keys = [];
	      this._values = [];
	    }
	
	    Map.prototype.get = function (key) {
	      var i = this._keys.indexOf(key);
	      return i !== -1 ? this._values[i] : undefined;
	    };
	
	    Map.prototype.set = function (key, value) {
	      var i = this._keys.indexOf(key);
	      i !== -1 && (this._values[i] = value);
	      this._values[this._keys.push(key) - 1] = value;
	    };
	
	    Map.prototype.forEach = function (callback, thisArg) {
	      for (var i = 0, len = this._keys.length; i < len; i++) {
	        callback.call(thisArg, this._values[i], this._keys[i]);
	      }
	    };
	
	    return Map;
	  }());
	
	  /**
	   * @constructor
	   * Represents a join pattern over observable sequences.
	   */
	  function Pattern(patterns) {
	    this.patterns = patterns;
	  }
	
	  /**
	   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
	   *  @param other Observable sequence to match in addition to the current pattern.
	   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
	   */
	  Pattern.prototype.and = function (other) {
	    return new Pattern(this.patterns.concat(other));
	  };
	
	  /**
	   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
	   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
	   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  Pattern.prototype.thenDo = function (selector) {
	    return new Plan(this, selector);
	  };
	
	  function Plan(expression, selector) {
	      this.expression = expression;
	      this.selector = selector;
	  }
	
	  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) {
	    var self = this;
	    var joinObservers = [];
	    for (var i = 0, len = this.expression.patterns.length; i < len; i++) {
	      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
	    }
	    var activePlan = new ActivePlan(joinObservers, function () {
	      var result;
	      try {
	        result = self.selector.apply(self, arguments);
	      } catch (e) {
	        observer.onError(e);
	        return;
	      }
	      observer.onNext(result);
	    }, function () {
	      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) {
	        joinObservers[j].removeActivePlan(activePlan);
	      }
	      deactivate(activePlan);
	    });
	    for (i = 0, len = joinObservers.length; i < len; i++) {
	      joinObservers[i].addActivePlan(activePlan);
	    }
	    return activePlan;
	  };
	
	  function planCreateObserver(externalSubscriptions, observable, onError) {
	    var entry = externalSubscriptions.get(observable);
	    if (!entry) {
	      var observer = new JoinObserver(observable, onError);
	      externalSubscriptions.set(observable, observer);
	      return observer;
	    }
	    return entry;
	  }
	
	  function ActivePlan(joinObserverArray, onNext, onCompleted) {
	    this.joinObserverArray = joinObserverArray;
	    this.onNext = onNext;
	    this.onCompleted = onCompleted;
	    this.joinObservers = new Map();
	    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      var joinObserver = this.joinObserverArray[i];
	      this.joinObservers.set(joinObserver, joinObserver);
	    }
	  }
	
	  ActivePlan.prototype.dequeue = function () {
	    this.joinObservers.forEach(function (v) { v.queue.shift(); });
	  };
	
	  ActivePlan.prototype.match = function () {
	    var i, len, hasValues = true;
	    for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      if (this.joinObserverArray[i].queue.length === 0) {
	        hasValues = false;
	        break;
	      }
	    }
	    if (hasValues) {
	      var firstValues = [],
	          isCompleted = false;
	      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	        firstValues.push(this.joinObserverArray[i].queue[0]);
	        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
	      }
	      if (isCompleted) {
	        this.onCompleted();
	      } else {
	        this.dequeue();
	        var values = [];
	        for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
	          values.push(firstValues[i].value);
	        }
	        this.onNext.apply(this, values);
	      }
	    }
	  };
	
	  var JoinObserver = (function (__super__) {
	    inherits(JoinObserver, __super__);
	
	    function JoinObserver(source, onError) {
	      __super__.call(this);
	      this.source = source;
	      this.onError = onError;
	      this.queue = [];
	      this.activePlans = [];
	      this.subscription = new SingleAssignmentDisposable();
	      this.isDisposed = false;
	    }
	
	    var JoinObserverPrototype = JoinObserver.prototype;
	
	    JoinObserverPrototype.next = function (notification) {
	      if (!this.isDisposed) {
	        if (notification.kind === 'E') {
	          return this.onError(notification.exception);
	        }
	        this.queue.push(notification);
	        var activePlans = this.activePlans.slice(0);
	        for (var i = 0, len = activePlans.length; i < len; i++) {
	          activePlans[i].match();
	        }
	      }
	    };
	
	    JoinObserverPrototype.error = noop;
	    JoinObserverPrototype.completed = noop;
	
	    JoinObserverPrototype.addActivePlan = function (activePlan) {
	      this.activePlans.push(activePlan);
	    };
	
	    JoinObserverPrototype.subscribe = function () {
	      this.subscription.setDisposable(this.source.materialize().subscribe(this));
	    };
	
	    JoinObserverPrototype.removeActivePlan = function (activePlan) {
	      this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
	      this.activePlans.length === 0 && this.dispose();
	    };
	
	    JoinObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        this.subscription.dispose();
	      }
	    };
	
	    return JoinObserver;
	  } (AbstractObserver));
	
	  /**
	   *  Creates a pattern that matches when both observable sequences have an available value.
	   *
	   *  @param right Observable sequence to match with the current sequence.
	   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
	   */
	  observableProto.and = function (right) {
	    return new Pattern([this, right]);
	  };
	
	  /**
	   *  Matches when the observable sequence has an available value and projects the value.
	   *
	   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
	   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  observableProto.thenDo = function (selector) {
	    return new Pattern([this]).thenDo(selector);
	  };
	
	  /**
	   *  Joins together the results from several patterns.
	   *
	   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
	   *  @returns {Observable} Observable sequence with the results form matching several patterns.
	   */
	  Observable.when = function () {
	    var len = arguments.length, plans;
	    if (Array.isArray(arguments[0])) {
	      plans = arguments[0];
	    } else {
	      plans = new Array(len);
	      for(var i = 0; i < len; i++) { plans[i] = arguments[i]; }
	    }
	    return new AnonymousObservable(function (o) {
	      var activePlans = [],
	          externalSubscriptions = new Map();
	      var outObserver = observerCreate(
	        function (x) { o.onNext(x); },
	        function (err) {
	          externalSubscriptions.forEach(function (v) { v.onError(err); });
	          o.onError(err);
	        },
	        function (x) { o.onCompleted(); }
	      );
	      try {
	        for (var i = 0, len = plans.length; i < len; i++) {
	          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) {
	            var idx = activePlans.indexOf(activePlan);
	            activePlans.splice(idx, 1);
	            activePlans.length === 0 && o.onCompleted();
	          }));
	        }
	      } catch (e) {
	        observableThrow(e).subscribe(o);
	      }
	      var group = new CompositeDisposable();
	      externalSubscriptions.forEach(function (joinObserver) {
	        joinObserver.subscribe();
	        group.add(joinObserver);
	      });
	
	      return group;
	    });
	  };
	
	  function observableTimerDate(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithAbsolute(dueTime, function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }
	
	  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var d = dueTime, p = normalizeTime(period);
	      return scheduler.scheduleRecursiveWithAbsoluteAndState(0, d, function (count, self) {
	        if (p > 0) {
	          var now = scheduler.now();
	          d = d + p;
	          d <= now && (d = now + p);
	        }
	        observer.onNext(count);
	        self(count + 1, d);
	      });
	    });
	  }
	
	  function observableTimerTimeSpan(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithRelative(normalizeTime(dueTime), function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }
	
	  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
	    return dueTime === period ?
	      new AnonymousObservable(function (observer) {
	        return scheduler.schedulePeriodicWithState(0, period, function (count) {
	          observer.onNext(count);
	          return count + 1;
	        });
	      }) :
	      observableDefer(function () {
	        return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
	      });
	  }
	
	  /**
	   *  Returns an observable sequence that produces a value after each period.
	   *
	   * @example
	   *  1 - res = Rx.Observable.interval(1000);
	   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
	   *
	   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
	   * @returns {Observable} An observable sequence that produces a value after each period.
	   */
	  var observableinterval = Observable.interval = function (period, scheduler) {
	    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : timeoutScheduler);
	  };
	
	  /**
	   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
	   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
	   */
	  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
	    var period;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (periodOrScheduler !== undefined && typeof periodOrScheduler === 'number') {
	      period = periodOrScheduler;
	    } else if (isScheduler(periodOrScheduler)) {
	      scheduler = periodOrScheduler;
	    }
	    if (dueTime instanceof Date && period === undefined) {
	      return observableTimerDate(dueTime.getTime(), scheduler);
	    }
	    if (dueTime instanceof Date && period !== undefined) {
	      period = periodOrScheduler;
	      return observableTimerDateAndPeriod(dueTime.getTime(), period, scheduler);
	    }
	    return period === undefined ?
	      observableTimerTimeSpan(dueTime, scheduler) :
	      observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
	  };
	
	  function observableDelayTimeSpan(source, dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var active = false,
	        cancelable = new SerialDisposable(),
	        exception = null,
	        q = [],
	        running = false,
	        subscription;
	      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
	        var d, shouldRun;
	        if (notification.value.kind === 'E') {
	          q = [];
	          q.push(notification);
	          exception = notification.value.exception;
	          shouldRun = !running;
	        } else {
	          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
	          shouldRun = !active;
	          active = true;
	        }
	        if (shouldRun) {
	          if (exception !== null) {
	            observer.onError(exception);
	          } else {
	            d = new SingleAssignmentDisposable();
	            cancelable.setDisposable(d);
	            d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function (self) {
	              var e, recurseDueTime, result, shouldRecurse;
	              if (exception !== null) {
	                return;
	              }
	              running = true;
	              do {
	                result = null;
	                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
	                  result = q.shift().value;
	                }
	                if (result !== null) {
	                  result.accept(observer);
	                }
	              } while (result !== null);
	              shouldRecurse = false;
	              recurseDueTime = 0;
	              if (q.length > 0) {
	                shouldRecurse = true;
	                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
	              } else {
	                active = false;
	              }
	              e = exception;
	              running = false;
	              if (e !== null) {
	                observer.onError(e);
	              } else if (shouldRecurse) {
	                self(recurseDueTime);
	              }
	            }));
	          }
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  }
	
	  function observableDelayDate(source, dueTime, scheduler) {
	    return observableDefer(function () {
	      return observableDelayTimeSpan(source, dueTime - scheduler.now(), scheduler);
	    });
	  }
	
	  /**
	   *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
	   *
	   * @example
	   *  1 - res = Rx.Observable.delay(new Date());
	   *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);
	   *
	   *  3 - res = Rx.Observable.delay(5000);
	   *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);
	   * @memberOf Observable#
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
	   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delay = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return dueTime instanceof Date ?
	      observableDelayDate(this, dueTime.getTime(), scheduler) :
	      observableDelayTimeSpan(this, dueTime, scheduler);
	  };
	
	  /**
	   *  Ignores values from an observable sequence which are followed by another value before dueTime.
	   * @param {Number} dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounce = observableProto.throttleWithTimeout = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var cancelable = new SerialDisposable(), hasvalue = false, value, id = 0;
	      var subscription = source.subscribe(
	        function (x) {
	          hasvalue = true;
	          value = x;
	          id++;
	          var currentId = id,
	            d = new SingleAssignmentDisposable();
	          cancelable.setDisposable(d);
	          d.setDisposable(scheduler.scheduleWithRelative(dueTime, function () {
	            hasvalue && id === currentId && observer.onNext(value);
	            hasvalue = false;
	          }));
	        },
	        function (e) {
	          cancelable.dispose();
	          observer.onError(e);
	          hasvalue = false;
	          id++;
	        },
	        function () {
	          cancelable.dispose();
	          hasvalue && observer.onNext(value);
	          observer.onCompleted();
	          hasvalue = false;
	          id++;
	        });
	      return new CompositeDisposable(subscription, cancelable);
	    }, this);
	  };
	
	  /**
	   * @deprecated use #debounce or #throttleWithTimeout instead.
	   */
	  observableProto.throttle = function(dueTime, scheduler) {
	    //deprecate('throttle', 'debounce or throttleWithTimeout');
	    return this.debounce(dueTime, scheduler);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
	   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	    var source = this, timeShift;
	    timeShiftOrScheduler == null && (timeShift = timeSpan);
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (typeof timeShiftOrScheduler === 'number') {
	      timeShift = timeShiftOrScheduler;
	    } else if (isScheduler(timeShiftOrScheduler)) {
	      timeShift = timeSpan;
	      scheduler = timeShiftOrScheduler;
	    }
	    return new AnonymousObservable(function (observer) {
	      var groupDisposable,
	        nextShift = timeShift,
	        nextSpan = timeSpan,
	        q = [],
	        refCountDisposable,
	        timerD = new SerialDisposable(),
	        totalTime = 0;
	        groupDisposable = new CompositeDisposable(timerD),
	        refCountDisposable = new RefCountDisposable(groupDisposable);
	
	       function createTimer () {
	        var m = new SingleAssignmentDisposable(),
	          isSpan = false,
	          isShift = false;
	        timerD.setDisposable(m);
	        if (nextSpan === nextShift) {
	          isSpan = true;
	          isShift = true;
	        } else if (nextSpan < nextShift) {
	            isSpan = true;
	        } else {
	          isShift = true;
	        }
	        var newTotalTime = isSpan ? nextSpan : nextShift,
	          ts = newTotalTime - totalTime;
	        totalTime = newTotalTime;
	        if (isSpan) {
	          nextSpan += timeShift;
	        }
	        if (isShift) {
	          nextShift += timeShift;
	        }
	        m.setDisposable(scheduler.scheduleWithRelative(ts, function () {
	          if (isShift) {
	            var s = new Subject();
	            q.push(s);
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          isSpan && q.shift().onCompleted();
	          createTimer();
	        }));
	      };
	      q.push(new Subject());
	      observer.onNext(addRef(q[0], refCountDisposable));
	      createTimer();
	      groupDisposable.add(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	        },
	        function (e) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
	   * @param {Number} timeSpan Maximum time length of a window.
	   * @param {Number} count Maximum element count of a window.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTimeOrCount = function (timeSpan, count, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var timerD = new SerialDisposable(),
	          groupDisposable = new CompositeDisposable(timerD),
	          refCountDisposable = new RefCountDisposable(groupDisposable),
	          n = 0,
	          windowId = 0,
	          s = new Subject();
	
	      function createTimer(id) {
	        var m = new SingleAssignmentDisposable();
	        timerD.setDisposable(m);
	        m.setDisposable(scheduler.scheduleWithRelative(timeSpan, function () {
	          if (id !== windowId) { return; }
	          n = 0;
	          var newId = ++windowId;
	          s.onCompleted();
	          s = new Subject();
	          observer.onNext(addRef(s, refCountDisposable));
	          createTimer(newId);
	        }));
	      }
	
	      observer.onNext(addRef(s, refCountDisposable));
	      createTimer(0);
	
	      groupDisposable.add(source.subscribe(
	        function (x) {
	          var newId = 0, newWindow = false;
	          s.onNext(x);
	          if (++n === count) {
	            newWindow = true;
	            n = 0;
	            newId = ++windowId;
	            s.onCompleted();
	            s = new Subject();
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          newWindow && createTimer(newId);
	        },
	        function (e) {
	          s.onError(e);
	          observer.onError(e);
	        }, function () {
	          s.onCompleted();
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	    /**
	     *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
	     *
	     * @example
	     *  1 - res = xs.bufferWithTime(1000, scheduler); // non-overlapping segments of 1 second
	     *  2 - res = xs.bufferWithTime(1000, 500, scheduler; // segments of 1 second with time shift 0.5 seconds
	     *
	     * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
	     * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
	     * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */
	    observableProto.bufferWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	        return this.windowWithTime.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
	    };
	
	    /**
	     *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
	     *
	     * @example
	     *  1 - res = source.bufferWithTimeOrCount(5000, 50); // 5s or 50 items in an array
	     *  2 - res = source.bufferWithTimeOrCount(5000, 50, scheduler); // 5s or 50 items in an array
	     *
	     * @param {Number} timeSpan Maximum time length of a buffer.
	     * @param {Number} count Maximum element count of a buffer.
	     * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */
	    observableProto.bufferWithTimeOrCount = function (timeSpan, count, scheduler) {
	        return this.windowWithTimeOrCount(timeSpan, count, scheduler).selectMany(function (x) {
	            return x.toArray();
	        });
	    };
	
	  /**
	   *  Records the time interval between consecutive values in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timeInterval();
	   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
	   *
	   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with time interval information on values.
	   */
	  observableProto.timeInterval = function (scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return observableDefer(function () {
	      var last = scheduler.now();
	      return source.map(function (x) {
	        var now = scheduler.now(), span = now - last;
	        last = now;
	        return { value: x, interval: span };
	      });
	    });
	  };
	
	  /**
	   *  Records the timestamp for each value in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
	   *  2 - res = source.timestamp(Rx.Scheduler.timeout);
	   *
	   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with timestamp information on values.
	   */
	  observableProto.timestamp = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return this.map(function (x) {
	      return { value: x, timestamp: scheduler.now() };
	    });
	  };
	
	  function sampleObservable(source, sampler) {
	    return new AnonymousObservable(function (observer) {
	      var atEnd, value, hasValue;
	
	      function sampleSubscribe() {
	        if (hasValue) {
	          hasValue = false;
	          observer.onNext(value);
	        }
	        atEnd && observer.onCompleted();
	      }
	
	      return new CompositeDisposable(
	        source.subscribe(function (newValue) {
	          hasValue = true;
	          value = newValue;
	        }, observer.onError.bind(observer), function () {
	          atEnd = true;
	        }),
	        sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe)
	      );
	    }, source);
	  }
	
	  /**
	   *  Samples the observable sequence at each interval.
	   *
	   * @example
	   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
	   *  2 - res = source.sample(5000); // 5 seconds
	   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
	   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Sampled observable sequence.
	   */
	  observableProto.sample = observableProto.throttleLatest = function (intervalOrSampler, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return typeof intervalOrSampler === 'number' ?
	      sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
	      sampleObservable(this, intervalOrSampler);
	  };
	
	  /**
	   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
	   * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	   */
	  observableProto.timeout = function (dueTime, other, scheduler) {
	    (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	
	    var source = this, schedulerMethod = dueTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	
	    return new AnonymousObservable(function (observer) {
	      var id = 0,
	        original = new SingleAssignmentDisposable(),
	        subscription = new SerialDisposable(),
	        switched = false,
	        timer = new SerialDisposable();
	
	      subscription.setDisposable(original);
	
	      function createTimer() {
	        var myId = id;
	        timer.setDisposable(scheduler[schedulerMethod](dueTime, function () {
	          if (id === myId) {
	            isPromise(other) && (other = observableFromPromise(other));
	            subscription.setDisposable(other.subscribe(observer));
	          }
	        }));
	      }
	
	      createTimer();
	
	      original.setDisposable(source.subscribe(function (x) {
	        if (!switched) {
	          id++;
	          observer.onNext(x);
	          createTimer();
	        }
	      }, function (e) {
	        if (!switched) {
	          id++;
	          observer.onError(e);
	        }
	      }, function () {
	        if (!switched) {
	          id++;
	          observer.onCompleted();
	        }
	      }));
	      return new CompositeDisposable(subscription, timer);
	    }, source);
	  };
	
	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithAbsoluteTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return new Date(); }
	   *  });
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithAbsoluteTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	        hasResult = false,
	        result,
	        state = initialState,
	        time;
	      return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(), function (self) {
	        hasResult && observer.onNext(result);
	
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };
	
	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithRelativeTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return 500; }
	   *  );
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	        hasResult = false,
	        result,
	        state = initialState,
	        time;
	      return scheduler.scheduleRecursiveWithRelative(0, function (self) {
	        hasResult && observer.onNext(result);
	
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };
	
	  /**
	   *  Time shifts the observable sequence by delaying the subscription.
	   *
	   * @example
	   *  1 - res = source.delaySubscription(5000); // 5s
	   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Number} dueTime Absolute or relative time to perform the subscription at.
	   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delaySubscription = function (dueTime, scheduler) {
	    return this.delayWithSelector(observableTimer(dueTime, isScheduler(scheduler) ? scheduler : timeoutScheduler), observableEmpty);
	  };
	
	  /**
	   *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
	   *
	   * @example
	   *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only
	   *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector
	   *
	   * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.
	   * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delayWithSelector = function (subscriptionDelay, delayDurationSelector) {
	      var source = this, subDelay, selector;
	      if (typeof subscriptionDelay === 'function') {
	        selector = subscriptionDelay;
	      } else {
	        subDelay = subscriptionDelay;
	        selector = delayDurationSelector;
	      }
	      return new AnonymousObservable(function (observer) {
	        var delays = new CompositeDisposable(), atEnd = false, done = function () {
	            if (atEnd && delays.length === 0) { observer.onCompleted(); }
	        }, subscription = new SerialDisposable(), start = function () {
	          subscription.setDisposable(source.subscribe(function (x) {
	              var delay;
	              try {
	                delay = selector(x);
	              } catch (error) {
	                observer.onError(error);
	                return;
	              }
	              var d = new SingleAssignmentDisposable();
	              delays.add(d);
	              d.setDisposable(delay.subscribe(function () {
	                observer.onNext(x);
	                delays.remove(d);
	                done();
	              }, observer.onError.bind(observer), function () {
	                observer.onNext(x);
	                delays.remove(d);
	                done();
	              }));
	          }, observer.onError.bind(observer), function () {
	            atEnd = true;
	            subscription.dispose();
	            done();
	          }));
	      };
	
	      if (!subDelay) {
	        start();
	      } else {
	        subscription.setDisposable(subDelay.subscribe(start, observer.onError.bind(observer), start));
	      }
	
	      return new CompositeDisposable(subscription, delays);
	    }, this);
	  };
	
	    /**
	     *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
	     * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().
	     * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.
	     * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().
	     * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	     */
	    observableProto.timeoutWithSelector = function (firstTimeout, timeoutdurationSelector, other) {
	      if (arguments.length === 1) {
	          timeoutdurationSelector = firstTimeout;
	          firstTimeout = observableNever();
	      }
	      other || (other = observableThrow(new Error('Timeout')));
	      var source = this;
	      return new AnonymousObservable(function (observer) {
	        var subscription = new SerialDisposable(), timer = new SerialDisposable(), original = new SingleAssignmentDisposable();
	
	        subscription.setDisposable(original);
	
	        var id = 0, switched = false;
	
	        function setTimer(timeout) {
	          var myId = id;
	
	          function timerWins () {
	            return id === myId;
	          }
	
	          var d = new SingleAssignmentDisposable();
	          timer.setDisposable(d);
	          d.setDisposable(timeout.subscribe(function () {
	            timerWins() && subscription.setDisposable(other.subscribe(observer));
	            d.dispose();
	          }, function (e) {
	            timerWins() && observer.onError(e);
	          }, function () {
	            timerWins() && subscription.setDisposable(other.subscribe(observer));
	          }));
	        };
	
	        setTimer(firstTimeout);
	
	        function observerWins() {
	          var res = !switched;
	          if (res) { id++; }
	          return res;
	        }
	
	        original.setDisposable(source.subscribe(function (x) {
	          if (observerWins()) {
	            observer.onNext(x);
	            var timeout;
	            try {
	              timeout = timeoutdurationSelector(x);
	            } catch (e) {
	              observer.onError(e);
	              return;
	            }
	            setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
	          }
	        }, function (e) {
	          observerWins() && observer.onError(e);
	        }, function () {
	          observerWins() && observer.onCompleted();
	        }));
	        return new CompositeDisposable(subscription, timer);
	      }, source);
	    };
	
	  /**
	   * Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
	   * @param {Function} durationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounceWithSelector = function (durationSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;
	      var subscription = source.subscribe(function (x) {
	        var throttle;
	        try {
	          throttle = durationSelector(x);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	
	        isPromise(throttle) && (throttle = observableFromPromise(throttle));
	
	        hasValue = true;
	        value = x;
	        id++;
	        var currentid = id, d = new SingleAssignmentDisposable();
	        cancelable.setDisposable(d);
	        d.setDisposable(throttle.subscribe(function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }, observer.onError.bind(observer), function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }));
	      }, function (e) {
	        cancelable.dispose();
	        observer.onError(e);
	        hasValue = false;
	        id++;
	      }, function () {
	        cancelable.dispose();
	        hasValue && observer.onNext(value);
	        observer.onCompleted();
	        hasValue = false;
	        id++;
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  };
	
	  /**
	   * @deprecated use #debounceWithSelector instead.
	   */
	  observableProto.throttleWithSelector = function (durationSelector) {
	    //deprecate('throttleWithSelector', 'debounceWithSelector');
	    return this.debounceWithSelector(durationSelector);
	  };
	
	  /**
	   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   *
	   *  1 - res = source.skipLastWithTime(5000);
	   *  2 - res = source.skipLastWithTime(5000, scheduler);
	   *
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for skipping elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
	   */
	  observableProto.skipLastWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now();
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now();
	        while (q.length > 0) {
	          var next = q.shift();
	          if (now - next.interval <= duration) { o.onNext(next.value); }
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastBufferWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now(), res = [];
	        while (q.length > 0) {
	          var next = q.shift();
	          now - next.interval <= duration && res.push(next.value);
	        }
	        o.onNext(res);
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
	   */
	  observableProto.takeWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function () { o.onCompleted(); }), source.subscribe(o));
	    }, source);
	  };
	
	  /**
	   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.skipWithTime(5000, [optional scheduler]);
	   *
	   * @description
	   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
	   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
	   *  may not execute immediately, despite the zero due time.
	   *
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
	   * @param {Number} duration Duration for skipping elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
	   */
	  observableProto.skipWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var open = false;
	      return new CompositeDisposable(
	        scheduler.scheduleWithRelative(duration, function () { open = true; }),
	        source.subscribe(function (x) { open && observer.onNext(x); }, observer.onError.bind(observer), observer.onCompleted.bind(observer)));
	    }, source);
	  };
	
	  /**
	   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
	   *
	   * @examples
	   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
	   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
	   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
	   */
	  observableProto.skipUntilWithTime = function (startTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this, schedulerMethod = startTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      var open = false;
	
	      return new CompositeDisposable(
	        scheduler[schedulerMethod](startTime, function () { open = true; }),
	        source.subscribe(
	          function (x) { open && o.onNext(x); },
	          function (e) { o.onError(e); }, function () { o.onCompleted(); }));
	    }, source);
	  };
	
	  /**
	   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
	   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
	   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
	   */
	  observableProto.takeUntilWithTime = function (endTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this, schedulerMethod = endTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(
	        scheduler[schedulerMethod](endTime, function () { o.onCompleted(); }),
	        source.subscribe(o));
	    }, source);
	  };
	
	  /**
	   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
	   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
	   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
	   * @returns {Observable} An Observable that performs the throttle operation.
	   */
	  observableProto.throttleFirst = function (windowDuration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var duration = +windowDuration || 0;
	    if (duration <= 0) { throw new RangeError('windowDuration cannot be less or equal zero.'); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var lastOnNext = 0;
	      return source.subscribe(
	        function (x) {
	          var now = scheduler.now();
	          if (lastOnNext === 0 || now - lastOnNext >= duration) {
	            lastOnNext = now;
	            o.onNext(x);
	          }
	        },function (e) { o.onError(e); }, function () { o.onCompleted(); }
	      );
	    }, source);
	  };
	
	  /**
	   * Executes a transducer to transform the observable sequence
	   * @param {Transducer} transducer A transducer to execute
	   * @returns {Observable} An Observable sequence containing the results from the transducer.
	   */
	  observableProto.transduce = function(transducer) {
	    var source = this;
	
	    function transformForObserver(o) {
	      return {
	        '@@transducer/init': function() {
	          return o;
	        },
	        '@@transducer/step': function(obs, input) {
	          return obs.onNext(input);
	        },
	        '@@transducer/result': function(obs) {
	          return obs.onCompleted();
	        }
	      };
	    }
	
	    return new AnonymousObservable(function(o) {
	      var xform = transducer(transformForObserver(o));
	      return source.subscribe(
	        function(v) {
	          try {
	            xform['@@transducer/step'](o, v);
	          } catch (e) {
	            o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function() { xform['@@transducer/result'](o); }
	      );
	    }, source);
	  };
	
	  /*
	   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusive = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasCurrent = false,
	        isStopped = false,
	        m = new SingleAssignmentDisposable(),
	        g = new CompositeDisposable();
	
	      g.add(m);
	
	      m.setDisposable(sources.subscribe(
	        function (innerSource) {
	          if (!hasCurrent) {
	            hasCurrent = true;
	
	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	            var innerSubscription = new SingleAssignmentDisposable();
	            g.add(innerSubscription);
	
	            innerSubscription.setDisposable(innerSource.subscribe(
	              observer.onNext.bind(observer),
	              observer.onError.bind(observer),
	              function () {
	                g.remove(innerSubscription);
	                hasCurrent = false;
	                if (isStopped && g.length === 1) {
	                  observer.onCompleted();
	                }
	            }));
	          }
	        },
	        observer.onError.bind(observer),
	        function () {
	          isStopped = true;
	          if (!hasCurrent && g.length === 1) {
	            observer.onCompleted();
	          }
	        }));
	
	      return g;
	    }, this);
	  };
	
	  /*
	   * Performs a exclusive map waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @param {Function} selector Selector to invoke for every item in the current subscription.
	   * @param {Any} [thisArg] An optional context to invoke with the selector parameter.
	   * @returns {Observable} An exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusiveMap = function (selector, thisArg) {
	    var sources = this,
	        selectorFunc = bindCallback(selector, thisArg, 3);
	    return new AnonymousObservable(function (observer) {
	      var index = 0,
	        hasCurrent = false,
	        isStopped = true,
	        m = new SingleAssignmentDisposable(),
	        g = new CompositeDisposable();
	
	      g.add(m);
	
	      m.setDisposable(sources.subscribe(
	        function (innerSource) {
	
	          if (!hasCurrent) {
	            hasCurrent = true;
	
	            innerSubscription = new SingleAssignmentDisposable();
	            g.add(innerSubscription);
	
	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	            innerSubscription.setDisposable(innerSource.subscribe(
	              function (x) {
	                var result;
	                try {
	                  result = selectorFunc(x, index++, innerSource);
	                } catch (e) {
	                  observer.onError(e);
	                  return;
	                }
	
	                observer.onNext(result);
	              },
	              function (e) { observer.onError(e); },
	              function () {
	                g.remove(innerSubscription);
	                hasCurrent = false;
	
	                if (isStopped && g.length === 1) {
	                  observer.onCompleted();
	                }
	              }));
	          }
	        },
	        function (e) { observer.onError(e); },
	        function () {
	          isStopped = true;
	          if (g.length === 1 && !hasCurrent) {
	            observer.onCompleted();
	          }
	        }));
	      return g;
	    }, this);
	  };
	
	  /** Provides a set of extension methods for virtual time scheduling. */
	  Rx.VirtualTimeScheduler = (function (__super__) {
	
	    function localNow() {
	      return this.toDateTimeOffset(this.clock);
	    }
	
	    function scheduleNow(state, action) {
	      return this.scheduleAbsoluteWithState(state, this.clock, action);
	    }
	
	    function scheduleRelative(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
	    }
	
	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
	    }
	
	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }
	
	    inherits(VirtualTimeScheduler, __super__);
	
	    /**
	     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
	     *
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function VirtualTimeScheduler(initialClock, comparer) {
	      this.clock = initialClock;
	      this.comparer = comparer;
	      this.isEnabled = false;
	      this.queue = new PriorityQueue(1024);
	      __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	    }
	
	    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;
	
	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    VirtualTimeSchedulerPrototype.add = notImplemented;
	
	    /**
	     * Converts an absolute time to a number
	     * @param {Any} The absolute time.
	     * @returns {Number} The absolute time in ms
	     */
	    VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;
	
	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    VirtualTimeSchedulerPrototype.toRelative = notImplemented;
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function (state, period, action) {
	      var s = new SchedulePeriodicRecursive(this, state, period, action);
	      return s.start();
	    };
	
	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function (state, dueTime, action) {
	      var runAt = this.add(this.clock, dueTime);
	      return this.scheduleAbsoluteWithState(state, runAt, action);
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelative = function (dueTime, action) {
	      return this.scheduleRelativeWithState(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Starts the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.start = function () {
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	      }
	    };
	
	    /**
	     * Stops the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.stop = function () {
	      this.isEnabled = false;
	    };
	
	    /**
	     * Advances the scheduler's clock to the specified time, running all work till that point.
	     * @param {Number} time Absolute time to advance the scheduler's clock to.
	     */
	    VirtualTimeSchedulerPrototype.advanceTo = function (time) {
	      var dueToClock = this.comparer(this.clock, time);
	      if (this.comparer(this.clock, time) > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) { return; }
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null && this.comparer(next.dueTime, time) <= 0) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	        this.clock = time;
	      }
	    };
	
	    /**
	     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.advanceBy = function (time) {
	      var dt = this.add(this.clock, time),
	          dueToClock = this.comparer(this.clock, dt);
	      if (dueToClock > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) {  return; }
	
	      this.advanceTo(dt);
	    };
	
	    /**
	     * Advances the scheduler's clock by the specified relative time.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.sleep = function (time) {
	      var dt = this.add(this.clock, time);
	      if (this.comparer(this.clock, dt) >= 0) { throw new ArgumentOutOfRangeError(); }
	
	      this.clock = dt;
	    };
	
	    /**
	     * Gets the next scheduled item to be executed.
	     * @returns {ScheduledItem} The next scheduled item.
	     */
	    VirtualTimeSchedulerPrototype.getNext = function () {
	      while (this.queue.length > 0) {
	        var next = this.queue.peek();
	        if (next.isCancelled()) {
	          this.queue.dequeue();
	        } else {
	          return next;
	        }
	      }
	      return null;
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Scheduler} scheduler Scheduler to execute the action on.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (dueTime, action) {
	      return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function (state, dueTime, action) {
	      var self = this;
	
	      function run(scheduler, state1) {
	        self.queue.remove(si);
	        return action(scheduler, state1);
	      }
	
	      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
	      this.queue.enqueue(si);
	
	      return si.disposable;
	    };
	
	    return VirtualTimeScheduler;
	  }(Scheduler));
	
	  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
	  Rx.HistoricalScheduler = (function (__super__) {
	    inherits(HistoricalScheduler, __super__);
	
	    /**
	     * Creates a new historical scheduler with the specified initial clock value.
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function HistoricalScheduler(initialClock, comparer) {
	      var clock = initialClock == null ? 0 : initialClock;
	      var cmp = comparer || defaultSubComparer;
	      __super__.call(this, clock, cmp);
	    }
	
	    var HistoricalSchedulerProto = HistoricalScheduler.prototype;
	
	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    HistoricalSchedulerProto.add = function (absolute, relative) {
	      return absolute + relative;
	    };
	
	    HistoricalSchedulerProto.toDateTimeOffset = function (absolute) {
	      return new Date(absolute).getTime();
	    };
	
	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @memberOf HistoricalScheduler
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    HistoricalSchedulerProto.toRelative = function (timeSpan) {
	      return timeSpan;
	    };
	
	    return HistoricalScheduler;
	  }(Rx.VirtualTimeScheduler));
	
	  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
	    inherits(AnonymousObservable, __super__);
	
	    // Fix subscriber to check for undefined or function returned to decorate as Disposable
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }
	
	    function setDisposable(s, state) {
	      var ado = state[0], subscribe = state[1];
	      var sub = tryCatch(subscribe)(ado);
	
	      if (sub === errorObj) {
	        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }
	
	    function AnonymousObservable(subscribe, parent) {
	      this.source = parent;
	
	      function s(observer) {
	        var ado = new AutoDetachObserver(observer), state = [ado, subscribe];
	
	        if (currentThreadScheduler.scheduleRequired()) {
	          currentThreadScheduler.scheduleWithState(state, setDisposable);
	        } else {
	          setDisposable(null, state);
	        }
	        return ado;
	      }
	
	      __super__.call(this, s);
	    }
	
	    return AnonymousObservable;
	
	  }(Observable));
	
	  var AutoDetachObserver = (function (__super__) {
	    inherits(AutoDetachObserver, __super__);
	
	    function AutoDetachObserver(observer) {
	      __super__.call(this);
	      this.observer = observer;
	      this.m = new SingleAssignmentDisposable();
	    }
	
	    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;
	
	    AutoDetachObserverPrototype.next = function (value) {
	      var result = tryCatch(this.observer.onNext).call(this.observer, value);
	      if (result === errorObj) {
	        this.dispose();
	        thrower(result.e);
	      }
	    };
	
	    AutoDetachObserverPrototype.error = function (err) {
	      var result = tryCatch(this.observer.onError).call(this.observer, err);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };
	
	    AutoDetachObserverPrototype.completed = function () {
	      var result = tryCatch(this.observer.onCompleted).call(this.observer);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };
	
	    AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
	    AutoDetachObserverPrototype.getDisposable = function () { return this.m.getDisposable(); };
	
	    AutoDetachObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.m.dispose();
	    };
	
	    return AutoDetachObserver;
	  }(AbstractObserver));
	
	  var GroupedObservable = (function (__super__) {
	    inherits(GroupedObservable, __super__);
	
	    function subscribe(observer) {
	      return this.underlyingObservable.subscribe(observer);
	    }
	
	    function GroupedObservable(key, underlyingObservable, mergedDisposable) {
	      __super__.call(this, subscribe);
	      this.key = key;
	      this.underlyingObservable = !mergedDisposable ?
	        underlyingObservable :
	        new AnonymousObservable(function (observer) {
	          return new CompositeDisposable(mergedDisposable.getDisposable(), underlyingObservable.subscribe(observer));
	        });
	    }
	
	    return GroupedObservable;
	  }(Observable));
	
	  /**
	   *  Represents an object that is both an observable sequence as well as an observer.
	   *  Each notification is broadcasted to all subscribed observers.
	   */
	  var Subject = Rx.Subject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	        return disposableEmpty;
	      }
	      observer.onCompleted();
	      return disposableEmpty;
	    }
	
	    inherits(Subject, __super__);
	
	    /**
	     * Creates a subject.
	     */
	    function Subject() {
	      __super__.call(this, subscribe);
	      this.isDisposed = false,
	      this.isStopped = false,
	      this.observers = [];
	      this.hasError = false;
	    }
	
	    addProperties(Subject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onCompleted();
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.error = error;
	          this.hasError = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onNext(value);
	          }
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });
	
	    /**
	     * Creates a subject from the specified observer and observable.
	     * @param {Observer} observer The observer used to send messages to the subject.
	     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
	     * @returns {Subject} Subject implemented using the given observer and observable.
	     */
	    Subject.create = function (observer, observable) {
	      return new AnonymousSubject(observer, observable);
	    };
	
	    return Subject;
	  }(Observable));
	
	  /**
	   *  Represents the result of an asynchronous operation.
	   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
	   */
	  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {
	
	    function subscribe(observer) {
	      checkDisposed(this);
	
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }
	
	      if (this.hasError) {
	        observer.onError(this.error);
	      } else if (this.hasValue) {
	        observer.onNext(this.value);
	        observer.onCompleted();
	      } else {
	        observer.onCompleted();
	      }
	
	      return disposableEmpty;
	    }
	
	    inherits(AsyncSubject, __super__);
	
	    /**
	     * Creates a subject that can only receive one value and that value is cached for all future observations.
	     * @constructor
	     */
	    function AsyncSubject() {
	      __super__.call(this, subscribe);
	
	      this.isDisposed = false;
	      this.isStopped = false;
	      this.hasValue = false;
	      this.observers = [];
	      this.hasError = false;
	    }
	
	    addProperties(AsyncSubject.prototype, Observer, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () {
	        checkDisposed(this);
	        return this.observers.length > 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
	       */
	      onCompleted: function () {
	        var i, len;
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          var os = cloneArray(this.observers), len = os.length;
	
	          if (this.hasValue) {
	            for (i = 0; i < len; i++) {
	              var o = os[i];
	              o.onNext(this.value);
	              o.onCompleted();
	            }
	          } else {
	            for (i = 0; i < len; i++) {
	              os[i].onCompleted();
	            }
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the error.
	       * @param {Mixed} error The Error to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.hasError = true;
	          this.error = error;
	
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
	       * @param {Mixed} value The value to store in the subject.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        this.hasValue = true;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.exception = null;
	        this.value = null;
	      }
	    });
	
	    return AsyncSubject;
	  }(Observable));
	
	  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
	    inherits(AnonymousSubject, __super__);
	
	    function subscribe(observer) {
	      return this.observable.subscribe(observer);
	    }
	
	    function AnonymousSubject(observer, observable) {
	      this.observer = observer;
	      this.observable = observable;
	      __super__.call(this, subscribe);
	    }
	
	    addProperties(AnonymousSubject.prototype, Observer.prototype, {
	      onCompleted: function () {
	        this.observer.onCompleted();
	      },
	      onError: function (error) {
	        this.observer.onError(error);
	      },
	      onNext: function (value) {
	        this.observer.onNext(value);
	      }
	    });
	
	    return AnonymousSubject;
	  }(Observable));
	
	  /**
	  * Used to pause and resume streams.
	  */
	  Rx.Pauser = (function (__super__) {
	    inherits(Pauser, __super__);
	
	    function Pauser() {
	      __super__.call(this);
	    }
	
	    /**
	     * Pauses the underlying sequence.
	     */
	    Pauser.prototype.pause = function () { this.onNext(false); };
	
	    /**
	    * Resumes the underlying sequence.
	    */
	    Pauser.prototype.resume = function () { this.onNext(true); };
	
	    return Pauser;
	  }(Subject));
	
	  if (true) {
	    root.Rx = Rx;
	
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Rx;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (freeExports && freeModule) {
	    // in Node.js or RingoJS
	    if (moduleExports) {
	      (freeModule.exports = Rx).Rx = Rx;
	    } else {
	      freeExports.Rx = Rx;
	    }
	  } else {
	    // in a browser or Rhino
	    root.Rx = Rx;
	  }
	
	  // All code before this point will be filtered from stack traces.
	  var rEndingLine = captureLine();
	
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(157)(module), (function() { return this; }()), __webpack_require__(101)))

/***/ },
/* 165 */,
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var DIRECTIVE = "directive";
	var DIRECTIVE_LIFECYCLE = "directiveLifecycle";
	var ELEMENT_PROPERTY = "elementProperty";
	var ELEMENT_ATTRIBUTE = "elementAttribute";
	var ELEMENT_CLASS = "elementClass";
	var ELEMENT_STYLE = "elementStyle";
	var TEXT_NODE = "textNode";
	var BindingRecord = (function () {
	    function BindingRecord(mode, implicitReceiver, ast, elementIndex, propertyName, propertyUnit, setter, lifecycleEvent, directiveRecord) {
	        this.mode = mode;
	        this.implicitReceiver = implicitReceiver;
	        this.ast = ast;
	        this.elementIndex = elementIndex;
	        this.propertyName = propertyName;
	        this.propertyUnit = propertyUnit;
	        this.setter = setter;
	        this.lifecycleEvent = lifecycleEvent;
	        this.directiveRecord = directiveRecord;
	    }
	    BindingRecord.prototype.callOnChange = function () {
	        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChange;
	    };
	    BindingRecord.prototype.isOnPushChangeDetection = function () {
	        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.isOnPushChangeDetection();
	    };
	    BindingRecord.prototype.isDirective = function () { return this.mode === DIRECTIVE; };
	    BindingRecord.prototype.isDirectiveLifecycle = function () { return this.mode === DIRECTIVE_LIFECYCLE; };
	    BindingRecord.prototype.isElementProperty = function () { return this.mode === ELEMENT_PROPERTY; };
	    BindingRecord.prototype.isElementAttribute = function () { return this.mode === ELEMENT_ATTRIBUTE; };
	    BindingRecord.prototype.isElementClass = function () { return this.mode === ELEMENT_CLASS; };
	    BindingRecord.prototype.isElementStyle = function () { return this.mode === ELEMENT_STYLE; };
	    BindingRecord.prototype.isTextNode = function () { return this.mode === TEXT_NODE; };
	    BindingRecord.createForDirective = function (ast, propertyName, setter, directiveRecord) {
	        return new BindingRecord(DIRECTIVE, 0, ast, 0, propertyName, null, setter, null, directiveRecord);
	    };
	    BindingRecord.createDirectiveOnCheck = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, "onCheck", directiveRecord);
	    };
	    BindingRecord.createDirectiveOnInit = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, "onInit", directiveRecord);
	    };
	    BindingRecord.createDirectiveOnChange = function (directiveRecord) {
	        return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, "onChange", directiveRecord);
	    };
	    BindingRecord.createForElementProperty = function (ast, elementIndex, propertyName) {
	        return new BindingRecord(ELEMENT_PROPERTY, 0, ast, elementIndex, propertyName, null, null, null, null);
	    };
	    BindingRecord.createForElementAttribute = function (ast, elementIndex, attributeName) {
	        return new BindingRecord(ELEMENT_ATTRIBUTE, 0, ast, elementIndex, attributeName, null, null, null, null);
	    };
	    BindingRecord.createForElementClass = function (ast, elementIndex, className) {
	        return new BindingRecord(ELEMENT_CLASS, 0, ast, elementIndex, className, null, null, null, null);
	    };
	    BindingRecord.createForElementStyle = function (ast, elementIndex, styleName, unit) {
	        return new BindingRecord(ELEMENT_STYLE, 0, ast, elementIndex, styleName, unit, null, null, null);
	    };
	    BindingRecord.createForHostProperty = function (directiveIndex, ast, propertyName) {
	        return new BindingRecord(ELEMENT_PROPERTY, directiveIndex, ast, directiveIndex.elementIndex, propertyName, null, null, null, null);
	    };
	    BindingRecord.createForHostAttribute = function (directiveIndex, ast, attributeName) {
	        return new BindingRecord(ELEMENT_ATTRIBUTE, directiveIndex, ast, directiveIndex.elementIndex, attributeName, null, null, null, null);
	    };
	    BindingRecord.createForHostClass = function (directiveIndex, ast, className) {
	        return new BindingRecord(ELEMENT_CLASS, directiveIndex, ast, directiveIndex.elementIndex, className, null, null, null, null);
	    };
	    BindingRecord.createForHostStyle = function (directiveIndex, ast, styleName, unit) {
	        return new BindingRecord(ELEMENT_STYLE, directiveIndex, ast, directiveIndex.elementIndex, styleName, unit, null, null, null);
	    };
	    BindingRecord.createForTextNode = function (ast, elementIndex) {
	        return new BindingRecord(TEXT_NODE, 0, ast, elementIndex, null, null, null, null, null);
	    };
	    return BindingRecord;
	})();
	exports.BindingRecord = BindingRecord;
	//# sourceMappingURL=binding_record.js.map

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var abstract_change_detector_1 = __webpack_require__(103);
	var change_detection_util_1 = __webpack_require__(44);
	var proto_record_1 = __webpack_require__(46);
	/**
	 * The code generator takes a list of proto records and creates a function/class
	 * that "emulates" what the developer would write by hand to implement the same
	 * kind of behaviour.
	 *
	 * This code should be kept in sync with the Dart transformer's
	 * `angular2.transform.template_compiler.change_detector_codegen` library. If you make updates
	 * here, please make equivalent changes there.
	*/
	var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
	var UTIL = "ChangeDetectionUtil";
	var DISPATCHER_ACCESSOR = "this.dispatcher";
	var PIPES_ACCESSOR = "this.pipes";
	var PROTOS_ACCESSOR = "this.protos";
	var DIRECTIVES_ACCESSOR = "this.directiveRecords";
	var CONTEXT_ACCESSOR = "this.context";
	var IS_CHANGED_LOCAL = "isChanged";
	var CHANGES_LOCAL = "changes";
	var LOCALS_ACCESSOR = "this.locals";
	var MODE_ACCESSOR = "this.mode";
	var CURRENT_PROTO = "this.currentProto";
	var ALREADY_CHECKED_ACCESSOR = "this.alreadyChecked";
	var ChangeDetectorJITGenerator = (function () {
	    function ChangeDetectorJITGenerator(id, changeDetectionStrategy, records, directiveRecords) {
	        this.id = id;
	        this.changeDetectionStrategy = changeDetectionStrategy;
	        this.records = records;
	        this.directiveRecords = directiveRecords;
	        this._localNames = this._getLocalNames(records);
	        this._changeNames = this._getChangeNames(this._localNames);
	        this._fieldNames = this._getFieldNames(this._localNames);
	        this._pipeNames = this._getPipeNames(this._localNames);
	    }
	    ChangeDetectorJITGenerator.prototype._getLocalNames = function (records) {
	        var index = 0;
	        var names = records.map(function (r) { return _sanitizeName("" + r.name + index++); });
	        return ["context"].concat(names);
	    };
	    ChangeDetectorJITGenerator.prototype._getChangeNames = function (_localNames) {
	        return _localNames.map(function (n) { return ("change_" + n); });
	    };
	    ChangeDetectorJITGenerator.prototype._getFieldNames = function (_localNames) {
	        return _localNames.map(function (n) { return ("this." + n); });
	    };
	    ChangeDetectorJITGenerator.prototype._getPipeNames = function (_localNames) {
	        return _localNames.map(function (n) { return ("this." + n + "_pipe"); });
	    };
	    ChangeDetectorJITGenerator.prototype.generate = function () {
	        var _this = this;
	        var typeName = _sanitizeName("ChangeDetector_" + this.id);
	        var classDefinition = "\n      var " + typeName + " = function " + typeName + "(dispatcher, protos, directiveRecords) {\n        " + ABSTRACT_CHANGE_DETECTOR + ".call(this, " + JSON.stringify(this.id) + ");\n        " + DISPATCHER_ACCESSOR + " = dispatcher;\n        " + PROTOS_ACCESSOR + " = protos;\n        " + DIRECTIVES_ACCESSOR + " = directiveRecords;\n        " + LOCALS_ACCESSOR + " = null;\n        " + CURRENT_PROTO + " = null;\n        " + PIPES_ACCESSOR + " = null;\n        " + ALREADY_CHECKED_ACCESSOR + " = false;\n        " + this._genFieldDefinitions() + "\n      }\n\n      " + typeName + ".prototype = Object.create(" + ABSTRACT_CHANGE_DETECTOR + ".prototype);\n\n      " + typeName + ".prototype.detectChangesInRecords = function(throwOnChange) {\n        if (!this.hydrated()) {\n          " + UTIL + ".throwDehydrated();\n        }\n        try {\n          this.__detectChangesInRecords(throwOnChange);\n        } catch (e) {\n          this.throwError(" + CURRENT_PROTO + ", e, e.stack);\n        }\n      }\n\n      " + typeName + ".prototype.__detectChangesInRecords = function(throwOnChange) {\n        " + CURRENT_PROTO + " = null;\n\n        " + this._genLocalDefinitions() + "\n        " + this._genChangeDefinitions() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CHANGES_LOCAL + " = null;\n\n        context = " + CONTEXT_ACCESSOR + ";\n\n        " + this.records.map(function (r) { return _this._genRecord(r); }).join("\n") + "\n\n        " + ALREADY_CHECKED_ACCESSOR + " = true;\n      }\n\n      " + typeName + ".prototype.callOnAllChangesDone = function() {\n        " + this._genCallOnAllChangesDoneBody() + "\n      }\n\n      " + typeName + ".prototype.hydrate = function(context, locals, directives, pipes) {\n        " + MODE_ACCESSOR + " = \"" + change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeDetectionStrategy) + "\";\n        " + CONTEXT_ACCESSOR + " = context;\n        " + LOCALS_ACCESSOR + " = locals;\n        " + this._genHydrateDirectives() + "\n        " + this._genHydrateDetectors() + "\n        " + PIPES_ACCESSOR + " = pipes;\n        " + ALREADY_CHECKED_ACCESSOR + " = false;\n      }\n\n      " + typeName + ".prototype.dehydrate = function() {\n        " + this._genPipeOnDestroy() + "\n        " + this._genFieldDefinitions() + "\n        " + LOCALS_ACCESSOR + " = null;\n        " + PIPES_ACCESSOR + " = null;\n      }\n\n      " + typeName + ".prototype.hydrated = function() {\n        return " + CONTEXT_ACCESSOR + " !== null;\n      }\n\n      return function(dispatcher) {\n        return new " + typeName + "(dispatcher, protos, directiveRecords);\n      }\n    ";
	        return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', 'directiveRecords', classDefinition)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, this.records, this.directiveRecords);
	    };
	    ChangeDetectorJITGenerator.prototype._genGetDirectiveFieldNames = function () {
	        var _this = this;
	        return this.directiveRecords.map(function (d) { return _this._genGetDirective(d.directiveIndex); });
	    };
	    ChangeDetectorJITGenerator.prototype._genGetDetectorFieldNames = function () {
	        var _this = this;
	        return this.directiveRecords.filter(function (r) { return r.isOnPushChangeDetection(); })
	            .map(function (d) { return _this._genGetDetector(d.directiveIndex); });
	    };
	    ChangeDetectorJITGenerator.prototype._genGetDirective = function (d) { return "this.directive_" + d.name; };
	    ChangeDetectorJITGenerator.prototype._genGetDetector = function (d) { return "this.detector_" + d.name; };
	    ChangeDetectorJITGenerator.prototype._getNonNullPipeNames = function () {
	        var _this = this;
	        var pipes = [];
	        this.records.forEach(function (r) {
	            if (r.isPipeRecord()) {
	                pipes.push(_this._pipeNames[r.selfIndex]);
	            }
	        });
	        return pipes;
	    };
	    ChangeDetectorJITGenerator.prototype._genFieldDefinitions = function () {
	        var fields = [];
	        fields = fields.concat(this._fieldNames);
	        fields = fields.concat(this._getNonNullPipeNames());
	        fields = fields.concat(this._genGetDirectiveFieldNames());
	        fields = fields.concat(this._genGetDetectorFieldNames());
	        return fields.map(function (n) {
	            return n == CONTEXT_ACCESSOR ? n + " = null;" :
	                n + " = " + UTIL + ".uninitialized();";
	        })
	            .join("\n");
	    };
	    ChangeDetectorJITGenerator.prototype._genHydrateDirectives = function () {
	        var directiveFieldNames = this._genGetDirectiveFieldNames();
	        var lines = collection_1.ListWrapper.createFixedSize(directiveFieldNames.length);
	        for (var i = 0, iLen = directiveFieldNames.length; i < iLen; ++i) {
	            lines[i] =
	                directiveFieldNames[i] + " = directives.getDirectiveFor(" + DIRECTIVES_ACCESSOR + "[" + i + "].directiveIndex);";
	        }
	        return lines.join('\n');
	    };
	    ChangeDetectorJITGenerator.prototype._genHydrateDetectors = function () {
	        var detectorFieldNames = this._genGetDetectorFieldNames();
	        var lines = collection_1.ListWrapper.createFixedSize(detectorFieldNames.length);
	        for (var i = 0, iLen = detectorFieldNames.length; i < iLen; ++i) {
	            lines[i] = detectorFieldNames[i] + " =\n          directives.getDetectorFor(" + DIRECTIVES_ACCESSOR + "[" + i + "].directiveIndex);";
	        }
	        return lines.join('\n');
	    };
	    ChangeDetectorJITGenerator.prototype._genPipeOnDestroy = function () {
	        return this._getNonNullPipeNames().map(function (p) { return (p + ".onDestroy();"); }).join("\n");
	    };
	    ChangeDetectorJITGenerator.prototype._genCallOnAllChangesDoneBody = function () {
	        var notifications = [];
	        var dirs = this.directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callOnAllChangesDone) {
	                notifications.push(this._genGetDirective(dir.directiveIndex) + ".onAllChangesDone();");
	            }
	        }
	        var directiveNotifications = notifications.join("\n");
	        return "\n      this.dispatcher.notifyOnAllChangesDone();\n      " + directiveNotifications + "\n    ";
	    };
	    ChangeDetectorJITGenerator.prototype._genLocalDefinitions = function () { return this._localNames.map(function (n) { return ("var " + n + ";"); }).join("\n"); };
	    ChangeDetectorJITGenerator.prototype._genChangeDefinitions = function () {
	        return this._changeNames.map(function (n) { return ("var " + n + " = false;"); }).join("\n");
	    };
	    ChangeDetectorJITGenerator.prototype._genRecord = function (r) {
	        var rec;
	        if (r.isLifeCycleRecord()) {
	            rec = this._genDirectiveLifecycle(r);
	        }
	        else if (r.isPipeRecord()) {
	            rec = this._genPipeCheck(r);
	        }
	        else {
	            rec = this._genReferenceCheck(r);
	        }
	        return "" + rec + this._maybeGenLastInDirective(r);
	    };
	    ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function (r) {
	        if (r.name === "onCheck") {
	            return this._genOnCheck(r);
	        }
	        else if (r.name === "onInit") {
	            return this._genOnInit(r);
	        }
	        else if (r.name === "onChange") {
	            return this._genOnChange(r);
	        }
	        else {
	            throw new lang_1.BaseException("Unknown lifecycle event '" + r.name + "'");
	        }
	    };
	    ChangeDetectorJITGenerator.prototype._genPipeCheck = function (r) {
	        var _this = this;
	        var context = this._localNames[r.contextIndex];
	        var argString = r.args.map(function (arg) { return _this._localNames[arg]; }).join(", ");
	        var oldValue = this._fieldNames[r.selfIndex];
	        var newValue = this._localNames[r.selfIndex];
	        var change = this._changeNames[r.selfIndex];
	        var pipe = this._pipeNames[r.selfIndex];
	        var cdRef = "this.ref";
	        var protoIndex = r.selfIndex - 1;
	        var pipeType = r.name;
	        return "\n      " + CURRENT_PROTO + " = " + PROTOS_ACCESSOR + "[" + protoIndex + "];\n      if (" + pipe + " === " + UTIL + ".uninitialized()) {\n        " + pipe + " = " + PIPES_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + cdRef + ");\n      } else if (!" + pipe + ".supports(" + context + ")) {\n        " + pipe + ".onDestroy();\n        " + pipe + " = " + PIPES_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + cdRef + ");\n      }\n\n      " + newValue + " = " + pipe + ".transform(" + context + ", [" + argString + "]);\n      if (" + oldValue + " !== " + newValue + ") {\n        " + newValue + " = " + UTIL + ".unwrapValue(" + newValue + ");\n        " + change + " = true;\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
	    };
	    ChangeDetectorJITGenerator.prototype._genReferenceCheck = function (r) {
	        var _this = this;
	        var oldValue = this._fieldNames[r.selfIndex];
	        var newValue = this._localNames[r.selfIndex];
	        var protoIndex = r.selfIndex - 1;
	        var check = "\n      " + CURRENT_PROTO + " = " + PROTOS_ACCESSOR + "[" + protoIndex + "];\n      " + this._genUpdateCurrentValue(r) + "\n      if (" + newValue + " !== " + oldValue + ") {\n        " + this._changeNames[r.selfIndex] + " = true;\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
	        if (r.isPureFunction()) {
	            var condition = r.args.map(function (a) { return _this._changeNames[a]; }).join(" || ");
	            return "if (" + condition + ") { " + check + " } else { " + newValue + " = " + oldValue + "; }";
	        }
	        else {
	            return check;
	        }
	    };
	    ChangeDetectorJITGenerator.prototype._genUpdateCurrentValue = function (r) {
	        var _this = this;
	        var context = (r.contextIndex == -1) ? this._genGetDirective(r.directiveIndex) :
	            this._localNames[r.contextIndex];
	        var newValue = this._localNames[r.selfIndex];
	        var argString = r.args.map(function (arg) { return _this._localNames[arg]; }).join(", ");
	        var rhs;
	        switch (r.mode) {
	            case proto_record_1.RecordType.SELF:
	                rhs = context;
	                break;
	            case proto_record_1.RecordType.CONST:
	                rhs = JSON.stringify(r.funcOrValue);
	                break;
	            case proto_record_1.RecordType.PROPERTY:
	                rhs = context + "." + r.name;
	                break;
	            case proto_record_1.RecordType.SAFE_PROPERTY:
	                rhs = UTIL + ".isValueBlank(" + context + ") ? null : " + context + "." + r.name;
	                break;
	            case proto_record_1.RecordType.LOCAL:
	                rhs = LOCALS_ACCESSOR + ".get('" + r.name + "')";
	                break;
	            case proto_record_1.RecordType.INVOKE_METHOD:
	                rhs = context + "." + r.name + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.SAFE_INVOKE_METHOD:
	                rhs = UTIL + ".isValueBlank(" + context + ") ? null : " + context + "." + r.name + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.INVOKE_CLOSURE:
	                rhs = context + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.PRIMITIVE_OP:
	                rhs = UTIL + "." + r.name + "(" + argString + ")";
	                break;
	            case proto_record_1.RecordType.INTERPOLATE:
	                rhs = this._genInterpolation(r);
	                break;
	            case proto_record_1.RecordType.KEYED_ACCESS:
	                rhs = context + "[" + this._localNames[r.args[0]] + "]";
	                break;
	            default:
	                throw new lang_1.BaseException("Unknown operation " + r.mode);
	        }
	        return newValue + " = " + rhs;
	    };
	    ChangeDetectorJITGenerator.prototype._genInterpolation = function (r) {
	        var res = "";
	        for (var i = 0; i < r.args.length; ++i) {
	            res += JSON.stringify(r.fixedArgs[i]);
	            res += " + ";
	            res += this._localNames[r.args[i]];
	            res += " + ";
	        }
	        res += JSON.stringify(r.fixedArgs[r.args.length]);
	        return res;
	    };
	    ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function (r) {
	        if (!r.lastInBinding)
	            return "";
	        var newValue = this._localNames[r.selfIndex];
	        var oldValue = this._fieldNames[r.selfIndex];
	        var br = r.bindingRecord;
	        if (br.isDirective()) {
	            var directiveProperty = this._genGetDirective(br.directiveRecord.directiveIndex) + "." + br.propertyName;
	            return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        " + directiveProperty + " = " + newValue + ";\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
	        }
	        else {
	            return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        " + DISPATCHER_ACCESSOR + ".notifyOnBinding(" + CURRENT_PROTO + ".bindingRecord, " + newValue + ");\n      ";
	        }
	    };
	    ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function (oldValue, newValue) {
	        return "\n      if(throwOnChange) {\n        " + UTIL + ".throwOnChange(" + CURRENT_PROTO + ", " + UTIL + ".simpleChange(" + oldValue + ", " + newValue + "));\n      }\n      ";
	    };
	    ChangeDetectorJITGenerator.prototype._genAddToChanges = function (r) {
	        var newValue = this._localNames[r.selfIndex];
	        var oldValue = this._fieldNames[r.selfIndex];
	        if (!r.bindingRecord.callOnChange())
	            return "";
	        return "\n      " + CHANGES_LOCAL + " = " + UTIL + ".addChange(\n          " + CHANGES_LOCAL + ", " + CURRENT_PROTO + ".bindingRecord.propertyName,\n          " + UTIL + ".simpleChange(" + oldValue + ", " + newValue + "));\n    ";
	    };
	    ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function (r) {
	        if (!r.lastInDirective)
	            return "";
	        return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
	    };
	    ChangeDetectorJITGenerator.prototype._genOnCheck = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange) " + this._genGetDirective(br.directiveRecord.directiveIndex) + ".onCheck();";
	    };
	    ChangeDetectorJITGenerator.prototype._genOnInit = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange && !" + ALREADY_CHECKED_ACCESSOR + ") " + this._genGetDirective(br.directiveRecord.directiveIndex) + ".onInit();";
	    };
	    ChangeDetectorJITGenerator.prototype._genOnChange = function (r) {
	        var br = r.bindingRecord;
	        return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._genGetDirective(br.directiveRecord.directiveIndex) + ".onChange(" + CHANGES_LOCAL + ");";
	    };
	    ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function (r) {
	        var br = r.bindingRecord;
	        if (!r.lastInDirective || !br.isOnPushChangeDetection())
	            return "";
	        var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._genGetDetector(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
	        return retVal;
	    };
	    return ChangeDetectorJITGenerator;
	})();
	exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
	function _sanitizeName(s) {
	    return s.replace(new RegExp("\\W", "g"), '');
	}
	//# sourceMappingURL=change_detection_jit_generator.js.map

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var change_detection_jit_generator_1 = __webpack_require__(167);
	var coalesce_1 = __webpack_require__(106);
	var proto_change_detector_1 = __webpack_require__(63);
	var JitProtoChangeDetector = (function () {
	    function JitProtoChangeDetector(definition) {
	        this.definition = definition;
	        this._factory = this._createFactory(definition);
	    }
	    JitProtoChangeDetector.isSupported = function () { return true; };
	    JitProtoChangeDetector.prototype.instantiate = function (dispatcher) { return this._factory(dispatcher); };
	    JitProtoChangeDetector.prototype._createFactory = function (definition) {
	        var recordBuilder = new proto_change_detector_1.ProtoRecordBuilder();
	        collection_1.ListWrapper.forEach(definition.bindingRecords, function (b) { recordBuilder.add(b, definition.variableNames); });
	        var records = coalesce_1.coalesce(recordBuilder.records);
	        return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition.id, definition.strategy, records, this.definition.directiveRecords)
	            .generate();
	    };
	    return JitProtoChangeDetector;
	})();
	exports.JitProtoChangeDetector = JitProtoChangeDetector;
	//# sourceMappingURL=jit_proto_change_detector.js.map

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var Locals = (function () {
	    function Locals(parent, current) {
	        this.parent = parent;
	        this.current = current;
	    }
	    Locals.prototype.contains = function (name) {
	        if (this.current.has(name)) {
	            return true;
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.contains(name);
	        }
	        return false;
	    };
	    Locals.prototype.get = function (name) {
	        if (this.current.has(name)) {
	            return this.current.get(name);
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.get(name);
	        }
	        throw new lang_1.BaseException("Cannot find '" + name + "'");
	    };
	    Locals.prototype.set = function (name, value) {
	        // TODO(rado): consider removing this check if we can guarantee this is not
	        // exposed to the public API.
	        // TODO: vsavkin maybe it should check only the local map
	        if (this.current.has(name)) {
	            this.current.set(name, value);
	        }
	        else {
	            throw new lang_1.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
	        }
	    };
	    Locals.prototype.clearValues = function () { collection_1.MapWrapper.clearValues(this.current); };
	    return Locals;
	})();
	exports.Locals = Locals;
	//# sourceMappingURL=locals.js.map

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(50);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var lexer_1 = __webpack_require__(110);
	var reflection_1 = __webpack_require__(9);
	var ast_1 = __webpack_require__(61);
	var _implicitReceiver = new ast_1.ImplicitReceiver();
	// TODO(tbosch): Cannot make this const/final right now because of the transpiler...
	var INTERPOLATION_REGEXP = /\{\{(.*?)\}\}/g;
	var Parser = (function () {
	    function Parser(_lexer, providedReflector) {
	        if (providedReflector === void 0) { providedReflector = null; }
	        this._lexer = _lexer;
	        this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
	    }
	    Parser.prototype.parseAction = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseBinding = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseSimpleBinding = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseSimpleBinding();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseTemplateBindings = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
	    };
	    Parser.prototype.parseInterpolation = function (input, location) {
	        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var strings = [];
	        var expressions = [];
	        for (var i = 0; i < parts.length; i++) {
	            var part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                strings.push(part);
	            }
	            else {
	                var tokens = this._lexer.tokenize(part);
	                var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	                expressions.push(ast);
	            }
	        }
	        return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
	    };
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
	    };
	    Parser = __decorate([
	        decorators_1.Injectable(), 
	        __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])
	    ], Parser);
	    return Parser;
	})();
	exports.Parser = Parser;
	var _ParseAST = (function () {
	    function _ParseAST(input, location, tokens, reflector, parseAction) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.reflector = reflector;
	        this.parseAction = parseAction;
	        this.index = 0;
	    }
	    _ParseAST.prototype.peek = function (offset) {
	        var i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        get: function () { return this.peek(0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index : this.input.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _ParseAST.prototype.advance = function () { this.index++; };
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.optionalKeywordVar = function () {
	        if (this.peekKeywordVar()) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.peekKeywordVar = function () { return this.next.isKeywordVar() || this.next.isOperator('#'); };
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code))
	            return;
	        this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
	    };
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.parseChain = function () {
	        var exprs = [];
	        while (this.index < this.tokens.length) {
	            var expr = this.parsePipe();
	            exprs.push(expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error("Binding expression cannot contain chained expression");
	                }
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    _ParseAST.prototype.parseSimpleBinding = function () {
	        var ast = this.parseChain();
	        if (!SimpleExpressionChecker.check(ast)) {
	            this.error("Simple binding expression can only contain field access and constants'");
	        }
	        return ast;
	    };
	    _ParseAST.prototype.parsePipe = function () {
	        var result = this.parseExpression();
	        if (this.optionalOperator("|")) {
	            if (this.parseAction) {
	                this.error("Cannot have a pipe in an action expression");
	            }
	            do {
	                var name = this.expectIdentifierOrKeyword();
	                var args = [];
	                while (this.optionalCharacter(lexer_1.$COLON)) {
	                    args.push(this.parsePipe());
	                }
	                result = new ast_1.BindingPipe(result, name, args);
	            } while (this.optionalOperator("|"));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseExpression = function () {
	        var start = this.inputIndex;
	        var result = this.parseConditional();
	        while (this.next.isOperator('=')) {
	            if (!result.isAssignable) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Expression " + expression + " is not assignable");
	            }
	            if (!this.parseAction) {
	                this.error("Binding expression cannot contain assignments");
	            }
	            this.expectOperator('=');
	            result = new ast_1.Assignment(result, this.parseConditional());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseConditional = function () {
	        var start = this.inputIndex;
	        var result = this.parseLogicalOr();
	        if (this.optionalOperator('?')) {
	            var yes = this.parsePipe();
	            if (!this.optionalCharacter(lexer_1.$COLON)) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	            }
	            var no = this.parsePipe();
	            return new ast_1.Conditional(result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var result = this.parseLogicalAnd();
	        while (this.optionalOperator('||')) {
	            result = new ast_1.Binary('||', result, this.parseLogicalAnd());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var result = this.parseEquality();
	        while (this.optionalOperator('&&')) {
	            result = new ast_1.Binary('&&', result, this.parseEquality());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var result = this.parseRelational();
	        while (true) {
	            if (this.optionalOperator('==')) {
	                result = new ast_1.Binary('==', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('===')) {
	                result = new ast_1.Binary('===', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!=')) {
	                result = new ast_1.Binary('!=', result, this.parseRelational());
	            }
	            else if (this.optionalOperator('!==')) {
	                result = new ast_1.Binary('!==', result, this.parseRelational());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var result = this.parseAdditive();
	        while (true) {
	            if (this.optionalOperator('<')) {
	                result = new ast_1.Binary('<', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>')) {
	                result = new ast_1.Binary('>', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('<=')) {
	                result = new ast_1.Binary('<=', result, this.parseAdditive());
	            }
	            else if (this.optionalOperator('>=')) {
	                result = new ast_1.Binary('>=', result, this.parseAdditive());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var result = this.parseMultiplicative();
	        while (true) {
	            if (this.optionalOperator('+')) {
	                result = new ast_1.Binary('+', result, this.parseMultiplicative());
	            }
	            else if (this.optionalOperator('-')) {
	                result = new ast_1.Binary('-', result, this.parseMultiplicative());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var result = this.parsePrefix();
	        while (true) {
	            if (this.optionalOperator('*')) {
	                result = new ast_1.Binary('*', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('%')) {
	                result = new ast_1.Binary('%', result, this.parsePrefix());
	            }
	            else if (this.optionalOperator('/')) {
	                result = new ast_1.Binary('/', result, this.parsePrefix());
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.optionalOperator('+')) {
	            return this.parsePrefix();
	        }
	        else if (this.optionalOperator('-')) {
	            return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
	        }
	        else if (this.optionalOperator('!')) {
	            return new ast_1.PrefixNot(this.parsePrefix());
	        }
	        else {
	            return this.parseCallChain();
	        }
	    };
	    _ParseAST.prototype.parseCallChain = function () {
	        var result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter(lexer_1.$PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result, false);
	            }
	            else if (this.optionalOperator('?.')) {
	                result = this.parseAccessMemberOrMethodCall(result, true);
	            }
	            else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	                var key = this.parsePipe();
	                this.expectCharacter(lexer_1.$RBRACKET);
	                result = new ast_1.KeyedAccess(result, key);
	            }
	            else if (this.optionalCharacter(lexer_1.$LPAREN)) {
	                var args = this.parseCallArguments();
	                this.expectCharacter(lexer_1.$RPAREN);
	                result = new ast_1.FunctionCall(result, args);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrimary = function () {
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var result = this.parsePipe();
	            this.expectCharacter(lexer_1.$RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(null);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(false);
	        }
	        else if (this.parseAction && this.next.isKeywordIf()) {
	            this.advance();
	            this.expectCharacter(lexer_1.$LPAREN);
	            var condition = this.parseExpression();
	            this.expectCharacter(lexer_1.$RPAREN);
	            var ifExp = this.parseExpressionOrBlock();
	            var elseExp;
	            if (this.next.isKeywordElse()) {
	                this.advance();
	                elseExp = this.parseExpressionOrBlock();
	            }
	            return new ast_1.If(condition, ifExp, elseExp);
	        }
	        else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	            var elements = this.parseExpressionList(lexer_1.$RBRACKET);
	            this.expectCharacter(lexer_1.$RBRACKET);
	            return new ast_1.LiteralArray(elements);
	        }
	        else if (this.next.isCharacter(lexer_1.$LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
	        }
	        else if (this.next.isNumber()) {
	            var value = this.next.toNumber();
	            this.advance();
	            return new ast_1.LiteralPrimitive(value);
	        }
	        else if (this.next.isString()) {
	            var literalValue = this.next.toString();
	            this.advance();
	            return new ast_1.LiteralPrimitive(literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	        }
	        // error() throws, so we don't reach here.
	        throw new lang_1.BaseException("Fell through all cases in parsePrimary");
	    };
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                result.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var keys = [];
	        var values = [];
	        this.expectCharacter(lexer_1.$LBRACE);
	        if (!this.optionalCharacter(lexer_1.$RBRACE)) {
	            do {
	                var key = this.expectIdentifierOrKeywordOrString();
	                keys.push(key);
	                this.expectCharacter(lexer_1.$COLON);
	                values.push(this.parsePipe());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	            this.expectCharacter(lexer_1.$RBRACE);
	        }
	        return new ast_1.LiteralMap(keys, values);
	    };
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	        if (isSafe === void 0) { isSafe = false; }
	        var id = this.expectIdentifierOrKeyword();
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var args = this.parseCallArguments();
	            this.expectCharacter(lexer_1.$RPAREN);
	            var fn = this.reflector.method(id);
	            return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) :
	                new ast_1.MethodCall(receiver, id, fn, args);
	        }
	        else {
	            var getter = this.reflector.getter(id);
	            var setter = this.reflector.setter(id);
	            return isSafe ? new ast_1.SafeAccessMember(receiver, id, getter, setter) :
	                new ast_1.AccessMember(receiver, id, getter, setter);
	        }
	    };
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter(lexer_1.$RPAREN))
	            return [];
	        var positionals = [];
	        do {
	            positionals.push(this.parsePipe());
	        } while (this.optionalCharacter(lexer_1.$COMMA));
	        return positionals;
	    };
	    _ParseAST.prototype.parseExpressionOrBlock = function () {
	        if (this.optionalCharacter(lexer_1.$LBRACE)) {
	            var block = this.parseBlockContent();
	            this.expectCharacter(lexer_1.$RBRACE);
	            return block;
	        }
	        return this.parseExpression();
	    };
	    _ParseAST.prototype.parseBlockContent = function () {
	        if (!this.parseAction) {
	            this.error("Binding expression cannot contain chained expression");
	        }
	        var exprs = [];
	        while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
	            var expr = this.parseExpression();
	            exprs.push(expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                } // read all semicolons
	            }
	        }
	        if (exprs.length == 0)
	            return new ast_1.EmptyExpr();
	        if (exprs.length == 1)
	            return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var result = '';
	        var operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var bindings = [];
	        var prefix = null;
	        while (this.index < this.tokens.length) {
	            var keyIsVar = this.optionalKeywordVar();
	            var key = this.expectTemplateBindingKey();
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                }
	                else {
	                    key = prefix + '-' + key;
	                }
	            }
	            this.optionalCharacter(lexer_1.$COLON);
	            var name = null;
	            var expression = null;
	            if (keyIsVar) {
	                if (this.optionalOperator("=")) {
	                    name = this.expectTemplateBindingKey();
	                }
	                else {
	                    name = '\$implicit';
	                }
	            }
	            else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
	                var start = this.inputIndex;
	                var ast = this.parsePipe();
	                var source = this.input.substring(start, this.inputIndex);
	                expression = new ast_1.ASTWithSource(ast, source, this.location);
	            }
	            bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
	            if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                this.optionalCharacter(lexer_1.$COMMA);
	            }
	        }
	        return bindings;
	    };
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        if (lang_1.isBlank(index))
	            index = this.index;
	        var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	        throw new lang_1.BaseException("Parser Error: " + message + " " + location + " [" + this.input + "] in " + this.location);
	    };
	    return _ParseAST;
	})();
	var SimpleExpressionChecker = (function () {
	    function SimpleExpressionChecker() {
	        this.simple = true;
	    }
	    SimpleExpressionChecker.check = function (ast) {
	        var s = new SimpleExpressionChecker();
	        ast.visit(s);
	        return s.simple;
	    };
	    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast) { };
	    SimpleExpressionChecker.prototype.visitInterpolation = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast) { };
	    SimpleExpressionChecker.prototype.visitAccessMember = function (ast) { };
	    SimpleExpressionChecker.prototype.visitSafeAccessMember = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitMethodCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast) { this.visitAll(ast.expressions); };
	    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast) { this.visitAll(ast.values); };
	    SimpleExpressionChecker.prototype.visitBinary = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitConditional = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitPipe = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitKeyedAccess = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    SimpleExpressionChecker.prototype.visitChain = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitAssignment = function (ast) { this.simple = false; };
	    SimpleExpressionChecker.prototype.visitIf = function (ast) { this.simple = false; };
	    return SimpleExpressionChecker;
	})();
	//# sourceMappingURL=parser.js.map

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var PregenProtoChangeDetector = (function () {
	    function PregenProtoChangeDetector() {
	    }
	    PregenProtoChangeDetector.isSupported = function () { return false; };
	    PregenProtoChangeDetector.prototype.instantiate = function (dispatcher) {
	        throw new lang_1.BaseException('Pregen change detection not supported in Js');
	    };
	    return PregenProtoChangeDetector;
	})();
	exports.PregenProtoChangeDetector = PregenProtoChangeDetector;
	//# sourceMappingURL=pregen_proto_change_detector.js.map

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var di_1 = __webpack_require__(3);
	var lang_1 = __webpack_require__(1);
	var browser_adapter_1 = __webpack_require__(181);
	var dom_adapter_1 = __webpack_require__(6);
	var compiler_1 = __webpack_require__(64);
	var reflection_1 = __webpack_require__(9);
	var change_detection_1 = __webpack_require__(12);
	var exception_handler_1 = __webpack_require__(134);
	var view_loader_1 = __webpack_require__(87);
	var style_url_resolver_1 = __webpack_require__(86);
	var style_inliner_1 = __webpack_require__(152);
	var view_resolver_1 = __webpack_require__(133);
	var directive_resolver_1 = __webpack_require__(66);
	var collection_1 = __webpack_require__(2);
	var async_1 = __webpack_require__(5);
	var ng_zone_1 = __webpack_require__(135);
	var life_cycle_1 = __webpack_require__(175);
	var shadow_dom_strategy_1 = __webpack_require__(33);
	var emulated_unscoped_shadow_dom_strategy_1 = __webpack_require__(89);
	var xhr_1 = __webpack_require__(58);
	var xhr_impl_1 = __webpack_require__(210);
	var event_manager_1 = __webpack_require__(57);
	var key_events_1 = __webpack_require__(201);
	var hammer_gestures_1 = __webpack_require__(200);
	var component_url_mapper_1 = __webpack_require__(65);
	var url_resolver_1 = __webpack_require__(42);
	var app_root_url_1 = __webpack_require__(98);
	var dynamic_component_loader_1 = __webpack_require__(126);
	var testability_1 = __webpack_require__(177);
	var view_pool_1 = __webpack_require__(132);
	var view_manager_1 = __webpack_require__(49);
	var view_manager_utils_1 = __webpack_require__(131);
	var view_listener_1 = __webpack_require__(130);
	var proto_view_factory_1 = __webpack_require__(127);
	var api_1 = __webpack_require__(7);
	var dom_renderer_1 = __webpack_require__(88);
	var compiler_2 = __webpack_require__(193);
	var view_ref_1 = __webpack_require__(21);
	var application_tokens_1 = __webpack_require__(48);
	var _rootInjector;
	// Contains everything that is safe to share between applications.
	var _rootBindings = [di_1.bind(reflection_1.Reflector).toValue(reflection_1.reflector), testability_1.TestabilityRegistry];
	function _injectorBindings(appComponentType) {
	    var bestChangeDetection = change_detection_1.DynamicChangeDetection;
	    if (change_detection_1.PreGeneratedChangeDetection.isSupported()) {
	        bestChangeDetection = change_detection_1.PreGeneratedChangeDetection;
	    }
	    else if (change_detection_1.JitChangeDetection.isSupported()) {
	        bestChangeDetection = change_detection_1.JitChangeDetection;
	    }
	    return [
	        di_1.bind(dom_renderer_1.DOCUMENT_TOKEN)
	            .toValue(dom_adapter_1.DOM.defaultDoc()),
	        di_1.bind(dom_renderer_1.DOM_REFLECT_PROPERTIES_AS_ATTRIBUTES).toValue(false),
	        di_1.bind(application_tokens_1.appComponentTypeToken).toValue(appComponentType),
	        di_1.bind(application_tokens_1.appComponentRefPromiseToken)
	            .toFactory(function (dynamicComponentLoader, injector, testability, registry) {
	            // TODO(rado): investigate whether to support bindings on root component.
	            return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector)
	                .then(function (componentRef) {
	                registry.registerApplication(componentRef.location.nativeElement, testability);
	                return componentRef;
	            });
	        }, [dynamic_component_loader_1.DynamicComponentLoader, di_1.Injector, testability_1.Testability, testability_1.TestabilityRegistry]),
	        di_1.bind(appComponentType)
	            .toFactory(function (p) { return p.then(function (ref) { return ref.instance; }); }, [application_tokens_1.appComponentRefPromiseToken]),
	        di_1.bind(life_cycle_1.LifeCycle)
	            .toFactory(function (exceptionHandler) { return new life_cycle_1.LifeCycle(exceptionHandler, null, lang_1.assertionsEnabled()); }, [exception_handler_1.ExceptionHandler]),
	        di_1.bind(event_manager_1.EventManager)
	            .toFactory(function (ngZone) {
	            var plugins = [new hammer_gestures_1.HammerGesturesPlugin(), new key_events_1.KeyEventsPlugin(), new event_manager_1.DomEventsPlugin()];
	            return new event_manager_1.EventManager(plugins, ngZone);
	        }, [ng_zone_1.NgZone]),
	        di_1.bind(shadow_dom_strategy_1.ShadowDomStrategy)
	            .toFactory(function (doc) { return new emulated_unscoped_shadow_dom_strategy_1.EmulatedUnscopedShadowDomStrategy(doc.head); }, [dom_renderer_1.DOCUMENT_TOKEN]),
	        dom_renderer_1.DomRenderer,
	        compiler_2.DefaultDomCompiler,
	        di_1.bind(api_1.Renderer).toAlias(dom_renderer_1.DomRenderer),
	        di_1.bind(api_1.RenderCompiler).toAlias(compiler_2.DefaultDomCompiler),
	        proto_view_factory_1.ProtoViewFactory,
	        view_pool_1.AppViewPool,
	        di_1.bind(view_pool_1.APP_VIEW_POOL_CAPACITY).toValue(10000),
	        view_manager_1.AppViewManager,
	        view_manager_utils_1.AppViewManagerUtils,
	        view_listener_1.AppViewListener,
	        compiler_1.Compiler,
	        compiler_1.CompilerCache,
	        view_resolver_1.ViewResolver,
	        di_1.bind(change_detection_1.Pipes).toValue(change_detection_1.defaultPipes),
	        di_1.bind(change_detection_1.ChangeDetection).toClass(bestChangeDetection),
	        view_loader_1.ViewLoader,
	        directive_resolver_1.DirectiveResolver,
	        change_detection_1.Parser,
	        change_detection_1.Lexer,
	        exception_handler_1.ExceptionHandler,
	        di_1.bind(xhr_1.XHR).toValue(new xhr_impl_1.XHRImpl()),
	        component_url_mapper_1.ComponentUrlMapper,
	        url_resolver_1.UrlResolver,
	        style_url_resolver_1.StyleUrlResolver,
	        style_inliner_1.StyleInliner,
	        dynamic_component_loader_1.DynamicComponentLoader,
	        testability_1.Testability,
	        app_root_url_1.AppRootUrl
	    ];
	}
	function _createNgZone(givenReporter) {
	    var defaultErrorReporter = function (exception, stackTrace) {
	        var longStackTrace = collection_1.ListWrapper.join(stackTrace, "\n\n-----async gap-----\n");
	        dom_adapter_1.DOM.logError(exception + "\n\n" + longStackTrace);
	        throw exception;
	    };
	    var reporter = lang_1.isPresent(givenReporter) ? givenReporter : defaultErrorReporter;
	    var zone = new ng_zone_1.NgZone({ enableLongStackTrace: lang_1.assertionsEnabled() });
	    zone.overrideOnErrorHandler(reporter);
	    return zone;
	}
	/**
	 * Bootstrapping for Angular applications.
	 *
	 * You instantiate an Angular application by explicitly specifying a component to use as the root
	 * component for your
	 * application via the `bootstrap()` method.
	 *
	 * ## Simple Example
	 *
	 * Assuming this `index.html`:
	 *
	 * ```html
	 * <html>
	 *   <!-- load Angular script tags here. -->
	 *   <body>
	 *     <my-app>loading...</my-app>
	 *   </body>
	 * </html>
	 * ```
	 *
	 * An application is bootstrapped inside an existing browser DOM, typically `index.html`. Unlike
	 * Angular 1, Angular 2
	 * does not compile/process bindings in `index.html`. This is mainly for security reasons, as well
	 * as architectural
	 * changes in Angular 2. This means that `index.html` can safely be processed using server-side
	 * technologies such as
	 * bindings. Bindings can thus use double-curly `{{ syntax }}` without collision from Angular 2
	 * component double-curly
	 * `{{ syntax }}`.
	 *
	 * We can use this script code:
	 *
	 * ```
	 * @Component({
	 *    selector: 'my-app'
	 * })
	 * @View({
	 *    template: 'Hello {{ name }}!'
	 * })
	 * class MyApp {
	 *   name:string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 *
	 * main() {
	 *   return bootstrap(MyApp);
	 * }
	 * ```
	 *
	 * When the app developer invokes `bootstrap()` with the root component `MyApp` as its argument,
	 * Angular performs the
	 * following tasks:
	 *
	 *  1. It uses the component's `selector` property to locate the DOM element which needs to be
	 * upgraded into
	 *     the angular component.
	 *  2. It creates a new child injector (from the platform injector). Optionally, you can also
	 * override the injector configuration for an app by
	 * invoking `bootstrap` with the `componentInjectableBindings` argument.
	 *  3. It creates a new `Zone` and connects it to the angular application's change detection domain
	 * instance.
	 *  4. It creates a shadow DOM on the selected component's host element and loads the template into
	 * it.
	 *  5. It instantiates the specified component.
	 *  6. Finally, Angular performs change detection to apply the initial data bindings for the
	 * application.
	 *
	 *
	 * ## Instantiating Multiple Applications on a Single Page
	 *
	 * There are two ways to do this.
	 *
	 *
	 * ### Isolated Applications
	 *
	 * Angular creates a new application each time that the `bootstrap()` method is invoked. When
	 * multiple applications
	 * are created for a page, Angular treats each application as independent within an isolated change
	 * detection and
	 * `Zone` domain. If you need to share data between applications, use the strategy described in the
	 * next
	 * section, "Applications That Share Change Detection."
	 *
	 *
	 * ### Applications That Share Change Detection
	 *
	 * If you need to bootstrap multiple applications that share common data, the applications must
	 * share a common
	 * change detection and zone. To do that, create a meta-component that lists the application
	 * components in its template.
	 * By only invoking the `bootstrap()` method once, with the meta-component as its argument, you
	 * ensure that only a
	 * single change detection zone is created and therefore data can be shared across the applications.
	 *
	 *
	 * ## Platform Injector
	 *
	 * When working within a browser window, there are many singleton resources: cookies, title,
	 * location, and others.
	 * Angular services that represent these resources must likewise be shared across all Angular
	 * applications that
	 * occupy the same browser window.  For this reason, Angular creates exactly one global platform
	 * injector which stores
	 * all shared services, and each angular application injector has the platform injector as its
	 * parent.
	 *
	 * Each application has its own private injector as well. When there are multiple applications on a
	 * page, Angular treats
	 * each application injector's services as private to that application.
	 *
	 *
	 * # API
	 * - `appComponentType`: The root component which should act as the application. This is a reference
	 * to a `Type`
	 *   which is annotated with `@Component(...)`.
	 * - `componentInjectableBindings`: An additional set of bindings that can be added to the app
	 * injector
	 * to override default injection behavior.
	 * - `errorReporter`: `function(exception:any, stackTrace:string)` a default error reporter for
	 * unhandled exceptions.
	 *
	 * Returns a `Promise` of {@link ApplicationRef}.
	 */
	function bootstrap(appComponentType, componentInjectableBindings, errorReporter) {
	    if (componentInjectableBindings === void 0) { componentInjectableBindings = null; }
	    if (errorReporter === void 0) { errorReporter = null; }
	    browser_adapter_1.BrowserDomAdapter.makeCurrent();
	    var bootstrapProcess = async_1.PromiseWrapper.completer();
	    var zone = _createNgZone(errorReporter);
	    zone.run(function () {
	        // TODO(rado): prepopulate template cache, so applications with only
	        // index.html and main.js are possible.
	        var appInjector = _createAppInjector(appComponentType, componentInjectableBindings, zone);
	        var compRefToken = async_1.PromiseWrapper.wrap(function () { return appInjector.get(application_tokens_1.appComponentRefPromiseToken); });
	        var tick = function (componentRef) {
	            var appChangeDetector = view_ref_1.internalView(componentRef.hostView).changeDetector;
	            // retrieve life cycle: may have already been created if injected in root component
	            var lc = appInjector.get(life_cycle_1.LifeCycle);
	            lc.registerWith(zone, appChangeDetector);
	            lc.tick(); // the first tick that will bootstrap the app
	            bootstrapProcess.resolve(new ApplicationRef(componentRef, appComponentType, appInjector));
	        };
	        async_1.PromiseWrapper.then(compRefToken, tick, function (err, stackTrace) { return bootstrapProcess.reject(err, stackTrace); });
	    });
	    return bootstrapProcess.promise;
	}
	exports.bootstrap = bootstrap;
	/**
	 * Represents a Angular's representation of an Application.
	 *
	 * `ApplicationRef` represents a running application instance. Use it to retrieve the host
	 * component, injector,
	 * or dispose of an application.
	 */
	var ApplicationRef = (function () {
	    /**
	     * @private
	     */
	    function ApplicationRef(hostComponent, hostComponentType, injector) {
	        this._hostComponent = hostComponent;
	        this._injector = injector;
	        this._hostComponentType = hostComponentType;
	    }
	    Object.defineProperty(ApplicationRef.prototype, "hostComponentType", {
	        /**
	         * Returns the current {@link Component} type.
	         */
	        get: function () { return this._hostComponentType; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef.prototype, "hostComponent", {
	        /**
	         * Returns the current {@link Component} instance.
	         */
	        get: function () { return this._hostComponent.instance; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Dispose (un-load) the application.
	     */
	    ApplicationRef.prototype.dispose = function () {
	        // TODO: We also need to clean up the Zone, ... here!
	        this._hostComponent.dispose();
	    };
	    Object.defineProperty(ApplicationRef.prototype, "injector", {
	        /**
	         * Returns the root application {@link Injector}.
	         */
	        get: function () { return this._injector; },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationRef;
	})();
	exports.ApplicationRef = ApplicationRef;
	function _createAppInjector(appComponentType, bindings, zone) {
	    if (lang_1.isBlank(_rootInjector))
	        _rootInjector = di_1.Injector.resolveAndCreate(_rootBindings);
	    var mergedBindings = lang_1.isPresent(bindings) ? collection_1.ListWrapper.concat(_injectorBindings(appComponentType), bindings) :
	        _injectorBindings(appComponentType);
	    mergedBindings.push(di_1.bind(ng_zone_1.NgZone).toValue(zone));
	    return _rootInjector.resolveAndCreateChild(mergedBindings);
	}
	//# sourceMappingURL=application.js.map

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var annotations_1 = __webpack_require__(47);
	function hasLifecycleHook(e, type, annotation) {
	    if (lang_1.isPresent(annotation.lifecycle)) {
	        return annotation.lifecycle.indexOf(e) !== -1;
	    }
	    else {
	        if (!(type instanceof lang_1.Type))
	            return false;
	        var proto = type.prototype;
	        switch (e) {
	            case annotations_1.LifecycleEvent.onAllChangesDone:
	                return !!proto.onAllChangesDone;
	            case annotations_1.LifecycleEvent.onChange:
	                return !!proto.onChange;
	            case annotations_1.LifecycleEvent.onCheck:
	                return !!proto.onCheck;
	            case annotations_1.LifecycleEvent.onDestroy:
	                return !!proto.onDestroy;
	            case annotations_1.LifecycleEvent.onInit:
	                return !!proto.onInit;
	            default:
	                return false;
	        }
	    }
	}
	exports.hasLifecycleHook = hasLifecycleHook;
	//# sourceMappingURL=directive_lifecycle_reflector.js.map

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var ElementBinder = (function () {
	    function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective) {
	        this.index = index;
	        this.parent = parent;
	        this.distanceToParent = distanceToParent;
	        this.protoElementInjector = protoElementInjector;
	        this.componentDirective = componentDirective;
	        // updated later, so we are able to resolve cycles
	        this.nestedProtoView = null;
	        // updated later when events are bound
	        this.hostListeners = null;
	        if (lang_1.isBlank(index)) {
	            throw new lang_1.BaseException('null index not allowed.');
	        }
	    }
	    ElementBinder.prototype.hasStaticComponent = function () {
	        return lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
	    };
	    ElementBinder.prototype.hasEmbeddedProtoView = function () {
	        return !lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
	    };
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	//# sourceMappingURL=element_binder.js.map

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var exception_handler_1 = __webpack_require__(134);
	var lang_1 = __webpack_require__(1);
	/**
	 * Provides access to explicitly trigger change detection in an application.
	 *
	 * By default, `Zone` triggers change detection in Angular on each virtual machine (VM) turn. When
	 * testing, or in some
	 * limited application use cases, a developer can also trigger change detection with the
	 * `lifecycle.tick()` method.
	 *
	 * Each Angular application has a single `LifeCycle` instance.
	 *
	 * # Example
	 *
	 * This is a contrived example, since the bootstrap automatically runs inside of the `Zone`, which
	 * invokes
	 * `lifecycle.tick()` on your behalf.
	 *
	 * ```javascript
	 * bootstrap(MyApp).then((ref:ComponentRef) => {
	 *   var lifeCycle = ref.injector.get(LifeCycle);
	 *   var myApp = ref.instance;
	 *
	 *   ref.doSomething();
	 *   lifecycle.tick();
	 * });
	 * ```
	 */
	var LifeCycle = (function () {
	    function LifeCycle(exceptionHandler, changeDetector, enforceNoNewChanges) {
	        if (changeDetector === void 0) { changeDetector = null; }
	        if (enforceNoNewChanges === void 0) { enforceNoNewChanges = false; }
	        this._runningTick = false;
	        this._errorHandler = function (exception, stackTrace) {
	            exceptionHandler.call(exception, stackTrace);
	            throw exception;
	        };
	        this._changeDetector =
	            changeDetector; // may be null when instantiated from application bootstrap
	        this._enforceNoNewChanges = enforceNoNewChanges;
	    }
	    /**
	     * @private
	     */
	    LifeCycle.prototype.registerWith = function (zone, changeDetector) {
	        var _this = this;
	        if (changeDetector === void 0) { changeDetector = null; }
	        if (lang_1.isPresent(changeDetector)) {
	            this._changeDetector = changeDetector;
	        }
	        zone.overrideOnErrorHandler(this._errorHandler);
	        zone.overrideOnTurnDone(function () { return _this.tick(); });
	    };
	    /**
	     *  Invoke this method to explicitly process change detection and its side-effects.
	     *
	     *  In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further
	     *  changes are detected. If additional changes are picked up during this second cycle, bindings
	     * in
	     * the app have
	     *  side-effects that cannot be resolved in a single change detection pass. In this case, Angular
	     * throws an error,
	     *  since an Angular application can only have one change detection pass during which all change
	     * detection must
	     *  complete.
	     *
	     */
	    LifeCycle.prototype.tick = function () {
	        if (this._runningTick) {
	            throw new lang_1.BaseException("LifeCycle.tick is called recursively");
	        }
	        try {
	            this._runningTick = true;
	            this._changeDetector.detectChanges();
	            if (this._enforceNoNewChanges) {
	                this._changeDetector.checkNoChanges();
	            }
	        }
	        finally {
	            this._runningTick = false;
	        }
	    };
	    LifeCycle = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [exception_handler_1.ExceptionHandler, Object, Boolean])
	    ], LifeCycle);
	    return LifeCycle;
	})();
	exports.LifeCycle = LifeCycle;
	//# sourceMappingURL=life_cycle.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var PublicTestability = (function () {
	    function PublicTestability(testability) {
	        this._testability = testability;
	    }
	    PublicTestability.prototype.whenStable = function (callback) { this._testability.whenStable(callback); };
	    PublicTestability.prototype.findBindings = function (using, binding, exactMatch) {
	        return this._testability.findBindings(using, binding, exactMatch);
	    };
	    return PublicTestability;
	})();
	var GetTestability = (function () {
	    function GetTestability() {
	    }
	    GetTestability.addToWindow = function (registry) {
	        lang_1.global.getAngularTestability = function (elem) {
	            var testability = registry.findTestabilityInTree(elem);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return new PublicTestability(testability);
	        };
	    };
	    return GetTestability;
	})();
	exports.GetTestability = GetTestability;
	//# sourceMappingURL=get_testability.js.map

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var dom_adapter_1 = __webpack_require__(6);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var getTestabilityModule = __webpack_require__(176);
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 */
	var Testability = (function () {
	    function Testability() {
	        this._pendingCount = 0;
	        this._callbacks = [];
	    }
	    Testability.prototype.increaseCount = function (delta) {
	        if (delta === void 0) { delta = 1; }
	        this._pendingCount += delta;
	        if (this._pendingCount < 0) {
	            throw new lang_1.BaseException('pending async requests below zero');
	        }
	        else if (this._pendingCount == 0) {
	            this._runCallbacks();
	        }
	        return this._pendingCount;
	    };
	    Testability.prototype._runCallbacks = function () {
	        while (this._callbacks.length !== 0) {
	            collection_1.ListWrapper.removeLast(this._callbacks)();
	        }
	    };
	    Testability.prototype.whenStable = function (callback) {
	        this._callbacks.push(callback);
	        if (this._pendingCount === 0) {
	            this._runCallbacks();
	        }
	        // TODO(juliemr) - hook into the zone api.
	    };
	    Testability.prototype.getPendingCount = function () { return this._pendingCount; };
	    Testability.prototype.findBindings = function (using, binding, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], Testability);
	    return Testability;
	})();
	exports.Testability = Testability;
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        this._applications = new collection_1.Map();
	        getTestabilityModule.GetTestability.addToWindow(this);
	    }
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem) {
	        if (elem == null) {
	            return null;
	        }
	        if (this._applications.has(elem)) {
	            return this._applications.get(elem);
	        }
	        if (dom_adapter_1.DOM.isShadowRoot(elem)) {
	            return this.findTestabilityInTree(dom_adapter_1.DOM.getHost(elem));
	        }
	        return this.findTestabilityInTree(dom_adapter_1.DOM.parentElement(elem));
	    };
	    TestabilityRegistry = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], TestabilityRegistry);
	    return TestabilityRegistry;
	})();
	exports.TestabilityRegistry = TestabilityRegistry;
	//# sourceMappingURL=testability.js.map

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(1);
	var OpaqueToken = (function () {
	    function OpaqueToken(desc) {
	        this._desc = 'Token(' + desc + ')';
	    }
	    OpaqueToken.prototype.toString = function () { return this._desc; };
	    OpaqueToken = __decorate([
	        lang_1.CONST(), 
	        __metadata('design:paramtypes', [String])
	    ], OpaqueToken);
	    return OpaqueToken;
	})();
	exports.OpaqueToken = OpaqueToken;
	//# sourceMappingURL=opaque_token.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(8);
	var core_1 = __webpack_require__(13);
	var pipes_1 = __webpack_require__(45);
	var api_1 = __webpack_require__(7);
	var iterable_changes_1 = __webpack_require__(62);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	/**
	 * Adds and removes CSS classes based on an {expression} value.
	 *
	 * The result of expression is used to add and remove CSS classes using the following logic,
	 * based on expression's value type:
	 * - {string} - all the CSS classes (space - separated) are added
	 * - {Array} - all the CSS classes (Array elements) are added
	 * - {Object} - each key corresponds to a CSS class name while values
	 * are interpreted as {boolean} expression. If a given expression
	 * evaluates to {true} a corresponding CSS class is added - otherwise
	 * it is removed.
	 *
	 * # Example:
	 *
	 * ```
	 * <div class="message" [class]="{error: errorCount > 0}">
	 *     Please check errors.
	 * </div>
	 * ```
	 */
	var CSSClass = (function () {
	    function CSSClass(_pipes, _ngEl, _renderer) {
	        this._pipes = _pipes;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(CSSClass.prototype, "rawClass", {
	        set: function (v) {
	            this._cleanupClasses(this._rawClass);
	            if (lang_1.isString(v)) {
	                v = v.split(' ');
	            }
	            this._rawClass = v;
	            this._pipe = this._pipes.get(collection_1.isListLikeIterable(v) ? 'iterableDiff' : 'keyValDiff', v);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CSSClass.prototype.onCheck = function () {
	        var diff = this._pipe.transform(this._rawClass, null);
	        if (lang_1.isPresent(diff) && lang_1.isPresent(diff.wrapped)) {
	            if (diff.wrapped instanceof iterable_changes_1.IterableChanges) {
	                this._applyArrayChanges(diff.wrapped);
	            }
	            else {
	                this._applyObjectChanges(diff.wrapped);
	            }
	        }
	    };
	    CSSClass.prototype._cleanupClasses = function (rawClassVal) {
	        var _this = this;
	        if (lang_1.isPresent(rawClassVal)) {
	            if (collection_1.isListLikeIterable(rawClassVal)) {
	                collection_1.ListWrapper.forEach(rawClassVal, function (className) { _this._toggleClass(className, false); });
	            }
	            else {
	                collection_1.StringMapWrapper.forEach(rawClassVal, function (expVal, className) {
	                    if (expVal)
	                        _this._toggleClass(className, false);
	                });
	            }
	        }
	    };
	    CSSClass.prototype._applyObjectChanges = function (diff) {
	        var _this = this;
	        diff.forEachAddedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	        diff.forEachChangedItem(function (record) { _this._toggleClass(record.key, record.currentValue); });
	        diff.forEachRemovedItem(function (record) {
	            if (record.previousValue) {
	                _this._toggleClass(record.key, false);
	            }
	        });
	    };
	    CSSClass.prototype._applyArrayChanges = function (diff) {
	        var _this = this;
	        diff.forEachAddedItem(function (record) { _this._toggleClass(record.item, true); });
	        diff.forEachRemovedItem(function (record) { _this._toggleClass(record.item, false); });
	    };
	    CSSClass.prototype._toggleClass = function (className, enabled) {
	        this._renderer.setElementClass(this._ngEl, className, enabled);
	    };
	    CSSClass = __decorate([
	        annotations_1.Directive({ selector: '[class]', lifecycle: [annotations_1.LifecycleEvent.onCheck], properties: ['rawClass: class'] }), 
	        __metadata('design:paramtypes', [pipes_1.Pipes, core_1.ElementRef, api_1.Renderer])
	    ], CSSClass);
	    return CSSClass;
	})();
	exports.CSSClass = CSSClass;
	//# sourceMappingURL=class.js.map

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(8);
	var core_1 = __webpack_require__(13);
	var pipes_1 = __webpack_require__(45);
	var lang_1 = __webpack_require__(1);
	var api_1 = __webpack_require__(7);
	/**
	 * Adds or removes styles based on an {expression}.
	 *
	 * When the expression assigned to `ng-style` evaluates to an object, the corresponding element
	 * styles are updated. Style names to update are taken from the object keys and values - from the
	 * corresponding object values.
	 *
	 * # Example:
	 *
	 * ```
	 * <div ng-style="{'text-align': alignEpr}"></div>
	 * ```
	 *
	 * In the above example the `text-align` style will be updated based on the `alignEpr` value
	 * changes.
	 *
	 * # Syntax
	 *
	 * - `<div ng-style="{'text-align': alignEpr}"></div>`
	 * - `<div ng-style="styleExp"></div>`
	 */
	var NgStyle = (function () {
	    function NgStyle(_pipes, _ngEl, _renderer) {
	        this._pipes = _pipes;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	    }
	    Object.defineProperty(NgStyle.prototype, "rawStyle", {
	        set: function (v) {
	            this._rawStyle = v;
	            this._pipe = this._pipes.get('keyValDiff', this._rawStyle);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgStyle.prototype.onCheck = function () {
	        var diff = this._pipe.transform(this._rawStyle, null);
	        if (lang_1.isPresent(diff) && lang_1.isPresent(diff.wrapped)) {
	            this._applyChanges(diff.wrapped);
	        }
	    };
	    NgStyle.prototype._applyChanges = function (diff) {
	        var _this = this;
	        diff.forEachAddedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
	        diff.forEachChangedItem(function (record) { _this._setStyle(record.key, record.currentValue); });
	        diff.forEachRemovedItem(function (record) { _this._setStyle(record.key, null); });
	    };
	    NgStyle.prototype._setStyle = function (name, val) {
	        this._renderer.setElementStyle(this._ngEl, name, val);
	    };
	    NgStyle = __decorate([
	        annotations_1.Directive({
	            selector: '[ng-style]',
	            lifecycle: [annotations_1.LifecycleEvent.onCheck],
	            properties: ['rawStyle: ng-style']
	        }), 
	        __metadata('design:paramtypes', [pipes_1.Pipes, core_1.ElementRef, api_1.Renderer])
	    ], NgStyle);
	    return NgStyle;
	})();
	exports.NgStyle = NgStyle;
	//# sourceMappingURL=ng_style.js.map

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var generic_browser_adapter_1 = __webpack_require__(182);
	var _attrToPropMap = { 'innerHtml': 'innerHTML', 'readonly': 'readOnly', 'tabindex': 'tabIndex' };
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	/* tslint:disable:requireParameterType */
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    BrowserDomAdapter.makeCurrent = function () { dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter()); };
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };
	    BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
	    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
	        el[methodName].apply(el, args);
	    };
	    // TODO(tbosch): move this into a separate environment class once we have it
	    BrowserDomAdapter.prototype.logError = function (error) { window.console.error(error); };
	    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	        get: function () { return _attrToPropMap; },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () { el.removeEventListener(evt, listener, false); };
	    };
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var evt = document.createEvent('MouseEvent');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        var evt = document.createEvent('Event');
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.preventDefault = function (evt) {
	        evt.preventDefault();
	        evt.returnValue = false;
	    };
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, "content")) {
	            return node.content;
	        }
	        else {
	            return node;
	        }
	    };
	    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentElement; };
	    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var childNodes = el.childNodes;
	        var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
	        for (var i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        while (el.firstChild) {
	            el.firstChild.remove();
	        }
	    };
	    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	    BrowserDomAdapter.prototype.remove = function (node) {
	        node.remove();
	        return node;
	    };
	    BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
	    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
	        collection_1.ListWrapper.forEach(nodes, function (n) { el.parentNode.insertBefore(n, el); });
	    };
	    BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	    // TODO(vicb): removed Element type because it does not support StyleElement
	    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createElement(tagName);
	    };
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) { doc = document; }
	        return doc.createTextNode(text);
	    };
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) { doc = document; }
	        var el = doc.createElement('SCRIPT');
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) { doc = document; }
	        var style = doc.createElement('style');
	        this.appendChild(style, this.createTextNode(css));
	        return style;
	    };
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
	    BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };
	    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    BrowserDomAdapter.prototype.classList = function (element) {
	        return Array.prototype.slice.call(element.classList, 0);
	    };
	    BrowserDomAdapter.prototype.addClass = function (element, classname) { element.classList.add(classname); };
	    BrowserDomAdapter.prototype.removeClass = function (element, classname) { element.classList.remove(classname); };
	    BrowserDomAdapter.prototype.hasClass = function (element, classname) { return element.classList.contains(classname); };
	    BrowserDomAdapter.prototype.setStyle = function (element, stylename, stylevalue) {
	        element.style[stylename] = stylevalue;
	    };
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) { element.style[stylename] = null; };
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var res = new Map();
	        var elAttrs = element.attributes;
	        for (var i = 0; i < elAttrs.length; i++) {
	            var attrib = elAttrs[i];
	            res.set(attrib.name, attrib.value);
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) { return element.hasAttribute(attribute); };
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) { return element.getAttribute(attribute); };
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        try {
	            return el.getBoundingClientRect();
	        }
	        catch (e) {
	            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	        }
	    };
	    BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	    BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        return n instanceof HTMLElement && n.matches ? n.matches(selector) :
	            n.msMatchesSelector(selector);
	    };
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
	    };
	    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) { return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot); };
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) {
	        var toImport = node;
	        if (this.isTemplateElement(node)) {
	            toImport = this.content(node);
	        }
	        return document.importNode(toImport, true);
	    };
	    BrowserDomAdapter.prototype.isPageRule = function (rule) { return rule.type === CSSRule.PAGE_RULE; };
	    BrowserDomAdapter.prototype.isStyleRule = function (rule) { return rule.type === CSSRule.STYLE_RULE; };
	    BrowserDomAdapter.prototype.isMediaRule = function (rule) { return rule.type === CSSRule.MEDIA_RULE; };
	    BrowserDomAdapter.prototype.isKeyframesRule = function (rule) { return rule.type === CSSRule.KEYFRAMES_RULE; };
	    BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var key = event.key;
	        if (lang_1.isBlank(key)) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari
	            // cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (lang_1.isBlank(key)) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = _chromeNumKeyPadMap[key];
	                }
	            }
	        }
	        if (_keyMap.hasOwnProperty(key)) {
	            key = _keyMap[key];
	        }
	        return key;
	    };
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	        if (target == "window") {
	            return window;
	        }
	        else if (target == "document") {
	            return document;
	        }
	        else if (target == "body") {
	            return document.body;
	        }
	    };
	    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	    BrowserDomAdapter.prototype.getBaseHref = function () {
	        var href = getBaseElementHref();
	        if (lang_1.isBlank(href)) {
	            return null;
	        }
	        return relativePath(href);
	    };
	    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	    BrowserDomAdapter.prototype.setData = function (element, name, value) { element.dataset[name] = value; };
	    BrowserDomAdapter.prototype.getData = function (element, name) { return element.dataset[name]; };
	    // TODO(tbosch): move this into a separate environment class once we have it
	    BrowserDomAdapter.prototype.setGlobalVar = function (name, value) { lang_1.global[name] = value; };
	    return BrowserDomAdapter;
	})(generic_browser_adapter_1.GenericBrowserDomAdapter);
	exports.BrowserDomAdapter = BrowserDomAdapter;
	var baseElement = null;
	function getBaseElementHref() {
	    if (lang_1.isBlank(baseElement)) {
	        baseElement = document.querySelector('base');
	        if (lang_1.isBlank(baseElement)) {
	            return null;
	        }
	    }
	    return baseElement.attr('href');
	}
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode = null;
	function relativePath(url) {
	    if (lang_1.isBlank(urlParsingNode)) {
	        urlParsingNode = document.createElement("a");
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}
	//# sourceMappingURL=browser_adapter.js.map

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	/**
	 * Provides DOM operations in any browser environment.
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    GenericBrowserDomAdapter.prototype.cssToRules = function (css) {
	        var style = this.createStyleElement(css);
	        this.appendChild(this.defaultDoc().head, style);
	        var rules = [];
	        if (lang_1.isPresent(style.sheet)) {
	            // TODO(sorvell): Firefox throws when accessing the rules of a stylesheet
	            // with an @import
	            // https://bugzilla.mozilla.org/show_bug.cgi?id=625013
	            try {
	                var rawRules = style.sheet.cssRules;
	                rules = collection_1.ListWrapper.createFixedSize(rawRules.length);
	                for (var i = 0; i < rawRules.length; i++) {
	                    rules[i] = rawRules[i];
	                }
	            }
	            catch (e) {
	            }
	        }
	        else {
	        }
	        this.remove(style);
	        return rules;
	    };
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	        return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
	    };
	    return GenericBrowserDomAdapter;
	})(dom_adapter_1.DomAdapter);
	exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
	//# sourceMappingURL=generic_browser_adapter.js.map

/***/ },
/* 183 */,
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	exports.Math = lang_1.global.Math;
	exports.NaN = typeof exports.NaN;
	//# sourceMappingURL=math.js.map

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var ng_control_name_1 = __webpack_require__(77);
	var ng_form_control_1 = __webpack_require__(79);
	var ng_model_1 = __webpack_require__(81);
	var ng_control_group_1 = __webpack_require__(76);
	var ng_form_model_1 = __webpack_require__(80);
	var ng_form_1 = __webpack_require__(78);
	var default_value_accessor_1 = __webpack_require__(75);
	var checkbox_value_accessor_1 = __webpack_require__(74);
	var select_control_value_accessor_1 = __webpack_require__(82);
	var validators_1 = __webpack_require__(28);
	var ng_control_name_2 = __webpack_require__(77);
	exports.NgControlName = ng_control_name_2.NgControlName;
	var ng_form_control_2 = __webpack_require__(79);
	exports.NgFormControl = ng_form_control_2.NgFormControl;
	var ng_model_2 = __webpack_require__(81);
	exports.NgModel = ng_model_2.NgModel;
	var ng_control_1 = __webpack_require__(19);
	exports.NgControl = ng_control_1.NgControl;
	var ng_control_group_2 = __webpack_require__(76);
	exports.NgControlGroup = ng_control_group_2.NgControlGroup;
	var ng_form_model_2 = __webpack_require__(80);
	exports.NgFormModel = ng_form_model_2.NgFormModel;
	var ng_form_2 = __webpack_require__(78);
	exports.NgForm = ng_form_2.NgForm;
	var default_value_accessor_2 = __webpack_require__(75);
	exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
	var checkbox_value_accessor_2 = __webpack_require__(74);
	exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
	var select_control_value_accessor_2 = __webpack_require__(82);
	exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
	exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
	var validators_2 = __webpack_require__(28);
	exports.NgValidator = validators_2.NgValidator;
	exports.NgRequiredValidator = validators_2.NgRequiredValidator;
	/**
	 *
	 * A list of all the form directives used as part of a `@View` annotation.
	 *
	 *  This is a shorthand for importing them each individually.
	 */
	exports.formDirectives = lang_1.CONST_EXPR([
	    ng_control_name_1.NgControlName,
	    ng_control_group_1.NgControlGroup,
	    ng_form_control_1.NgFormControl,
	    ng_model_1.NgModel,
	    ng_form_model_1.NgFormModel,
	    ng_form_1.NgForm,
	    select_control_value_accessor_1.NgSelectOption,
	    default_value_accessor_1.DefaultValueAccessor,
	    checkbox_value_accessor_1.CheckboxControlValueAccessor,
	    select_control_value_accessor_1.SelectControlValueAccessor,
	    validators_1.NgRequiredValidator
	]);
	//# sourceMappingURL=directives.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var static_request_1 = __webpack_require__(84);
	var enums_1 = __webpack_require__(22);
	var interfaces_1 = __webpack_require__(56);
	var async_1 = __webpack_require__(5);
	var lang_1 = __webpack_require__(1);
	var lang_2 = __webpack_require__(1);
	/**
	 *
	 * Mock Connection to represent a {@link Connection} for tests.
	 *
	 **/
	var MockConnection = (function () {
	    function MockConnection(req) {
	        this.response = new async_1.EventEmitter();
	        this.readyState = enums_1.ReadyStates.OPEN;
	        this.request = req;
	    }
	    /**
	     * Changes the `readyState` of the connection to a custom state of 5 (cancelled).
	     */
	    MockConnection.prototype.dispose = function () {
	        if (this.readyState !== enums_1.ReadyStates.DONE) {
	            this.readyState = enums_1.ReadyStates.CANCELLED;
	        }
	    };
	    /**
	     * Sends a mock response to the connection. This response is the value that is emitted to the
	     * {@link EventEmitter} returned by {@link Http}.
	     *
	     * #Example
	     *
	     * ```
	     * var connection;
	     * backend.connections.subscribe(c => connection = c);
	     * http.request('data.json').subscribe(res => console.log(res.text()));
	     * connection.mockRespond(new Response('fake response')); //logs 'fake response'
	     * ```
	     *
	     */
	    MockConnection.prototype.mockRespond = function (res) {
	        if (this.readyState === enums_1.ReadyStates.DONE || this.readyState === enums_1.ReadyStates.CANCELLED) {
	            throw new lang_2.BaseException('Connection has already been resolved');
	        }
	        this.readyState = enums_1.ReadyStates.DONE;
	        async_1.ObservableWrapper.callNext(this.response, res);
	        async_1.ObservableWrapper.callReturn(this.response);
	    };
	    /**
	     * Not yet implemented!
	     *
	     * Sends the provided {@link Response} to the `downloadObserver` of the `Request`
	     * associated with this connection.
	     */
	    MockConnection.prototype.mockDownload = function (res) {
	        // this.request.downloadObserver.onNext(res);
	        // if (res.bytesLoaded === res.totalBytes) {
	        //   this.request.downloadObserver.onCompleted();
	        // }
	    };
	    // TODO(jeffbcross): consider using Response type
	    /**
	     * Emits the provided error object as an error to the {@link Response} {@link EventEmitter}
	     * returned
	     * from {@link Http}.
	     */
	    MockConnection.prototype.mockError = function (err) {
	        // Matches XHR semantics
	        this.readyState = enums_1.ReadyStates.DONE;
	        async_1.ObservableWrapper.callThrow(this.response, err);
	        async_1.ObservableWrapper.callReturn(this.response);
	    };
	    MockConnection = __decorate([
	        lang_2.IMPLEMENTS(interfaces_1.Connection), 
	        __metadata('design:paramtypes', [static_request_1.Request])
	    ], MockConnection);
	    return MockConnection;
	})();
	exports.MockConnection = MockConnection;
	/**
	 * A mock backend for testing the {@link Http} service.
	 *
	 * This class can be injected in tests, and should be used to override bindings
	 * to other backends, such as {@link XHRBackend}.
	 *
	 * #Example
	 *
	 * ```
	 * import {MockBackend, DefaultOptions, Http} from 'angular2/http';
	 * it('should get some data', inject([AsyncTestCompleter], (async) => {
	 *   var connection;
	 *   var injector = Injector.resolveAndCreate([
	 *     MockBackend,
	 *     bind(Http).toFactory((backend, defaultOptions) => {
	 *       return new Http(backend, defaultOptions)
	 *     }, [MockBackend, DefaultOptions])]);
	 *   var http = injector.get(Http);
	 *   var backend = injector.get(MockBackend);
	 *   //Assign any newly-created connection to local variable
	 *   backend.connections.subscribe(c => connection = c);
	 *   http.request('data.json').subscribe((res) => {
	 *     expect(res.text()).toBe('awesome');
	 *     async.done();
	 *   });
	 *   connection.mockRespond(new Response('awesome'));
	 * }));
	 * ```
	 *
	 * This method only exists in the mock implementation, not in real Backends.
	 **/
	var MockBackend = (function () {
	    function MockBackend() {
	        var _this = this;
	        this.connectionsArray = [];
	        this.connections = new async_1.EventEmitter();
	        async_1.ObservableWrapper.subscribe(this.connections, function (connection) { return _this.connectionsArray.push(connection); });
	        this.pendingConnections = new async_1.EventEmitter();
	    }
	    /**
	     * Checks all connections, and raises an exception if any connection has not received a response.
	     *
	     * This method only exists in the mock implementation, not in real Backends.
	     */
	    MockBackend.prototype.verifyNoPendingRequests = function () {
	        var pending = 0;
	        async_1.ObservableWrapper.subscribe(this.pendingConnections, function (c) { return pending++; });
	        if (pending > 0)
	            throw new lang_2.BaseException(pending + " pending connections to be resolved");
	    };
	    /**
	     * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve
	     * connections, if it's expected that there are connections that have not yet received a response.
	     *
	     * This method only exists in the mock implementation, not in real Backends.
	     */
	    MockBackend.prototype.resolveAllConnections = function () {
	        async_1.ObservableWrapper.subscribe(this.connections, function (c) { return c.readyState = 4; });
	    };
	    /**
	     * Creates a new {@link MockConnection}. This is equivalent to calling `new
	     * MockConnection()`, except that it also will emit the new `Connection` to the `connections`
	     * emitter of this `MockBackend` instance. This method will usually only be used by tests
	     * against the framework itself, not by end-users.
	     */
	    MockBackend.prototype.createConnection = function (req) {
	        if (!lang_1.isPresent(req) || !(req instanceof static_request_1.Request)) {
	            throw new lang_2.BaseException("createConnection requires an instance of Request, got " + req);
	        }
	        var connection = new MockConnection(req);
	        async_1.ObservableWrapper.callNext(this.connections, connection);
	        return connection;
	    };
	    MockBackend = __decorate([
	        di_1.Injectable(),
	        lang_2.IMPLEMENTS(interfaces_1.ConnectionBackend), 
	        __metadata('design:paramtypes', [])
	    ], MockBackend);
	    return MockBackend;
	})();
	exports.MockBackend = MockBackend;
	//# sourceMappingURL=mock_backend.js.map

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	exports.isJsObject = lang_1.isJsObject;
	//# sourceMappingURL=http_utils.js.map

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	function paramParser(rawParams) {
	    var map = new collection_1.Map();
	    var params = lang_1.StringWrapper.split(rawParams, new RegExp('&'));
	    collection_1.ListWrapper.forEach(params, function (param) {
	        var split = lang_1.StringWrapper.split(param, new RegExp('='));
	        var key = collection_1.ListWrapper.get(split, 0);
	        var val = collection_1.ListWrapper.get(split, 1);
	        var list = lang_1.isPresent(map.get(key)) ? map.get(key) : [];
	        list.push(val);
	        map.set(key, list);
	    });
	    return map;
	}
	/**
	 * Map-like representation of url search parameters, based on
	 * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard.
	 *
	 */
	var URLSearchParams = (function () {
	    function URLSearchParams(rawParams) {
	        this.rawParams = rawParams;
	        this.paramsMap = paramParser(rawParams);
	    }
	    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
	    URLSearchParams.prototype.get = function (param) {
	        var storedParam = this.paramsMap.get(param);
	        if (collection_1.isListLikeIterable(storedParam)) {
	            return collection_1.ListWrapper.first(storedParam);
	        }
	        else {
	            return null;
	        }
	    };
	    URLSearchParams.prototype.getAll = function (param) {
	        var mapParam = this.paramsMap.get(param);
	        return lang_1.isPresent(mapParam) ? mapParam : [];
	    };
	    URLSearchParams.prototype.append = function (param, val) {
	        var mapParam = this.paramsMap.get(param);
	        var list = lang_1.isPresent(mapParam) ? mapParam : [];
	        list.push(val);
	        this.paramsMap.set(param, list);
	    };
	    URLSearchParams.prototype.toString = function () {
	        var paramsList = [];
	        collection_1.MapWrapper.forEach(this.paramsMap, function (values, k) {
	            collection_1.ListWrapper.forEach(values, function (v) { paramsList.push(k + '=' + v); });
	        });
	        return collection_1.ListWrapper.join(paramsList, '&');
	    };
	    URLSearchParams.prototype.delete = function (param) { collection_1.MapWrapper.delete(this.paramsMap, param); };
	    return URLSearchParams;
	})();
	exports.URLSearchParams = URLSearchParams;
	//# sourceMappingURL=url_search_params.js.map

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var ReflectionCapabilities = (function () {
	    function ReflectionCapabilities(reflect) {
	        this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
	    }
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	    ReflectionCapabilities.prototype.factory = function (t) {
	        switch (t.length) {
	            case 0:
	                return function () { return new t(); };
	            case 1:
	                return function (a1) { return new t(a1); };
	            case 2:
	                return function (a1, a2) { return new t(a1, a2); };
	            case 3:
	                return function (a1, a2, a3) { return new t(a1, a2, a3); };
	            case 4:
	                return function (a1, a2, a3, a4) { return new t(a1, a2, a3, a4); };
	            case 5:
	                return function (a1, a2, a3, a4, a5) { return new t(a1, a2, a3, a4, a5); };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) { return new t(a1, a2, a3, a4, a5, a6); };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) { return new t(a1, a2, a3, a4, a5, a6, a7); };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) { return new t(a1, a2, a3, a4, a5, a6, a7, a8); };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) { return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9); };
	            case 10:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	                };
	            case 11:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
	                };
	            case 12:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
	                };
	            case 13:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
	                };
	            case 14:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
	                };
	            case 15:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
	                };
	            case 16:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
	                };
	            case 17:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
	                };
	            case 18:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
	                };
	            case 19:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
	                };
	            case 20:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
	                };
	        }
	        ;
	        throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
	    };
	    ReflectionCapabilities.prototype._zipTypesAndAnnotaions = function (paramTypes, paramAnnotations) {
	        var result;
	        if (typeof paramTypes === 'undefined') {
	            result = collection_1.ListWrapper.createFixedSize(paramAnnotations.length);
	        }
	        else {
	            result = collection_1.ListWrapper.createFixedSize(paramTypes.length);
	        }
	        for (var i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    ReflectionCapabilities.prototype.parameters = function (typeOfFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOfFunc.parameters)) {
	            return typeOfFunc.parameters;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var paramAnnotations = this._reflect.getMetadata('parameters', typeOfFunc);
	            var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOfFunc);
	            if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
	                return this._zipTypesAndAnnotaions(paramTypes, paramAnnotations);
	            }
	        }
	        return collection_1.ListWrapper.createFixedSize(typeOfFunc.length);
	    };
	    ReflectionCapabilities.prototype.annotations = function (typeOfFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOfFunc.annotations)) {
	            var annotations = typeOfFunc.annotations;
	            if (lang_1.isFunction(annotations) && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var annotations = this._reflect.getMetadata('annotations', typeOfFunc);
	            if (lang_1.isPresent(annotations))
	                return annotations;
	        }
	        return [];
	    };
	    ReflectionCapabilities.prototype.interfaces = function (type) {
	        throw new lang_1.BaseException("JavaScript does not support interfaces");
	    };
	    ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return new Function('o', 'v', 'return o.' + name + ' = v;');
	    };
	    ReflectionCapabilities.prototype.method = function (name) {
	        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return new Function('o', 'args', functionBody);
	    };
	    return ReflectionCapabilities;
	})();
	exports.ReflectionCapabilities = ReflectionCapabilities;
	//# sourceMappingURL=reflection_capabilities.js.map

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	/**
	 * Controls the processing order of elements.
	 * Right now it only allows to add a parent element.
	 */
	var CompileControl = (function () {
	    function CompileControl(_steps) {
	        this._steps = _steps;
	        this._currentStepIndex = 0;
	        this._parent = null;
	        this._results = null;
	        this._additionalChildren = null;
	    }
	    // only public so that it can be used by compile_pipeline
	    CompileControl.prototype.internalProcess = function (results, startStepIndex, parent, current) {
	        this._results = results;
	        var previousStepIndex = this._currentStepIndex;
	        var previousParent = this._parent;
	        this._ignoreCurrentElement = false;
	        for (var i = startStepIndex; i < this._steps.length && !this._ignoreCurrentElement; i++) {
	            var step = this._steps[i];
	            this._parent = parent;
	            this._currentStepIndex = i;
	            step.process(parent, current, this);
	            parent = this._parent;
	        }
	        if (!this._ignoreCurrentElement) {
	            results.push(current);
	        }
	        this._currentStepIndex = previousStepIndex;
	        this._parent = previousParent;
	        var localAdditionalChildren = this._additionalChildren;
	        this._additionalChildren = null;
	        return localAdditionalChildren;
	    };
	    CompileControl.prototype.addParent = function (newElement) {
	        this.internalProcess(this._results, this._currentStepIndex + 1, this._parent, newElement);
	        this._parent = newElement;
	    };
	    CompileControl.prototype.addChild = function (element) {
	        if (lang_1.isBlank(this._additionalChildren)) {
	            this._additionalChildren = [];
	        }
	        this._additionalChildren.push(element);
	    };
	    /**
	     * Ignores the current element.
	     *
	     * When a step calls `ignoreCurrentElement`, no further steps are executed on the current
	     * element and no `CompileElement` is added to the result list.
	     */
	    CompileControl.prototype.ignoreCurrentElement = function () { this._ignoreCurrentElement = true; };
	    return CompileControl;
	})();
	exports.CompileControl = CompileControl;
	//# sourceMappingURL=compile_control.js.map

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var compile_element_1 = __webpack_require__(151);
	var compile_control_1 = __webpack_require__(190);
	var proto_view_builder_1 = __webpack_require__(207);
	var api_1 = __webpack_require__(7);
	/**
	 * CompilePipeline for executing CompileSteps recursively for
	 * all elements in a template.
	 */
	var CompilePipeline = (function () {
	    function CompilePipeline(steps, _useNativeShadowDom) {
	        if (_useNativeShadowDom === void 0) { _useNativeShadowDom = false; }
	        this._useNativeShadowDom = _useNativeShadowDom;
	        this._control = new compile_control_1.CompileControl(steps);
	    }
	    CompilePipeline.prototype.process = function (rootElement, protoViewType, compilationCtxtDescription) {
	        if (protoViewType === void 0) { protoViewType = null; }
	        if (compilationCtxtDescription === void 0) { compilationCtxtDescription = ''; }
	        if (lang_1.isBlank(protoViewType)) {
	            protoViewType = api_1.ViewType.COMPONENT;
	        }
	        var results = [];
	        var rootCompileElement = new compile_element_1.CompileElement(rootElement, compilationCtxtDescription);
	        rootCompileElement.inheritedProtoView =
	            new proto_view_builder_1.ProtoViewBuilder(rootElement, protoViewType, this._useNativeShadowDom);
	        rootCompileElement.isViewRoot = true;
	        this._process(results, null, rootCompileElement, compilationCtxtDescription);
	        return results;
	    };
	    CompilePipeline.prototype._process = function (results, parent, current, compilationCtxtDescription) {
	        if (compilationCtxtDescription === void 0) { compilationCtxtDescription = ''; }
	        var additionalChildren = this._control.internalProcess(results, 0, parent, current);
	        if (current.compileChildren) {
	            var node = dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.templateAwareRoot(current.element));
	            while (lang_1.isPresent(node)) {
	                // compiliation can potentially move the node, so we need to store the
	                // next sibling before recursing.
	                var nextNode = dom_adapter_1.DOM.nextSibling(node);
	                if (dom_adapter_1.DOM.isElementNode(node)) {
	                    var childCompileElement = new compile_element_1.CompileElement(node, compilationCtxtDescription);
	                    childCompileElement.inheritedProtoView = current.inheritedProtoView;
	                    childCompileElement.inheritedElementBinder = current.inheritedElementBinder;
	                    childCompileElement.distanceToInheritedBinder = current.distanceToInheritedBinder + 1;
	                    this._process(results, current, childCompileElement);
	                }
	                node = nextNode;
	            }
	        }
	        if (lang_1.isPresent(additionalChildren)) {
	            for (var i = 0; i < additionalChildren.length; i++) {
	                this._process(results, current, additionalChildren[i]);
	            }
	        }
	    };
	    return CompilePipeline;
	})();
	exports.CompilePipeline = CompilePipeline;
	//# sourceMappingURL=compile_pipeline.js.map

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var property_binding_parser_1 = __webpack_require__(195);
	var text_interpolation_parser_1 = __webpack_require__(197);
	var directive_parser_1 = __webpack_require__(194);
	var view_splitter_1 = __webpack_require__(198);
	var shadow_dom_compile_step_1 = __webpack_require__(205);
	var CompileStepFactory = (function () {
	    function CompileStepFactory() {
	    }
	    CompileStepFactory.prototype.createSteps = function (view) { return null; };
	    return CompileStepFactory;
	})();
	exports.CompileStepFactory = CompileStepFactory;
	var DefaultStepFactory = (function (_super) {
	    __extends(DefaultStepFactory, _super);
	    function DefaultStepFactory(_parser, _shadowDomStrategy) {
	        _super.call(this);
	        this._parser = _parser;
	        this._shadowDomStrategy = _shadowDomStrategy;
	    }
	    DefaultStepFactory.prototype.createSteps = function (view) {
	        return [
	            new view_splitter_1.ViewSplitter(this._parser),
	            new property_binding_parser_1.PropertyBindingParser(this._parser),
	            new directive_parser_1.DirectiveParser(this._parser, view.directives),
	            new text_interpolation_parser_1.TextInterpolationParser(this._parser),
	            new shadow_dom_compile_step_1.ShadowDomCompileStep(this._shadowDomStrategy, view)
	        ];
	    };
	    return DefaultStepFactory;
	})(CompileStepFactory);
	exports.DefaultStepFactory = DefaultStepFactory;
	//# sourceMappingURL=compile_step_factory.js.map

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var async_1 = __webpack_require__(5);
	var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var api_1 = __webpack_require__(7);
	var compile_pipeline_1 = __webpack_require__(191);
	var view_loader_1 = __webpack_require__(87);
	var compile_step_factory_1 = __webpack_require__(192);
	var change_detection_1 = __webpack_require__(12);
	var shadow_dom_strategy_1 = __webpack_require__(33);
	var pvm = __webpack_require__(208);
	/**
	 * The compiler loads and translates the html templates of components into
	 * nested ProtoViews. To decompose its functionality it uses
	 * the CompilePipeline and the CompileSteps.
	 */
	var DomCompiler = (function (_super) {
	    __extends(DomCompiler, _super);
	    function DomCompiler(_stepFactory, _viewLoader, _useNativeShadowDom) {
	        _super.call(this);
	        this._stepFactory = _stepFactory;
	        this._viewLoader = _viewLoader;
	        this._useNativeShadowDom = _useNativeShadowDom;
	    }
	    DomCompiler.prototype.compile = function (view) {
	        var _this = this;
	        var tplPromise = this._viewLoader.load(view);
	        return async_1.PromiseWrapper.then(tplPromise, function (el) { return _this._compileTemplate(view, el, api_1.ViewType.COMPONENT); }, function (e) {
	            throw new lang_1.BaseException("Failed to load the template for \"" + view.componentId + "\" : " + e);
	            return null;
	        });
	    };
	    DomCompiler.prototype.compileHost = function (directiveMetadata) {
	        var hostViewDef = new api_1.ViewDefinition({
	            componentId: directiveMetadata.id,
	            templateAbsUrl: null, template: null,
	            styles: null,
	            styleAbsUrls: null,
	            directives: [directiveMetadata]
	        });
	        var template = dom_adapter_1.DOM.createTemplate('');
	        dom_adapter_1.DOM.appendChild(dom_adapter_1.DOM.content(template), dom_adapter_1.DOM.createElement(directiveMetadata.selector));
	        return this._compileTemplate(hostViewDef, template, api_1.ViewType.HOST);
	    };
	    DomCompiler.prototype.mergeProtoViewsRecursively = function (protoViewRefs) {
	        return async_1.PromiseWrapper.resolve(pvm.mergeProtoViewsRecursively(protoViewRefs));
	    };
	    DomCompiler.prototype._compileTemplate = function (viewDef, tplElement, protoViewType) {
	        var pipeline = new compile_pipeline_1.CompilePipeline(this._stepFactory.createSteps(viewDef), this._useNativeShadowDom);
	        var compileElements = pipeline.process(tplElement, protoViewType, viewDef.componentId);
	        return async_1.PromiseWrapper.resolve(compileElements[0].inheritedProtoView.build());
	    };
	    return DomCompiler;
	})(api_1.RenderCompiler);
	exports.DomCompiler = DomCompiler;
	var DefaultDomCompiler = (function (_super) {
	    __extends(DefaultDomCompiler, _super);
	    function DefaultDomCompiler(parser, shadowDomStrategy, viewLoader) {
	        _super.call(this, new compile_step_factory_1.DefaultStepFactory(parser, shadowDomStrategy), viewLoader, shadowDomStrategy.hasNativeContentElement());
	    }
	    DefaultDomCompiler = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [change_detection_1.Parser, shadow_dom_strategy_1.ShadowDomStrategy, view_loader_1.ViewLoader])
	    ], DefaultDomCompiler);
	    return DefaultDomCompiler;
	})(DomCompiler);
	exports.DefaultDomCompiler = DefaultDomCompiler;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var dom_adapter_1 = __webpack_require__(6);
	var selector_1 = __webpack_require__(196);
	var api_1 = __webpack_require__(7);
	var util_1 = __webpack_require__(20);
	/**
	 * Parses the directives on a single element. Assumes ViewSplitter has already created
	 * <template> elements for template directives.
	 */
	var DirectiveParser = (function () {
	    function DirectiveParser(_parser, _directives) {
	        this._parser = _parser;
	        this._directives = _directives;
	        this._selectorMatcher = new selector_1.SelectorMatcher();
	        for (var i = 0; i < _directives.length; i++) {
	            var directive = _directives[i];
	            var selector = selector_1.CssSelector.parse(directive.selector);
	            this._ensureComponentOnlyHasElementSelector(selector, directive);
	            this._selectorMatcher.addSelectables(selector, i);
	        }
	    }
	    DirectiveParser.prototype._ensureComponentOnlyHasElementSelector = function (selector, directive) {
	        var isElementSelector = selector.length === 1 && selector[0].isElementSelector();
	        if (!isElementSelector && directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
	            throw new lang_1.BaseException("Component '" + directive.id + "' can only have an element selector, but had '" + directive.selector + "'");
	        }
	    };
	    DirectiveParser.prototype.process = function (parent, current, control) {
	        var _this = this;
	        var attrs = current.attrs();
	        var classList = current.classList();
	        var cssSelector = new selector_1.CssSelector();
	        var foundDirectiveIndices = [];
	        var elementBinder = null;
	        cssSelector.setElement(dom_adapter_1.DOM.nodeName(current.element));
	        for (var i = 0; i < classList.length; i++) {
	            cssSelector.addClassName(classList[i]);
	        }
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) { cssSelector.addAttribute(attrName, attrValue); });
	        this._selectorMatcher.match(cssSelector, function (selector, directiveIndex) {
	            var directive = _this._directives[directiveIndex];
	            elementBinder = current.bindElement();
	            if (directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
	                _this._ensureHasOnlyOneComponent(elementBinder, current.elementDescription);
	                // components need to go first, so it is easier to locate them in the result.
	                collection_1.ListWrapper.insert(foundDirectiveIndices, 0, directiveIndex);
	                elementBinder.setComponentId(directive.id);
	            }
	            else {
	                foundDirectiveIndices.push(directiveIndex);
	            }
	        });
	        collection_1.ListWrapper.forEach(foundDirectiveIndices, function (directiveIndex) {
	            var dirMetadata = _this._directives[directiveIndex];
	            var directiveBinderBuilder = elementBinder.bindDirective(directiveIndex);
	            current.compileChildren = current.compileChildren && dirMetadata.compileChildren;
	            if (lang_1.isPresent(dirMetadata.properties)) {
	                collection_1.ListWrapper.forEach(dirMetadata.properties, function (bindConfig) {
	                    _this._bindDirectiveProperty(bindConfig, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(dirMetadata.hostListeners)) {
	                _this._sortedKeysForEach(dirMetadata.hostListeners, function (action, eventName) {
	                    _this._bindDirectiveEvent(eventName, action, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(dirMetadata.hostProperties)) {
	                _this._sortedKeysForEach(dirMetadata.hostProperties, function (expression, hostPropertyName) {
	                    _this._bindHostProperty(hostPropertyName, expression, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(dirMetadata.hostAttributes)) {
	                _this._sortedKeysForEach(dirMetadata.hostAttributes, function (hostAttrValue, hostAttrName) {
	                    _this._addHostAttribute(hostAttrName, hostAttrValue, current);
	                });
	            }
	            if (lang_1.isPresent(dirMetadata.readAttributes)) {
	                collection_1.ListWrapper.forEach(dirMetadata.readAttributes, function (attrName) { elementBinder.readAttribute(attrName); });
	            }
	        });
	    };
	    DirectiveParser.prototype._sortedKeysForEach = function (map, fn) {
	        var keys = collection_1.MapWrapper.keys(map);
	        collection_1.ListWrapper.sort(keys, function (a, b) {
	            // Ensure a stable sort.
	            var compareVal = lang_1.StringWrapper.compare(a, b);
	            return compareVal == 0 ? -1 : compareVal;
	        });
	        collection_1.ListWrapper.forEach(keys, function (key) { fn(collection_1.MapWrapper.get(map, key), key); });
	    };
	    DirectiveParser.prototype._ensureHasOnlyOneComponent = function (elementBinder, elDescription) {
	        if (lang_1.isPresent(elementBinder.componentId)) {
	            throw new lang_1.BaseException("Only one component directive is allowed per element - check " + elDescription);
	        }
	    };
	    DirectiveParser.prototype._bindDirectiveProperty = function (bindConfig, compileElement, directiveBinderBuilder) {
	        // Name of the property on the directive
	        var dirProperty;
	        // Name of the property on the element
	        var elProp;
	        var pipes;
	        var assignIndex = bindConfig.indexOf(':');
	        if (assignIndex > -1) {
	            // canonical syntax: `dirProp: elProp | pipe0 | ... | pipeN`
	            dirProperty = lang_1.StringWrapper.substring(bindConfig, 0, assignIndex).trim();
	            pipes = this._splitBindConfig(lang_1.StringWrapper.substring(bindConfig, assignIndex + 1));
	            elProp = collection_1.ListWrapper.removeAt(pipes, 0);
	        }
	        else {
	            // shorthand syntax when the name of the property on the directive and on the element is the
	            // same, ie `property`
	            dirProperty = bindConfig;
	            elProp = bindConfig;
	            pipes = [];
	        }
	        elProp = util_1.dashCaseToCamelCase(elProp);
	        var bindingAst = compileElement.bindElement().propertyBindings.get(elProp);
	        if (lang_1.isBlank(bindingAst)) {
	            var attributeValue = compileElement.attrs().get(util_1.camelCaseToDashCase(elProp));
	            if (lang_1.isPresent(attributeValue)) {
	                bindingAst =
	                    this._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
	            }
	        }
	        // Bindings are optional, so this binding only needs to be set up if an expression is given.
	        if (lang_1.isPresent(bindingAst)) {
	            directiveBinderBuilder.bindProperty(dirProperty, bindingAst, elProp);
	        }
	    };
	    DirectiveParser.prototype._bindDirectiveEvent = function (eventName, action, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseAction(action, compileElement.elementDescription);
	        if (lang_1.StringWrapper.contains(eventName, util_1.EVENT_TARGET_SEPARATOR)) {
	            var parts = eventName.split(util_1.EVENT_TARGET_SEPARATOR);
	            directiveBinderBuilder.bindEvent(parts[1], ast, parts[0]);
	        }
	        else {
	            directiveBinderBuilder.bindEvent(eventName, ast);
	        }
	    };
	    DirectiveParser.prototype._bindHostProperty = function (hostPropertyName, expression, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseSimpleBinding(expression, "hostProperties of " + compileElement.elementDescription);
	        directiveBinderBuilder.bindHostProperty(hostPropertyName, ast);
	    };
	    DirectiveParser.prototype._addHostAttribute = function (attrName, attrValue, compileElement) {
	        if (lang_1.StringWrapper.equals(attrName, 'class')) {
	            collection_1.ListWrapper.forEach(attrValue.split(' '), function (className) { dom_adapter_1.DOM.addClass(compileElement.element, className); });
	        }
	        else if (!dom_adapter_1.DOM.hasAttribute(compileElement.element, attrName)) {
	            dom_adapter_1.DOM.setAttribute(compileElement.element, attrName, attrValue);
	        }
	    };
	    DirectiveParser.prototype._splitBindConfig = function (bindConfig) {
	        return collection_1.ListWrapper.map(bindConfig.split('|'), function (s) { return s.trim(); });
	    };
	    return DirectiveParser;
	})();
	exports.DirectiveParser = DirectiveParser;
	//# sourceMappingURL=directive_parser.js.map

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var util_1 = __webpack_require__(20);
	// Group 1 = "bind-"
	// Group 2 = "var-" or "#"
	// Group 3 = "on-"
	// Group 4 = "bindon-"
	// Group 5 = the identifier after "bind-", "var-/#", or "on-"
	// Group 6 = idenitifer inside [()]
	// Group 7 = idenitifer inside []
	// Group 8 = identifier inside ()
	var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
	/**
	 * Parses the property bindings on a single element.
	 */
	var PropertyBindingParser = (function () {
	    function PropertyBindingParser(_parser) {
	        this._parser = _parser;
	    }
	    PropertyBindingParser.prototype.process = function (parent, current, control) {
	        var _this = this;
	        var attrs = current.attrs();
	        var newAttrs = new Map();
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	            attrName = _this._normalizeAttributeName(attrName);
	            var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	            if (lang_1.isPresent(bindParts)) {
	                if (lang_1.isPresent(bindParts[1])) {
	                    _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[2])) {
	                    var identifier = bindParts[5];
	                    var value = attrValue == '' ? '\$implicit' : attrValue;
	                    _this._bindVariable(identifier, value, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[3])) {
	                    _this._bindEvent(bindParts[5], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[4])) {
	                    _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
	                    _this._bindAssignmentEvent(bindParts[5], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[6])) {
	                    _this._bindProperty(bindParts[6], attrValue, current, newAttrs);
	                    _this._bindAssignmentEvent(bindParts[6], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[7])) {
	                    _this._bindProperty(bindParts[7], attrValue, current, newAttrs);
	                }
	                else if (lang_1.isPresent(bindParts[8])) {
	                    _this._bindEvent(bindParts[8], attrValue, current, newAttrs);
	                }
	            }
	            else {
	                var expr = _this._parser.parseInterpolation(attrValue, current.elementDescription);
	                if (lang_1.isPresent(expr)) {
	                    _this._bindPropertyAst(attrName, expr, current, newAttrs);
	                }
	            }
	        });
	        collection_1.MapWrapper.forEach(newAttrs, function (attrValue, attrName) { attrs.set(attrName, attrValue); });
	    };
	    PropertyBindingParser.prototype._normalizeAttributeName = function (attrName) {
	        return lang_1.StringWrapper.startsWith(attrName, 'data-') ? lang_1.StringWrapper.substring(attrName, 5) :
	            attrName;
	    };
	    PropertyBindingParser.prototype._bindVariable = function (identifier, value, current, newAttrs) {
	        current.bindElement().bindVariable(util_1.dashCaseToCamelCase(identifier), value);
	        newAttrs.set(identifier, value);
	    };
	    PropertyBindingParser.prototype._bindProperty = function (name, expression, current, newAttrs) {
	        this._bindPropertyAst(name, this._parser.parseBinding(expression, current.elementDescription), current, newAttrs);
	    };
	    PropertyBindingParser.prototype._bindPropertyAst = function (name, ast, current, newAttrs) {
	        var binder = current.bindElement();
	        binder.bindProperty(util_1.dashCaseToCamelCase(name), ast);
	        newAttrs.set(name, ast.source);
	    };
	    PropertyBindingParser.prototype._bindAssignmentEvent = function (name, expression, current, newAttrs) {
	        this._bindEvent(name, expression + "=$event", current, newAttrs);
	    };
	    PropertyBindingParser.prototype._bindEvent = function (name, expression, current, newAttrs) {
	        current.bindElement().bindEvent(util_1.dashCaseToCamelCase(name), this._parser.parseAction(expression, current.elementDescription));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the CompileElement.attrs
	    };
	    return PropertyBindingParser;
	})();
	exports.PropertyBindingParser = PropertyBindingParser;
	//# sourceMappingURL=property_binding_parser.js.map

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var _EMPTY_ATTR_VALUE = '';
	// TODO: Can't use `const` here as
	// in Dart this is not transpiled into `final` yet...
	var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' +
	    '([-\\w]+)|' +
	    '(?:\\.([-\\w]+))|' +
	    '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	    '(\\))|' +
	    '(\\s*,\\s*)'); // ","
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = [];
	        this.attrs = [];
	        this.notSelectors = [];
	    }
	    CssSelector.parse = function (selector) {
	        var results = [];
	        var _addResult = function (res, cssSel) {
	            if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) &&
	                collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
	                cssSel.element = "*";
	            }
	            res.push(cssSel);
	        };
	        var cssSelector = new CssSelector();
	        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	        var match;
	        var current = cssSelector;
	        var inNot = false;
	        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            if (lang_1.isPresent(match[1])) {
	                if (inNot) {
	                    throw new lang_1.BaseException('Nesting :not is not allowed in a selector');
	                }
	                inNot = true;
	                current = new CssSelector();
	                cssSelector.notSelectors.push(current);
	            }
	            if (lang_1.isPresent(match[2])) {
	                current.setElement(match[2]);
	            }
	            if (lang_1.isPresent(match[3])) {
	                current.addClassName(match[3]);
	            }
	            if (lang_1.isPresent(match[4])) {
	                current.addAttribute(match[4], match[5]);
	            }
	            if (lang_1.isPresent(match[6])) {
	                inNot = false;
	                current = cssSelector;
	            }
	            if (lang_1.isPresent(match[7])) {
	                if (inNot) {
	                    throw new lang_1.BaseException('Multiple selectors in :not are not supported');
	                }
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    CssSelector.prototype.isElementSelector = function () {
	        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) &&
	            collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
	    };
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        if (lang_1.isPresent(element)) {
	            element = element.toLowerCase();
	        }
	        this.element = element;
	    };
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
	        this.attrs.push(name.toLowerCase());
	        if (lang_1.isPresent(value)) {
	            value = value.toLowerCase();
	        }
	        else {
	            value = _EMPTY_ATTR_VALUE;
	        }
	        this.attrs.push(value);
	    };
	    CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	    CssSelector.prototype.toString = function () {
	        var res = '';
	        if (lang_1.isPresent(this.element)) {
	            res += this.element;
	        }
	        if (lang_1.isPresent(this.classNames)) {
	            for (var i = 0; i < this.classNames.length; i++) {
	                res += '.' + this.classNames[i];
	            }
	        }
	        if (lang_1.isPresent(this.attrs)) {
	            for (var i = 0; i < this.attrs.length;) {
	                var attrName = this.attrs[i++];
	                var attrValue = this.attrs[i++];
	                res += '[' + attrName;
	                if (attrValue.length > 0) {
	                    res += '=' + attrValue;
	                }
	                res += ']';
	            }
	        }
	        collection_1.ListWrapper.forEach(this.notSelectors, function (notSelector) { res += ":not(" + notSelector.toString() + ")"; });
	        return res;
	    };
	    return CssSelector;
	})();
	exports.CssSelector = CssSelector;
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = new collection_1.Map();
	        this._elementPartialMap = new collection_1.Map();
	        this._classMap = new collection_1.Map();
	        this._classPartialMap = new collection_1.Map();
	        this._attrValueMap = new collection_1.Map();
	        this._attrValuePartialMap = new collection_1.Map();
	        this._listContexts = [];
	    }
	    SelectorMatcher.createNotMatcher = function (notSelectors) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher.addSelectables(notSelectors, null);
	        return notMatcher;
	    };
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            this._listContexts.push(listContext);
	        }
	        for (var i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param cssSelector A css selector
	     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var matcher = this;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (lang_1.isPresent(element)) {
	            var isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	                var className = classNames[index];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var isTerminal = index === attrs.length - 2;
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                if (isTerminal) {
	                    var terminalMap = matcher._attrValueMap;
	                    var terminalValuesMap = terminalMap.get(attrName);
	                    if (lang_1.isBlank(terminalValuesMap)) {
	                        terminalValuesMap = new collection_1.Map();
	                        terminalMap.set(attrName, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, attrValue, selectable);
	                }
	                else {
	                    var parttialMap = matcher._attrValuePartialMap;
	                    var partialValuesMap = parttialMap.get(attrName);
	                    if (lang_1.isBlank(partialValuesMap)) {
	                        partialValuesMap = new collection_1.Map();
	                        parttialMap.set(attrName, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, attrValue);
	                }
	            }
	        }
	    };
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var terminalList = map.get(name);
	        if (lang_1.isBlank(terminalList)) {
	            terminalList = [];
	            map.set(name, terminalList);
	        }
	        terminalList.push(selectable);
	    };
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var matcher = map.get(name);
	        if (lang_1.isBlank(matcher)) {
	            matcher = new SelectorMatcher();
	            map.set(name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param cssSelector A css selector
	     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return boolean true if a match was found
	    */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	        var result = false;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        for (var i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var className = classNames[index];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                var terminalValuesMap = this._attrValueMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
	                    result;
	                var partialValuesMap = this._attrValuePartialMap.get(attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                        result;
	                }
	                result =
	                    this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var selectables = map.get(name);
	        var starSelectables = map.get("*");
	        if (lang_1.isPresent(starSelectables)) {
	            selectables = collection_1.ListWrapper.concat(selectables, starSelectables);
	        }
	        if (lang_1.isBlank(selectables)) {
	            return false;
	        }
	        var selectable;
	        var result = false;
	        for (var index = 0; index < selectables.length; index++) {
	            selectable = selectables[index];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback /*: (CssSelector, any) => void*/) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var nestedSelector = map.get(name);
	        if (lang_1.isBlank(nestedSelector)) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	})();
	exports.SelectorMatcher = SelectorMatcher;
	var SelectorListContext = (function () {
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	})();
	exports.SelectorListContext = SelectorListContext;
	// Store context to pass back selector and context when a selector is matched
	var SelectorContext = (function () {
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	        this.notSelectors = selector.notSelectors;
	    }
	    SelectorContext.prototype.finalize = function (cssSelector, callback) {
	        var result = true;
	        if (this.notSelectors.length > 0 &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && lang_1.isPresent(callback) &&
	            (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            if (lang_1.isPresent(this.listContext)) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	})();
	exports.SelectorContext = SelectorContext;
	//# sourceMappingURL=selector.js.map

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	/**
	 * Parses interpolations in direct text child nodes of the current element.
	 */
	var TextInterpolationParser = (function () {
	    function TextInterpolationParser(_parser) {
	        this._parser = _parser;
	    }
	    TextInterpolationParser.prototype.process = function (parent, current, control) {
	        if (!current.compileChildren) {
	            return;
	        }
	        var element = current.element;
	        var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(element));
	        for (var i = 0; i < childNodes.length; i++) {
	            var node = childNodes[i];
	            if (dom_adapter_1.DOM.isTextNode(node)) {
	                var textNode = node;
	                var text = dom_adapter_1.DOM.nodeValue(textNode);
	                var expr = this._parser.parseInterpolation(text, current.elementDescription);
	                if (lang_1.isPresent(expr)) {
	                    dom_adapter_1.DOM.setText(textNode, ' ');
	                    if (current.element === current.inheritedProtoView.rootElement) {
	                        current.inheritedProtoView.bindRootText(textNode, expr);
	                    }
	                    else {
	                        current.bindElement().bindText(textNode, expr);
	                    }
	                }
	            }
	        }
	    };
	    return TextInterpolationParser;
	})();
	exports.TextInterpolationParser = TextInterpolationParser;
	//# sourceMappingURL=text_interpolation_parser.js.map

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var collection_1 = __webpack_require__(2);
	var compile_element_1 = __webpack_require__(151);
	var util_1 = __webpack_require__(20);
	/**
	 * Splits views at `<template>` elements or elements with `template` attribute:
	 * For `<template>` elements:
	 * - moves the content into a new and disconnected `<template>` element
	 *   that is marked as view root.
	 *
	 * For elements with a `template` attribute:
	 * - replaces the element with an empty `<template>` element,
	 *   parses the content of the `template` attribute and adds the information to that
	 *   `<template>` element. Marks the elements as view root.
	 *
	 * Note: In both cases the root of the nested view is disconnected from its parent element.
	 * This is needed for browsers that don't support the `<template>` element
	 * as we want to do locate elements with bindings using `getElementsByClassName` later on,
	 * which should not descend into the nested view.
	 */
	var ViewSplitter = (function () {
	    function ViewSplitter(_parser) {
	        this._parser = _parser;
	    }
	    ViewSplitter.prototype.process = function (parent, current, control) {
	        var attrs = current.attrs();
	        var templateBindings = attrs.get('template');
	        var hasTemplateBinding = lang_1.isPresent(templateBindings);
	        // look for template shortcuts such as *ng-if="condition" and treat them as template="if
	        // condition"
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	            if (lang_1.StringWrapper.startsWith(attrName, '*')) {
	                var key = lang_1.StringWrapper.substring(attrName, 1); // remove the star
	                if (hasTemplateBinding) {
	                    // 2nd template binding detected
	                    throw new lang_1.BaseException("Only one template directive per element is allowed: " +
	                        (templateBindings + " and " + key + " cannot be used simultaneously ") +
	                        ("in " + current.elementDescription));
	                }
	                else {
	                    templateBindings = (attrValue.length == 0) ? key : key + ' ' + attrValue;
	                    hasTemplateBinding = true;
	                }
	            }
	        });
	        if (lang_1.isPresent(parent)) {
	            if (dom_adapter_1.DOM.isTemplateElement(current.element)) {
	                if (!current.isViewRoot) {
	                    var viewRoot = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
	                    viewRoot.inheritedProtoView = current.bindElement().bindNestedProtoView(viewRoot.element);
	                    // viewRoot doesn't appear in the original template, so we associate
	                    // the current element description to get a more meaningful message in case of error
	                    viewRoot.elementDescription = current.elementDescription;
	                    viewRoot.isViewRoot = true;
	                    this._moveChildNodes(dom_adapter_1.DOM.content(current.element), dom_adapter_1.DOM.content(viewRoot.element));
	                    control.addChild(viewRoot);
	                }
	            }
	            if (hasTemplateBinding) {
	                var anchor = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
	                anchor.inheritedProtoView = current.inheritedProtoView;
	                anchor.inheritedElementBinder = current.inheritedElementBinder;
	                anchor.distanceToInheritedBinder = current.distanceToInheritedBinder;
	                // newParent doesn't appear in the original template, so we associate
	                // the current element description to get a more meaningful message in case of error
	                anchor.elementDescription = current.elementDescription;
	                var viewRoot = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
	                viewRoot.inheritedProtoView = anchor.bindElement().bindNestedProtoView(viewRoot.element);
	                // viewRoot doesn't appear in the original template, so we associate
	                // the current element description to get a more meaningful message in case of error
	                viewRoot.elementDescription = current.elementDescription;
	                viewRoot.isViewRoot = true;
	                current.inheritedProtoView = viewRoot.inheritedProtoView;
	                current.inheritedElementBinder = null;
	                current.distanceToInheritedBinder = 0;
	                this._parseTemplateBindings(templateBindings, anchor);
	                dom_adapter_1.DOM.insertBefore(current.element, anchor.element);
	                control.addParent(anchor);
	                dom_adapter_1.DOM.appendChild(dom_adapter_1.DOM.content(viewRoot.element), current.element);
	                control.addParent(viewRoot);
	            }
	        }
	    };
	    ViewSplitter.prototype._moveChildNodes = function (source, target) {
	        var next = dom_adapter_1.DOM.firstChild(source);
	        while (lang_1.isPresent(next)) {
	            dom_adapter_1.DOM.appendChild(target, next);
	            next = dom_adapter_1.DOM.firstChild(source);
	        }
	    };
	    ViewSplitter.prototype._parseTemplateBindings = function (templateBindings, compileElement) {
	        var bindings = this._parser.parseTemplateBindings(templateBindings, compileElement.elementDescription);
	        for (var i = 0; i < bindings.length; i++) {
	            var binding = bindings[i];
	            if (binding.keyIsVar) {
	                compileElement.bindElement().bindVariable(util_1.dashCaseToCamelCase(binding.key), binding.name);
	                compileElement.attrs().set(binding.key, binding.name);
	            }
	            else if (lang_1.isPresent(binding.expression)) {
	                compileElement.bindElement().bindProperty(util_1.dashCaseToCamelCase(binding.key), binding.expression);
	                compileElement.attrs().set(binding.key, binding.expression.source);
	            }
	            else {
	                dom_adapter_1.DOM.setAttribute(compileElement.element, binding.key, '');
	            }
	        }
	    };
	    return ViewSplitter;
	})();
	exports.ViewSplitter = ViewSplitter;
	//# sourceMappingURL=view_splitter.js.map

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var event_manager_1 = __webpack_require__(57);
	var collection_1 = __webpack_require__(2);
	var _eventNames = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	var HammerGesturesPluginCommon = (function (_super) {
	    __extends(HammerGesturesPluginCommon, _super);
	    function HammerGesturesPluginCommon() {
	        _super.call(this);
	    }
	    HammerGesturesPluginCommon.prototype.supports = function (eventName) {
	        eventName = eventName.toLowerCase();
	        return collection_1.StringMapWrapper.contains(_eventNames, eventName);
	    };
	    return HammerGesturesPluginCommon;
	})(event_manager_1.EventManagerPlugin);
	exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
	//# sourceMappingURL=hammer_common.js.map

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';/// <reference path="../../../../typings/hammerjs/hammerjs.d.ts"/>
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var hammer_common_1 = __webpack_require__(199);
	var lang_1 = __webpack_require__(1);
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    function HammerGesturesPlugin() {
	        _super.call(this);
	    }
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!_super.prototype.supports.call(this, eventName))
	            return false;
	        if (!lang_1.isPresent(window['Hammer'])) {
	            throw new lang_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
	        }
	        return true;
	    };
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        if (shouldSupportBubble)
	            throw new lang_1.BaseException('Hammer.js plugin does not support bubbling gestures.');
	        var zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            mc.on(eventName, function (eventObj) { zone.run(function () { handler(eventObj); }); });
	        });
	    };
	    return HammerGesturesPlugin;
	})(hammer_common_1.HammerGesturesPluginCommon);
	exports.HammerGesturesPlugin = HammerGesturesPlugin;
	//# sourceMappingURL=hammer_gestures.js.map

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(6);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var event_manager_1 = __webpack_require__(57);
	var modifierKeys = ['alt', 'control', 'meta', 'shift'];
	var modifierKeyGetters = {
	    'alt': function (event) { return event.altKey; },
	    'control': function (event) { return event.ctrlKey; },
	    'meta': function (event) { return event.metaKey; },
	    'shift': function (event) { return event.shiftKey; }
	};
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    function KeyEventsPlugin() {
	        _super.call(this);
	    }
	    KeyEventsPlugin.prototype.supports = function (eventName) {
	        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
	    };
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var outsideHandler = KeyEventsPlugin.eventCallback(element, shouldSupportBubble, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
	        this.manager.getZone().runOutsideAngular(function () {
	            dom_adapter_1.DOM.on(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
	        });
	    };
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var parts = eventName.toLowerCase().split('.');
	        var domEventName = collection_1.ListWrapper.removeAt(parts, 0);
	        if ((parts.length === 0) ||
	            !(lang_1.StringWrapper.equals(domEventName, 'keydown') ||
	                lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
	            return null;
	        }
	        var key = KeyEventsPlugin._normalizeKey(collection_1.ListWrapper.removeLast(parts));
	        var fullKey = '';
	        collection_1.ListWrapper.forEach(modifierKeys, function (modifierName) {
	            if (collection_1.ListWrapper.contains(parts, modifierName)) {
	                collection_1.ListWrapper.remove(parts, modifierName);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var result = collection_1.StringMapWrapper.create();
	        collection_1.StringMapWrapper.set(result, 'domEventName', domEventName);
	        collection_1.StringMapWrapper.set(result, 'fullKey', fullKey);
	        return result;
	    };
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var fullKey = '';
	        var key = dom_adapter_1.DOM.getEventKey(event);
	        key = key.toLowerCase();
	        if (lang_1.StringWrapper.equals(key, ' ')) {
	            key = 'space'; // for readability
	        }
	        else if (lang_1.StringWrapper.equals(key, '.')) {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        collection_1.ListWrapper.forEach(modifierKeys, function (modifierName) {
	            if (modifierName != key) {
	                var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    KeyEventsPlugin.eventCallback = function (element, shouldSupportBubble, fullKey, handler, zone) {
	        return function (event) {
	            var correctElement = shouldSupportBubble || event.target === element;
	            if (correctElement && lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
	                zone.run(function () { return handler(event); });
	            }
	        };
	    };
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a StringMap if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    return KeyEventsPlugin;
	})(event_manager_1.EventManagerPlugin);
	exports.KeyEventsPlugin = KeyEventsPlugin;
	//# sourceMappingURL=key_events.js.map

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var dom_adapter_1 = __webpack_require__(6);
	var emulated_unscoped_shadow_dom_strategy_1 = __webpack_require__(89);
	var util_1 = __webpack_require__(153);
	/**
	 * This strategy emulates the Shadow DOM for the templates, styles **included**:
	 * - components templates are added as children of their component element,
	 * - both the template and the styles are modified so that styles are scoped to the component
	 *   they belong to,
	 * - styles are moved from the templates to the styleHost (i.e. the document head).
	 *
	 * Notes:
	 * - styles are scoped to their component and will apply only to it,
	 * - a common subset of shadow DOM selectors are supported,
	 * - see `ShadowCss` for more information and limitations.
	 */
	var EmulatedScopedShadowDomStrategy = (function (_super) {
	    __extends(EmulatedScopedShadowDomStrategy, _super);
	    function EmulatedScopedShadowDomStrategy(styleHost) {
	        _super.call(this, styleHost);
	    }
	    EmulatedScopedShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        cssText = util_1.shimCssForComponent(cssText, hostComponentId);
	        dom_adapter_1.DOM.setText(styleEl, cssText);
	        this._moveToStyleHost(styleEl);
	    };
	    EmulatedScopedShadowDomStrategy.prototype._moveToStyleHost = function (styleEl) {
	        dom_adapter_1.DOM.remove(styleEl);
	        util_1.insertStyleElement(this.styleHost, styleEl);
	    };
	    EmulatedScopedShadowDomStrategy.prototype.processElement = function (hostComponentId, elementComponentId, element) {
	        // Shim the element as a child of the compiled component
	        if (lang_1.isPresent(hostComponentId)) {
	            var contentAttribute = util_1.getContentAttribute(util_1.getComponentId(hostComponentId));
	            dom_adapter_1.DOM.setAttribute(element, contentAttribute, '');
	        }
	        // If the current element is also a component, shim it as a host
	        if (lang_1.isPresent(elementComponentId)) {
	            var hostAttribute = util_1.getHostAttribute(util_1.getComponentId(elementComponentId));
	            dom_adapter_1.DOM.setAttribute(element, hostAttribute, '');
	        }
	    };
	    return EmulatedScopedShadowDomStrategy;
	})(emulated_unscoped_shadow_dom_strategy_1.EmulatedUnscopedShadowDomStrategy);
	exports.EmulatedScopedShadowDomStrategy = EmulatedScopedShadowDomStrategy;
	//# sourceMappingURL=emulated_scoped_shadow_dom_strategy.js.map

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var shadow_dom_strategy_1 = __webpack_require__(33);
	/**
	 * This strategies uses the native Shadow DOM support.
	 *
	 * The templates for the component are inserted in a Shadow Root created on the component element.
	 * Hence they are strictly isolated.
	 */
	var NativeShadowDomStrategy = (function (_super) {
	    __extends(NativeShadowDomStrategy, _super);
	    function NativeShadowDomStrategy() {
	        _super.apply(this, arguments);
	    }
	    NativeShadowDomStrategy.prototype.hasNativeContentElement = function () { return true; };
	    NativeShadowDomStrategy = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NativeShadowDomStrategy);
	    return NativeShadowDomStrategy;
	})(shadow_dom_strategy_1.ShadowDomStrategy);
	exports.NativeShadowDomStrategy = NativeShadowDomStrategy;
	//# sourceMappingURL=native_shadow_dom_strategy.js.map

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var dom_adapter_1 = __webpack_require__(6);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	/**
	 * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	 *
	 * Please make sure to keep to edits in sync with the source file.
	 *
	 * Source:
	 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	 *
	 * The original file level comment is reproduced below
	 */
	/*
	  This is a limited shim for ShadowDOM css styling.
	  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles
	
	  The intention here is to support only the styling features which can be
	  relatively simply implemented. The goal is to allow users to avoid the
	  most obvious pitfalls and do so without compromising performance significantly.
	  For ShadowDOM styling that's not covered here, a set of best practices
	  can be provided that should allow users to accomplish more complex styling.
	
	  The following is a list of specific ShadowDOM styling features and a brief
	  discussion of the approach used to shim.
	
	  Shimmed features:
	
	  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	  element using the :host rule. To shim this feature, the :host styles are
	  reformatted and prefixed with a given scope name and promoted to a
	  document level stylesheet.
	  For example, given a scope name of .foo, a rule like this:
	
	    :host {
	        background: red;
	      }
	    }
	
	  becomes:
	
	    .foo {
	      background: red;
	    }
	
	  * encapsultion: Styles defined within ShadowDOM, apply only to
	  dom inside the ShadowDOM. Polymer uses one of two techniques to imlement
	  this feature.
	
	  By default, rules are prefixed with the host element tag name
	  as a descendant selector. This ensures styling does not leak out of the 'top'
	  of the element's ShadowDOM. For example,
	
	  div {
	      font-weight: bold;
	    }
	
	  becomes:
	
	  x-foo div {
	      font-weight: bold;
	    }
	
	  becomes:
	
	
	  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	  selectors are scoped by adding an attribute selector suffix to each
	  simple selector that contains the host element tag name. Each element
	  in the element's ShadowDOM template is also given the scope attribute.
	  Thus, these rules match only elements that have the scope attribute.
	  For example, given a scope name of x-foo, a rule like this:
	
	    div {
	      font-weight: bold;
	    }
	
	  becomes:
	
	    div[x-foo] {
	      font-weight: bold;
	    }
	
	  Note that elements that are dynamically added to a scope must have the scope
	  selector added to them manually.
	
	  * upper/lower bound encapsulation: Styles which are defined outside a
	  shadowRoot should not cross the ShadowDOM boundary and should not apply
	  inside a shadowRoot.
	
	  This styling behavior is not emulated. Some possible ways to do this that
	  were rejected due to complexity and/or performance concerns include: (1) reset
	  every possible property for every possible selector for a given scope name;
	  (2) re-implement css in javascript.
	
	  As an alternative, users should make sure to use selectors
	  specific to the scope in which they are working.
	
	  * ::distributed: This behavior is not emulated. It's often not necessary
	  to style the contents of a specific insertion point and instead, descendants
	  of the host element can be styled selectively. Users can also create an
	  extra node around an insertion point and style that node's contents
	  via descendent selectors. For example, with a shadowRoot like this:
	
	    <style>
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <content></content>
	
	  could become:
	
	    <style>
	      / *@polyfill .content-container div * /
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <div class="content-container">
	      <content></content>
	    </div>
	
	  Note the use of @polyfill in the comment above a ShadowDOM specific style
	  declaration. This is a directive to the styling shim to use the selector
	  in comments in lieu of the next selector when running under polyfill.
	*/
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /*
	    * Shim a style element with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    */
	    ShadowCss.prototype.shimStyle = function (style, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        var cssText = dom_adapter_1.DOM.getText(style);
	        return this.shimCssText(cssText, selector, hostSelector);
	    };
	    /*
	    * Shim some cssText with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    *
	    * When strictStyling is true:
	    * - selector is the attribute added to all elements inside the host,
	    * - hostSelector is the attribute added to the host itself.
	    */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector);
	    };
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /*
	     * Process styles to convert native ShadowDOM rules that will trip
	     * up the css parser; we rely on decorating the stylesheet with inert rules.
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-next-selector { content: ':host menu-item'; }
	     * ::content menu-item {
	     *
	     * to this:
	     *
	     * scopeName menu-item {
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) { return m[1] + '{'; });
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-rule {
	     *   content: ':host menu-item';
	     * ...
	     * }
	     *
	     * to this:
	     *
	     * scopeName menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[1], '');
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            return m[3] + rule;
	        });
	    };
	    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	     *
	     *  .foo {... }
	     *
	     *  and converts this to
	     *
	     *  scopeName .foo { ... }
	    */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (lang_1.isPresent(scopeSelector)) {
	            _withCssRules(cssText, function (rules) { cssText = _this._scopeRules(rules, scopeSelector, hostSelector); });
	        }
	        cssText = cssText + '\n' + unscoped;
	        return cssText.trim();
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	     * occasions, e.g. -webkit-calc on Safari.)
	     * For example, we convert this rule:
	     *
	     * @polyfill-unscoped-rule {
	     *   content: 'menu-item';
	     * ... }
	     *
	     * to this:
	     *
	     * menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var r = '', m;
	        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
	            r += rule + '\n\n';
	        }
	        return r;
	    };
	    /*
	     * convert a rule like :host(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar
	    */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /*
	     * convert a rule like :host-context(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar, .foo scopeName > .bar { }
	     *
	     * and
	     *
	     * :host-context(.foo:host) .bar { ... }
	     *
	     * to
	     *
	     * scopeName.foo .bar { ... }
	    */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // p1 = :host, p2 = contents of (), p3 rest of rule
	        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
	            if (lang_1.isPresent(m[2])) {
	                var parts = m[2].split(','), r = [];
	                for (var i = 0; i < parts.length; i++) {
	                    var p = parts[i];
	                    if (lang_1.isBlank(p))
	                        break;
	                    p = p.trim();
	                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
	    };
	    /*
	     * Convert combinators like ::shadow and pseudo-elements like ::content
	     * by replacing with space.
	    */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	            cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	        }
	        return cssText;
	    };
	    // change a selector like 'div' to 'name div'
	    ShadowCss.prototype._scopeRules = function (cssRules, scopeSelector, hostSelector) {
	        var cssText = '';
	        if (lang_1.isPresent(cssRules)) {
	            for (var i = 0; i < cssRules.length; i++) {
	                var rule = cssRules[i];
	                if (dom_adapter_1.DOM.isStyleRule(rule) || dom_adapter_1.DOM.isPageRule(rule)) {
	                    cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) +
	                        ' {\n';
	                    cssText += this._propertiesFromRule(rule) + '\n}\n\n';
	                }
	                else if (dom_adapter_1.DOM.isMediaRule(rule)) {
	                    cssText += '@media ' + rule.media.mediaText + ' {\n';
	                    cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
	                    cssText += '\n}\n\n';
	                }
	                else {
	                    // KEYFRAMES_RULE in IE throws when we query cssText
	                    // when it contains a -webkit- property.
	                    // if this happens, we fallback to constructing the rule
	                    // from the CSSRuleSet
	                    // https://connect.microsoft.com/IE/feedbackdetail/view/955703/accessing-csstext-of-a-keyframe-rule-that-contains-a-webkit-property-via-cssom-generates-exception
	                    try {
	                        if (lang_1.isPresent(rule.cssText)) {
	                            cssText += rule.cssText + '\n\n';
	                        }
	                    }
	                    catch (x) {
	                        if (dom_adapter_1.DOM.isKeyframesRule(rule) && lang_1.isPresent(rule.cssRules)) {
	                            cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
	                        }
	                    }
	                }
	            }
	        }
	        return cssText;
	    };
	    ShadowCss.prototype._ieSafeCssTextFromKeyFrameRule = function (rule) {
	        var cssText = '@keyframes ' + rule.name + ' {';
	        for (var i = 0; i < rule.cssRules.length; i++) {
	            var r = rule.cssRules[i];
	            cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
	        }
	        cssText += ' }';
	        return cssText;
	    };
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var r = [], parts = selector.split(',');
	        for (var i = 0; i < parts.length; i++) {
	            var p = parts[i];
	            p = p.trim();
	            if (this._selectorNeedsScoping(p, scopeSelector)) {
	                p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ?
	                    this._applyStrictSelectorScope(p, scopeSelector) :
	                    this._applySelectorScope(p, scopeSelector, hostSelector);
	            }
	            r.push(p);
	        }
	        return r.join(', ');
	    };
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var re = this._makeScopeMatcher(scopeSelector);
	        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
	    };
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var lre = /\[/g;
	        var rre = /\]/g;
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponentsjs: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    // scope via name and [is=name]
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	            var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	            return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
	        }
	        else {
	            return scopeSelector + ' ' + selector;
	        }
	    };
	    // return a selector with [name] suffix on each simple selector
	    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
	        var isRe = /\[is=([^\]]*)\]/g;
	        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) { return m[1]; });
	        var splits = [' ', '>', '+', '~'], scoped = selector, attrName = '[' + scopeSelector + ']';
	        for (var i = 0; i < splits.length; i++) {
	            var sep = splits[i];
	            var parts = scoped.split(sep);
	            scoped = collection_1.ListWrapper.map(parts, function (p) {
	                // remove :host since it should be unnecessary
	                var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	                if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) &&
	                    !lang_1.StringWrapper.contains(t, attrName)) {
	                    var re = /([^:]*)(:*)(.*)/g;
	                    var m = lang_1.RegExpWrapper.firstMatch(re, t);
	                    if (lang_1.isPresent(m)) {
	                        p = m[1] + attrName + m[2] + m[3];
	                    }
	                }
	                return p;
	            }).join(sep);
	        }
	        return scoped;
	    };
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	        return selector;
	    };
	    ShadowCss.prototype._propertiesFromRule = function (rule) {
	        var cssText = rule.style.cssText;
	        // TODO(sorvell): Safari cssom incorrectly removes quotes from the content
	        // property. (https://bugs.webkit.org/show_bug.cgi?id=118045)
	        // don't replace attr rules
	        var attrRe = /['"]+|attr/g;
	        if (rule.style.content.length > 0 &&
	            !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
	            var contentRe = /content:[^;]*;/g;
	            cssText =
	                lang_1.StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
	        }
	        // TODO(sorvell): we can workaround this issue here, but we need a list
	        // of troublesome properties to fix https://github.com/Polymer/platform/issues/53
	        //
	        // inherit rules can be omitted from cssText
	        // TODO(sorvell): remove when Blink bug is fixed:
	        // https://code.google.com/p/chromium/issues/detail?id=358273
	        // var style = rule.style;
	        // for (var i = 0; i < style.length; i++) {
	        //  var name = style.item(i);
	        //  var value = style.getPropertyValue(name);
	        //  if (value == 'initial') {
	        //    cssText += name + ': initial; ';
	        //  }
	        //}
	        return cssText;
	    };
	    return ShadowCss;
	})();
	exports.ShadowCss = ShadowCss;
	var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
	var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [
	    />>>/g,
	    /::shadow/g,
	    /::content/g,
	    // Deprecated selectors
	    // TODO(vicb): see https://github.com/angular/clang-format/issues/16
	    // clang-format off
	    /\/deep\//g,
	    /\/shadow-deep\//g,
	    /\/shadow\//g,
	];
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = /:host/gim;
	var _colonHostContextRe = /:host-context/gim;
	function _cssToRules(cssText) {
	    return dom_adapter_1.DOM.cssToRules(cssText);
	}
	function _withCssRules(cssText, callback) {
	    // Difference from webcomponentjs: remove the workaround for an old bug in Chrome
	    if (lang_1.isBlank(callback))
	        return;
	    var rules = _cssToRules(cssText);
	    callback(rules);
	}
	//# sourceMappingURL=shadow_css.js.map

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var util_1 = __webpack_require__(20);
	var ShadowDomCompileStep = (function () {
	    function ShadowDomCompileStep(_shadowDomStrategy, _view) {
	        this._shadowDomStrategy = _shadowDomStrategy;
	        this._view = _view;
	    }
	    ShadowDomCompileStep.prototype.process = function (parent, current, control) {
	        if (util_1.isElementWithTag(current.element, util_1.NG_CONTENT_ELEMENT_NAME)) {
	            current.inheritedProtoView.bindNgContent();
	        }
	        else if (util_1.isElementWithTag(current.element, 'style')) {
	            this._processStyleElement(current, control);
	        }
	        else {
	            var componentId = current.isBound() ? current.inheritedElementBinder.componentId : null;
	            this._shadowDomStrategy.processElement(this._view.componentId, componentId, current.element);
	        }
	    };
	    ShadowDomCompileStep.prototype._processStyleElement = function (current, control) {
	        this._shadowDomStrategy.processStyleElement(this._view.componentId, this._view.templateAbsUrl, current.element);
	        // Style elements should not be further processed by the compiler, as they can not contain
	        // bindings. Skipping further compiler steps allow speeding up the compilation process.
	        control.ignoreCurrentElement();
	    };
	    return ShadowDomCompileStep;
	})();
	exports.ShadowDomCompileStep = ShadowDomCompileStep;
	//# sourceMappingURL=shadow_dom_compile_step.js.map

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var api_1 = __webpack_require__(7);
	function resolveInternalDomFragment(fragmentRef) {
	    return fragmentRef._nodes;
	}
	exports.resolveInternalDomFragment = resolveInternalDomFragment;
	var DomFragmentRef = (function (_super) {
	    __extends(DomFragmentRef, _super);
	    function DomFragmentRef(_nodes) {
	        _super.call(this);
	        this._nodes = _nodes;
	    }
	    return DomFragmentRef;
	})(api_1.RenderFragmentRef);
	exports.DomFragmentRef = DomFragmentRef;
	//# sourceMappingURL=fragment.js.map

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var dom_adapter_1 = __webpack_require__(6);
	var change_detection_1 = __webpack_require__(12);
	var proto_view_1 = __webpack_require__(90);
	var element_binder_1 = __webpack_require__(154);
	var api = __webpack_require__(7);
	var util_1 = __webpack_require__(20);
	var ProtoViewBuilder = (function () {
	    function ProtoViewBuilder(rootElement, type, useNativeShadowDom) {
	        if (useNativeShadowDom === void 0) { useNativeShadowDom = false; }
	        this.rootElement = rootElement;
	        this.type = type;
	        this.useNativeShadowDom = useNativeShadowDom;
	        this.variableBindings = new Map();
	        this.elements = [];
	        this.rootTextBindings = new Map();
	        this.ngContentCount = 0;
	    }
	    ProtoViewBuilder.prototype.bindElement = function (element, description) {
	        if (description === void 0) { description = null; }
	        var builder = new ElementBinderBuilder(this.elements.length, element, description);
	        this.elements.push(builder);
	        dom_adapter_1.DOM.addClass(element, util_1.NG_BINDING_CLASS);
	        return builder;
	    };
	    ProtoViewBuilder.prototype.bindVariable = function (name, value) {
	        // Store the variable map from value to variable, reflecting how it will be used later by
	        // DomView. When a local is set to the view, a lookup for the variable name will take place
	        // keyed
	        // by the "value", or exported identifier. For example, ng-for sets a view local of "index".
	        // When this occurs, a lookup keyed by "index" must occur to find if there is a var referencing
	        // it.
	        this.variableBindings.set(value, name);
	    };
	    // Note: We don't store the node index until the compilation is complete,
	    // as the compiler might change the order of elements.
	    ProtoViewBuilder.prototype.bindRootText = function (textNode, expression) {
	        this.rootTextBindings.set(textNode, expression);
	    };
	    ProtoViewBuilder.prototype.bindNgContent = function () { this.ngContentCount++; };
	    ProtoViewBuilder.prototype.build = function () {
	        var _this = this;
	        var domElementBinders = [];
	        var apiElementBinders = [];
	        var textNodeExpressions = [];
	        var rootTextNodeIndices = [];
	        var transitiveNgContentCount = this.ngContentCount;
	        util_1.queryBoundTextNodeIndices(dom_adapter_1.DOM.content(this.rootElement), this.rootTextBindings, function (node, nodeIndex, expression) {
	            textNodeExpressions.push(expression);
	            rootTextNodeIndices.push(nodeIndex);
	        });
	        collection_1.ListWrapper.forEach(this.elements, function (ebb) {
	            var directiveTemplatePropertyNames = new collection_1.Set();
	            var apiDirectiveBinders = collection_1.ListWrapper.map(ebb.directives, function (dbb) {
	                ebb.eventBuilder.merge(dbb.eventBuilder);
	                collection_1.ListWrapper.forEach(dbb.templatePropertyNames, function (name) { return directiveTemplatePropertyNames.add(name); });
	                return new api.DirectiveBinder({
	                    directiveIndex: dbb.directiveIndex,
	                    propertyBindings: dbb.propertyBindings,
	                    eventBindings: dbb.eventBindings,
	                    hostPropertyBindings: buildElementPropertyBindings(ebb.element, lang_1.isPresent(ebb.componentId), dbb.hostPropertyBindings, directiveTemplatePropertyNames)
	                });
	            });
	            var nestedProtoView = lang_1.isPresent(ebb.nestedProtoView) ? ebb.nestedProtoView.build() : null;
	            if (lang_1.isPresent(nestedProtoView)) {
	                transitiveNgContentCount += nestedProtoView.transitiveNgContentCount;
	            }
	            var parentIndex = lang_1.isPresent(ebb.parent) ? ebb.parent.index : -1;
	            var textNodeIndices = [];
	            util_1.queryBoundTextNodeIndices(ebb.element, ebb.textBindings, function (node, nodeIndex, expression) {
	                textNodeExpressions.push(expression);
	                textNodeIndices.push(nodeIndex);
	            });
	            apiElementBinders.push(new api.ElementBinder({
	                index: ebb.index,
	                parentIndex: parentIndex,
	                distanceToParent: ebb.distanceToParent,
	                directives: apiDirectiveBinders,
	                nestedProtoView: nestedProtoView,
	                propertyBindings: buildElementPropertyBindings(ebb.element, lang_1.isPresent(ebb.componentId), ebb.propertyBindings, directiveTemplatePropertyNames),
	                variableBindings: ebb.variableBindings,
	                eventBindings: ebb.eventBindings,
	                readAttributes: ebb.readAttributes
	            }));
	            domElementBinders.push(new element_binder_1.DomElementBinder({
	                textNodeIndices: textNodeIndices,
	                hasNestedProtoView: lang_1.isPresent(nestedProtoView) || lang_1.isPresent(ebb.componentId),
	                hasNativeShadowRoot: lang_1.isPresent(ebb.componentId) && _this.useNativeShadowDom,
	                eventLocals: new change_detection_1.LiteralArray(ebb.eventBuilder.buildEventLocals()),
	                localEvents: ebb.eventBuilder.buildLocalEvents(),
	                globalEvents: ebb.eventBuilder.buildGlobalEvents()
	            }));
	        });
	        var rootNodeCount = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.content(this.rootElement)).length;
	        return new api.ProtoViewDto({
	            render: new proto_view_1.DomProtoViewRef(proto_view_1.DomProtoView.create(this.type, this.rootElement, [rootNodeCount], rootTextNodeIndices, domElementBinders)),
	            type: this.type,
	            elementBinders: apiElementBinders,
	            variableBindings: this.variableBindings,
	            textBindings: textNodeExpressions,
	            transitiveNgContentCount: transitiveNgContentCount
	        });
	    };
	    return ProtoViewBuilder;
	})();
	exports.ProtoViewBuilder = ProtoViewBuilder;
	var ElementBinderBuilder = (function () {
	    function ElementBinderBuilder(index, element, description) {
	        this.index = index;
	        this.element = element;
	        this.parent = null;
	        this.distanceToParent = 0;
	        this.directives = [];
	        this.nestedProtoView = null;
	        this.propertyBindings = new Map();
	        this.variableBindings = new Map();
	        this.propertyBindingsToDirectives = new collection_1.Set();
	        this.eventBindings = [];
	        this.eventBuilder = new EventBuilder();
	        this.textBindings = new Map();
	        this.readAttributes = new Map();
	        this.componentId = null;
	    }
	    ElementBinderBuilder.prototype.setParent = function (parent, distanceToParent) {
	        this.parent = parent;
	        if (lang_1.isPresent(parent)) {
	            this.distanceToParent = distanceToParent;
	        }
	        return this;
	    };
	    ElementBinderBuilder.prototype.readAttribute = function (attrName) {
	        if (lang_1.isBlank(this.readAttributes.get(attrName))) {
	            this.readAttributes.set(attrName, dom_adapter_1.DOM.getAttribute(this.element, attrName));
	        }
	    };
	    ElementBinderBuilder.prototype.bindDirective = function (directiveIndex) {
	        var directive = new DirectiveBuilder(directiveIndex);
	        this.directives.push(directive);
	        return directive;
	    };
	    ElementBinderBuilder.prototype.bindNestedProtoView = function (rootElement) {
	        if (lang_1.isPresent(this.nestedProtoView)) {
	            throw new lang_1.BaseException('Only one nested view per element is allowed');
	        }
	        this.nestedProtoView = new ProtoViewBuilder(rootElement, api.ViewType.EMBEDDED);
	        return this.nestedProtoView;
	    };
	    ElementBinderBuilder.prototype.bindProperty = function (name, expression) {
	        this.propertyBindings.set(name, expression);
	    };
	    ElementBinderBuilder.prototype.bindPropertyToDirective = function (name) {
	        // we are filling in a set of property names that are bound to a property
	        // of at least one directive. This allows us to report "dangling" bindings.
	        this.propertyBindingsToDirectives.add(name);
	    };
	    ElementBinderBuilder.prototype.bindVariable = function (name, value) {
	        // When current is a view root, the variable bindings are set to the *nested* proto view.
	        // The root view conceptually signifies a new "block scope" (the nested view), to which
	        // the variables are bound.
	        if (lang_1.isPresent(this.nestedProtoView)) {
	            this.nestedProtoView.bindVariable(name, value);
	        }
	        else {
	            // Store the variable map from value to variable, reflecting how it will be used later by
	            // DomView. When a local is set to the view, a lookup for the variable name will take place
	            // keyed
	            // by the "value", or exported identifier. For example, ng-for sets a view local of "index".
	            // When this occurs, a lookup keyed by "index" must occur to find if there is a var
	            // referencing
	            // it.
	            this.variableBindings.set(value, name);
	        }
	    };
	    ElementBinderBuilder.prototype.bindEvent = function (name, expression, target) {
	        if (target === void 0) { target = null; }
	        this.eventBindings.push(this.eventBuilder.add(name, expression, target));
	    };
	    // Note: We don't store the node index until the compilation is complete,
	    // as the compiler might change the order of elements.
	    ElementBinderBuilder.prototype.bindText = function (textNode, expression) {
	        this.textBindings.set(textNode, expression);
	    };
	    ElementBinderBuilder.prototype.setComponentId = function (componentId) { this.componentId = componentId; };
	    return ElementBinderBuilder;
	})();
	exports.ElementBinderBuilder = ElementBinderBuilder;
	var DirectiveBuilder = (function () {
	    function DirectiveBuilder(directiveIndex) {
	        this.directiveIndex = directiveIndex;
	        // mapping from directive property name to AST for that directive
	        this.propertyBindings = new Map();
	        // property names used in the template
	        this.templatePropertyNames = [];
	        this.hostPropertyBindings = new Map();
	        this.eventBindings = [];
	        this.eventBuilder = new EventBuilder();
	    }
	    DirectiveBuilder.prototype.bindProperty = function (name, expression, elProp) {
	        this.propertyBindings.set(name, expression);
	        if (lang_1.isPresent(elProp)) {
	            // we are filling in a set of property names that are bound to a property
	            // of at least one directive. This allows us to report "dangling" bindings.
	            this.templatePropertyNames.push(elProp);
	        }
	    };
	    DirectiveBuilder.prototype.bindHostProperty = function (name, expression) {
	        this.hostPropertyBindings.set(name, expression);
	    };
	    DirectiveBuilder.prototype.bindEvent = function (name, expression, target) {
	        if (target === void 0) { target = null; }
	        this.eventBindings.push(this.eventBuilder.add(name, expression, target));
	    };
	    return DirectiveBuilder;
	})();
	exports.DirectiveBuilder = DirectiveBuilder;
	var EventBuilder = (function (_super) {
	    __extends(EventBuilder, _super);
	    function EventBuilder() {
	        _super.call(this);
	        this.locals = [];
	        this.localEvents = [];
	        this.globalEvents = [];
	        this._implicitReceiver = new change_detection_1.ImplicitReceiver();
	    }
	    EventBuilder.prototype.add = function (name, source, target) {
	        // TODO(tbosch): reenable this when we are parsing element properties
	        // out of action expressions
	        // var adjustedAst = astWithSource.ast.visit(this);
	        var adjustedAst = source.ast;
	        var fullName = lang_1.isPresent(target) ? target + util_1.EVENT_TARGET_SEPARATOR + name : name;
	        var result = new api.EventBinding(fullName, new change_detection_1.ASTWithSource(adjustedAst, source.source, source.location));
	        var event = new element_binder_1.Event(name, target, fullName);
	        if (lang_1.isBlank(target)) {
	            this.localEvents.push(event);
	        }
	        else {
	            this.globalEvents.push(event);
	        }
	        return result;
	    };
	    EventBuilder.prototype.visitAccessMember = function (ast) {
	        var isEventAccess = false;
	        var current = ast;
	        while (!isEventAccess && (current instanceof change_detection_1.AccessMember)) {
	            var am = current;
	            if (am.name == '$event') {
	                isEventAccess = true;
	            }
	            current = am.receiver;
	        }
	        if (isEventAccess) {
	            this.locals.push(ast);
	            var index = this.locals.length - 1;
	            return new change_detection_1.AccessMember(this._implicitReceiver, "" + index, function (arr) { return arr[index]; }, null);
	        }
	        else {
	            return ast;
	        }
	    };
	    EventBuilder.prototype.buildEventLocals = function () { return this.locals; };
	    EventBuilder.prototype.buildLocalEvents = function () { return this.localEvents; };
	    EventBuilder.prototype.buildGlobalEvents = function () { return this.globalEvents; };
	    EventBuilder.prototype.merge = function (eventBuilder) {
	        this._merge(this.localEvents, eventBuilder.localEvents);
	        this._merge(this.globalEvents, eventBuilder.globalEvents);
	        collection_1.ListWrapper.concat(this.locals, eventBuilder.locals);
	    };
	    EventBuilder.prototype._merge = function (host, tobeAdded) {
	        var names = [];
	        for (var i = 0; i < host.length; i++) {
	            names.push(host[i].fullName);
	        }
	        for (var j = 0; j < tobeAdded.length; j++) {
	            if (!collection_1.ListWrapper.contains(names, tobeAdded[j].fullName)) {
	                host.push(tobeAdded[j]);
	            }
	        }
	    };
	    return EventBuilder;
	})(change_detection_1.AstTransformer);
	exports.EventBuilder = EventBuilder;
	var PROPERTY_PARTS_SEPARATOR = new RegExp('\\.');
	var ATTRIBUTE_PREFIX = 'attr';
	var CLASS_PREFIX = 'class';
	var STYLE_PREFIX = 'style';
	function buildElementPropertyBindings(protoElement, isNgComponent, bindingsInTemplate, directiveTempaltePropertyNames) {
	    var propertyBindings = [];
	    collection_1.MapWrapper.forEach(bindingsInTemplate, function (ast, propertyNameInTemplate) {
	        var propertyBinding = createElementPropertyBinding(ast, propertyNameInTemplate);
	        if (isValidElementPropertyBinding(protoElement, isNgComponent, propertyBinding)) {
	            propertyBindings.push(propertyBinding);
	        }
	        else if (!collection_1.SetWrapper.has(directiveTempaltePropertyNames, propertyNameInTemplate)) {
	            throw new lang_1.BaseException("Can't bind to '" + propertyNameInTemplate + "' since it isn't a known property of the '<" + dom_adapter_1.DOM.tagName(protoElement).toLowerCase() + ">' element and there are no matching directives with a corresponding property");
	        }
	    });
	    return propertyBindings;
	}
	function isValidElementPropertyBinding(protoElement, isNgComponent, binding) {
	    if (binding.type === api.PropertyBindingType.PROPERTY) {
	        var tagName = dom_adapter_1.DOM.tagName(protoElement);
	        var possibleCustomElement = tagName.indexOf('-') !== -1;
	        if (possibleCustomElement && !isNgComponent) {
	            // can't tell now as we don't know which properties a custom element will get
	            // once it is instantiated
	            return true;
	        }
	        else {
	            return dom_adapter_1.DOM.hasProperty(protoElement, binding.property);
	        }
	    }
	    return true;
	}
	function createElementPropertyBinding(ast, propertyNameInTemplate) {
	    var parts = lang_1.StringWrapper.split(propertyNameInTemplate, PROPERTY_PARTS_SEPARATOR);
	    if (parts.length === 1) {
	        var propName = parts[0];
	        var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, propName);
	        propName = lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
	        return new api.ElementPropertyBinding(api.PropertyBindingType.PROPERTY, ast, propName);
	    }
	    else if (parts[0] == ATTRIBUTE_PREFIX) {
	        return new api.ElementPropertyBinding(api.PropertyBindingType.ATTRIBUTE, ast, parts[1]);
	    }
	    else if (parts[0] == CLASS_PREFIX) {
	        return new api.ElementPropertyBinding(api.PropertyBindingType.CLASS, ast, parts[1]);
	    }
	    else if (parts[0] == STYLE_PREFIX) {
	        var unit = parts.length > 2 ? parts[2] : null;
	        return new api.ElementPropertyBinding(api.PropertyBindingType.STYLE, ast, parts[1], unit);
	    }
	    else {
	        throw new lang_1.BaseException("Invalid property name " + propertyNameInTemplate);
	    }
	}
	//# sourceMappingURL=proto_view_builder.js.map

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var dom_adapter_1 = __webpack_require__(6);
	var lang_1 = __webpack_require__(1);
	var collection_1 = __webpack_require__(2);
	var proto_view_1 = __webpack_require__(90);
	var element_binder_1 = __webpack_require__(154);
	var api_1 = __webpack_require__(7);
	var util_1 = __webpack_require__(20);
	function mergeProtoViewsRecursively(protoViewRefs) {
	    // clone
	    var clonedProtoViews = [];
	    var hostViewAndBinderIndices = [];
	    cloneProtoViews(protoViewRefs, clonedProtoViews, hostViewAndBinderIndices);
	    var mainProtoView = clonedProtoViews[0];
	    // modify the DOM
	    mergeEmbeddedPvsIntoComponentOrRootPv(clonedProtoViews, hostViewAndBinderIndices);
	    var fragments = [];
	    mergeComponents(clonedProtoViews, hostViewAndBinderIndices, fragments);
	    // Note: Need to remark parent elements of bound text nodes
	    // so that we can find them later via queryBoundElements!
	    markBoundTextNodeParentsAsBoundElements(clonedProtoViews);
	    // create a new root element with the changed fragments and elements
	    var rootElement = createRootElementFromFragments(fragments);
	    var fragmentsRootNodeCount = fragments.map(function (fragment) { return fragment.length; });
	    var rootNode = dom_adapter_1.DOM.content(rootElement);
	    // read out the new element / text node / ElementBinder order
	    var mergedBoundElements = util_1.queryBoundElements(rootNode, false);
	    var mergedBoundTextIndices = new Map();
	    var boundTextNodeMap = indexBoundTextNodes(clonedProtoViews);
	    var rootTextNodeIndices = calcRootTextNodeIndices(rootNode, boundTextNodeMap, mergedBoundTextIndices);
	    var mergedElementBinders = calcElementBinders(clonedProtoViews, mergedBoundElements, boundTextNodeMap, mergedBoundTextIndices);
	    // create element / text index mappings
	    var mappedElementIndices = calcMappedElementIndices(clonedProtoViews, mergedBoundElements);
	    var mappedTextIndices = calcMappedTextIndices(clonedProtoViews, mergedBoundTextIndices);
	    // create result
	    var hostElementIndicesByViewIndex = calcHostElementIndicesByViewIndex(clonedProtoViews, hostViewAndBinderIndices);
	    var nestedViewCounts = calcNestedViewCounts(hostViewAndBinderIndices);
	    var mergedProtoView = proto_view_1.DomProtoView.create(mainProtoView.original.type, rootElement, fragmentsRootNodeCount, rootTextNodeIndices, mergedElementBinders);
	    return new api_1.RenderProtoViewMergeMapping(new proto_view_1.DomProtoViewRef(mergedProtoView), fragmentsRootNodeCount.length, mappedElementIndices, mappedTextIndices, hostElementIndicesByViewIndex, nestedViewCounts);
	}
	exports.mergeProtoViewsRecursively = mergeProtoViewsRecursively;
	function cloneProtoViews(protoViewRefs, targetClonedProtoViews, targetHostViewAndBinderIndices) {
	    var hostProtoView = proto_view_1.resolveInternalDomProtoView(protoViewRefs[0]);
	    var hostPvIdx = targetClonedProtoViews.length;
	    targetClonedProtoViews.push(util_1.cloneAndQueryProtoView(hostProtoView, false));
	    if (targetHostViewAndBinderIndices.length === 0) {
	        targetHostViewAndBinderIndices.push([null, null]);
	    }
	    var protoViewIdx = 1;
	    for (var i = 0; i < hostProtoView.elementBinders.length; i++) {
	        var binder = hostProtoView.elementBinders[i];
	        if (binder.hasNestedProtoView) {
	            var nestedEntry = protoViewRefs[protoViewIdx++];
	            if (lang_1.isPresent(nestedEntry)) {
	                targetHostViewAndBinderIndices.push([hostPvIdx, i]);
	                if (lang_1.isArray(nestedEntry)) {
	                    cloneProtoViews(nestedEntry, targetClonedProtoViews, targetHostViewAndBinderIndices);
	                }
	                else {
	                    targetClonedProtoViews.push(util_1.cloneAndQueryProtoView(proto_view_1.resolveInternalDomProtoView(nestedEntry), false));
	                }
	            }
	        }
	    }
	}
	function markBoundTextNodeParentsAsBoundElements(mergableProtoViews) {
	    mergableProtoViews.forEach(function (mergableProtoView) {
	        mergableProtoView.boundTextNodes.forEach(function (textNode) {
	            var parentNode = textNode.parentNode;
	            if (lang_1.isPresent(parentNode) && dom_adapter_1.DOM.isElementNode(parentNode)) {
	                dom_adapter_1.DOM.addClass(parentNode, util_1.NG_BINDING_CLASS);
	            }
	        });
	    });
	}
	function indexBoundTextNodes(mergableProtoViews) {
	    var boundTextNodeMap = new Map();
	    for (var pvIndex = 0; pvIndex < mergableProtoViews.length; pvIndex++) {
	        var mergableProtoView = mergableProtoViews[pvIndex];
	        mergableProtoView.boundTextNodes.forEach(function (textNode) { boundTextNodeMap.set(textNode, null); });
	    }
	    return boundTextNodeMap;
	}
	function mergeEmbeddedPvsIntoComponentOrRootPv(clonedProtoViews, hostViewAndBinderIndices) {
	    var nearestHostComponentOrRootPvIndices = calcNearestHostComponentOrRootPvIndices(clonedProtoViews, hostViewAndBinderIndices);
	    for (var viewIdx = 1; viewIdx < clonedProtoViews.length; viewIdx++) {
	        var clonedProtoView = clonedProtoViews[viewIdx];
	        if (clonedProtoView.original.type === api_1.ViewType.EMBEDDED) {
	            var hostComponentIdx = nearestHostComponentOrRootPvIndices[viewIdx];
	            var hostPv = clonedProtoViews[hostComponentIdx];
	            clonedProtoView.fragments.forEach(function (fragment) { return hostPv.fragments.push(fragment); });
	        }
	    }
	}
	function calcNearestHostComponentOrRootPvIndices(clonedProtoViews, hostViewAndBinderIndices) {
	    var nearestHostComponentOrRootPvIndices = collection_1.ListWrapper.createFixedSize(clonedProtoViews.length);
	    nearestHostComponentOrRootPvIndices[0] = null;
	    for (var viewIdx = 1; viewIdx < hostViewAndBinderIndices.length; viewIdx++) {
	        var hostViewIdx = hostViewAndBinderIndices[viewIdx][0];
	        var hostProtoView = clonedProtoViews[hostViewIdx];
	        if (hostViewIdx === 0 || hostProtoView.original.type === api_1.ViewType.COMPONENT) {
	            nearestHostComponentOrRootPvIndices[viewIdx] = hostViewIdx;
	        }
	        else {
	            nearestHostComponentOrRootPvIndices[viewIdx] =
	                nearestHostComponentOrRootPvIndices[hostViewIdx];
	        }
	    }
	    return nearestHostComponentOrRootPvIndices;
	}
	function mergeComponents(clonedProtoViews, hostViewAndBinderIndices, targetFragments) {
	    var hostProtoView = clonedProtoViews[0];
	    hostProtoView.fragments.forEach(function (fragment) { return targetFragments.push(fragment); });
	    for (var viewIdx = 1; viewIdx < clonedProtoViews.length; viewIdx++) {
	        var hostViewIdx = hostViewAndBinderIndices[viewIdx][0];
	        var hostBinderIdx = hostViewAndBinderIndices[viewIdx][1];
	        var hostProtoView = clonedProtoViews[hostViewIdx];
	        var clonedProtoView = clonedProtoViews[viewIdx];
	        if (clonedProtoView.original.type === api_1.ViewType.COMPONENT) {
	            mergeComponent(hostProtoView, hostBinderIdx, clonedProtoView, targetFragments);
	        }
	    }
	}
	function mergeComponent(hostProtoView, binderIdx, nestedProtoView, targetFragments) {
	    var hostElement = hostProtoView.boundElements[binderIdx];
	    // We wrap the fragments into elements so that we can expand <ng-content>
	    // even for root nodes in the fragment without special casing them.
	    var fragmentElements = mapFragmentsIntoElements(nestedProtoView.fragments);
	    var contentElements = findContentElements(fragmentElements);
	    var projectableNodes = dom_adapter_1.DOM.childNodesAsList(hostElement);
	    for (var i = 0; i < contentElements.length; i++) {
	        var contentElement = contentElements[i];
	        var select = dom_adapter_1.DOM.getAttribute(contentElement, 'select');
	        projectableNodes = projectMatchingNodes(select, contentElement, projectableNodes);
	    }
	    // unwrap the fragment elements into arrays of nodes after projecting
	    var fragments = extractFragmentNodesFromElements(fragmentElements);
	    appendComponentNodesToHost(hostProtoView, binderIdx, fragments[0]);
	    for (var i = 1; i < fragments.length; i++) {
	        targetFragments.push(fragments[i]);
	    }
	}
	function mapFragmentsIntoElements(fragments) {
	    return fragments.map(function (fragment) {
	        var fragmentElement = dom_adapter_1.DOM.createTemplate('');
	        fragment.forEach(function (node) { return dom_adapter_1.DOM.appendChild(dom_adapter_1.DOM.content(fragmentElement), node); });
	        return fragmentElement;
	    });
	}
	function extractFragmentNodesFromElements(fragmentElements) {
	    return fragmentElements.map(function (fragmentElement) { return dom_adapter_1.DOM.childNodesAsList(dom_adapter_1.DOM.content(fragmentElement)); });
	}
	function findContentElements(fragmentElements) {
	    var contentElements = [];
	    fragmentElements.forEach(function (fragmentElement) {
	        var fragmentContentElements = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(fragmentElement), util_1.NG_CONTENT_ELEMENT_NAME);
	        for (var i = 0; i < fragmentContentElements.length; i++) {
	            contentElements.push(fragmentContentElements[i]);
	        }
	    });
	    return sortContentElements(contentElements);
	}
	function appendComponentNodesToHost(hostProtoView, binderIdx, componentRootNodes) {
	    var hostElement = hostProtoView.boundElements[binderIdx];
	    var binder = hostProtoView.original.elementBinders[binderIdx];
	    if (binder.hasNativeShadowRoot) {
	        var shadowRootWrapper = dom_adapter_1.DOM.createElement(util_1.NG_SHADOW_ROOT_ELEMENT_NAME);
	        for (var i = 0; i < componentRootNodes.length; i++) {
	            dom_adapter_1.DOM.appendChild(shadowRootWrapper, componentRootNodes[i]);
	        }
	        var firstChild = dom_adapter_1.DOM.firstChild(hostElement);
	        if (lang_1.isPresent(firstChild)) {
	            dom_adapter_1.DOM.insertBefore(firstChild, shadowRootWrapper);
	        }
	        else {
	            dom_adapter_1.DOM.appendChild(hostElement, shadowRootWrapper);
	        }
	    }
	    else {
	        dom_adapter_1.DOM.clearNodes(hostElement);
	        for (var i = 0; i < componentRootNodes.length; i++) {
	            dom_adapter_1.DOM.appendChild(hostElement, componentRootNodes[i]);
	        }
	    }
	}
	function projectMatchingNodes(selector, contentElement, nodes) {
	    var remaining = [];
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var matches = false;
	        if (isWildcard(selector)) {
	            matches = true;
	        }
	        else if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.elementMatches(node, selector)) {
	            matches = true;
	        }
	        if (matches) {
	            dom_adapter_1.DOM.insertBefore(contentElement, node);
	        }
	        else {
	            remaining.push(node);
	        }
	    }
	    dom_adapter_1.DOM.remove(contentElement);
	    return remaining;
	}
	function isWildcard(selector) {
	    return lang_1.isBlank(selector) || selector.length === 0 || selector == '*';
	}
	// we need to sort content elements as they can originate from
	// different sub views
	function sortContentElements(contentElements) {
	    // for now, only move the wildcard selector to the end.
	    // TODO(tbosch): think about sorting by selector specifity...
	    var firstWildcard = null;
	    var sorted = [];
	    contentElements.forEach(function (contentElement) {
	        var select = dom_adapter_1.DOM.getAttribute(contentElement, 'select');
	        if (isWildcard(select)) {
	            if (lang_1.isBlank(firstWildcard)) {
	                firstWildcard = contentElement;
	            }
	        }
	        else {
	            sorted.push(contentElement);
	        }
	    });
	    if (lang_1.isPresent(firstWildcard)) {
	        sorted.push(firstWildcard);
	    }
	    return sorted;
	}
	function createRootElementFromFragments(fragments) {
	    var rootElement = dom_adapter_1.DOM.createTemplate('');
	    var rootNode = dom_adapter_1.DOM.content(rootElement);
	    fragments.forEach(function (fragment) { fragment.forEach(function (node) { dom_adapter_1.DOM.appendChild(rootNode, node); }); });
	    return rootElement;
	}
	function calcRootTextNodeIndices(rootNode, boundTextNodes, targetBoundTextIndices) {
	    var rootTextNodeIndices = [];
	    util_1.queryBoundTextNodeIndices(rootNode, boundTextNodes, function (textNode, nodeIndex, _) {
	        rootTextNodeIndices.push(nodeIndex);
	        targetBoundTextIndices.set(textNode, targetBoundTextIndices.size);
	    });
	    return rootTextNodeIndices;
	}
	function calcElementBinders(clonedProtoViews, mergedBoundElements, boundTextNodes, targetBoundTextIndices) {
	    var elementBinderByElement = indexElementBindersByElement(clonedProtoViews);
	    var mergedElementBinders = [];
	    for (var i = 0; i < mergedBoundElements.length; i++) {
	        var element = mergedBoundElements[i];
	        var textNodeIndices = [];
	        util_1.queryBoundTextNodeIndices(element, boundTextNodes, function (textNode, nodeIndex, _) {
	            textNodeIndices.push(nodeIndex);
	            targetBoundTextIndices.set(textNode, targetBoundTextIndices.size);
	        });
	        mergedElementBinders.push(updateElementBinderTextNodeIndices(elementBinderByElement.get(element), textNodeIndices));
	    }
	    return mergedElementBinders;
	}
	function indexElementBindersByElement(mergableProtoViews) {
	    var elementBinderByElement = new Map();
	    mergableProtoViews.forEach(function (mergableProtoView) {
	        for (var i = 0; i < mergableProtoView.boundElements.length; i++) {
	            var el = mergableProtoView.boundElements[i];
	            if (lang_1.isPresent(el)) {
	                elementBinderByElement.set(el, mergableProtoView.original.elementBinders[i]);
	            }
	        }
	    });
	    return elementBinderByElement;
	}
	function updateElementBinderTextNodeIndices(elementBinder, textNodeIndices) {
	    var result;
	    if (lang_1.isBlank(elementBinder)) {
	        result = new element_binder_1.DomElementBinder({
	            textNodeIndices: textNodeIndices,
	            hasNestedProtoView: false,
	            eventLocals: null,
	            localEvents: [],
	            globalEvents: [],
	            hasNativeShadowRoot: null
	        });
	    }
	    else {
	        result = new element_binder_1.DomElementBinder({
	            textNodeIndices: textNodeIndices,
	            hasNestedProtoView: false,
	            eventLocals: elementBinder.eventLocals,
	            localEvents: elementBinder.localEvents,
	            globalEvents: elementBinder.globalEvents,
	            hasNativeShadowRoot: elementBinder.hasNativeShadowRoot
	        });
	    }
	    return result;
	}
	function calcMappedElementIndices(clonedProtoViews, mergedBoundElements) {
	    var mergedBoundElementIndices = indexArray(mergedBoundElements);
	    var mappedElementIndices = [];
	    clonedProtoViews.forEach(function (clonedProtoView) {
	        clonedProtoView.boundElements.forEach(function (boundElement) {
	            var mappedElementIndex = mergedBoundElementIndices.get(boundElement);
	            mappedElementIndices.push(mappedElementIndex);
	        });
	    });
	    return mappedElementIndices;
	}
	function calcMappedTextIndices(clonedProtoViews, mergedBoundTextIndices) {
	    var mappedTextIndices = [];
	    clonedProtoViews.forEach(function (clonedProtoView) {
	        clonedProtoView.boundTextNodes.forEach(function (textNode) {
	            var mappedTextIndex = mergedBoundTextIndices.get(textNode);
	            mappedTextIndices.push(mappedTextIndex);
	        });
	    });
	    return mappedTextIndices;
	}
	function calcHostElementIndicesByViewIndex(clonedProtoViews, hostViewAndBinderIndices) {
	    var hostElementIndices = [null];
	    var viewElementOffsets = [0];
	    var elementIndex = clonedProtoViews[0].original.elementBinders.length;
	    for (var viewIdx = 1; viewIdx < hostViewAndBinderIndices.length; viewIdx++) {
	        viewElementOffsets.push(elementIndex);
	        elementIndex += clonedProtoViews[viewIdx].original.elementBinders.length;
	        var hostViewIdx = hostViewAndBinderIndices[viewIdx][0];
	        var hostBinderIdx = hostViewAndBinderIndices[viewIdx][1];
	        hostElementIndices.push(viewElementOffsets[hostViewIdx] + hostBinderIdx);
	    }
	    return hostElementIndices;
	}
	function calcNestedViewCounts(hostViewAndBinderIndices) {
	    var nestedViewCounts = collection_1.ListWrapper.createFixedSize(hostViewAndBinderIndices.length);
	    collection_1.ListWrapper.fill(nestedViewCounts, 0);
	    for (var viewIdx = hostViewAndBinderIndices.length - 1; viewIdx >= 1; viewIdx--) {
	        var hostViewAndElementIdx = hostViewAndBinderIndices[viewIdx];
	        if (lang_1.isPresent(hostViewAndElementIdx)) {
	            nestedViewCounts[hostViewAndElementIdx[0]] += nestedViewCounts[viewIdx] + 1;
	        }
	    }
	    return nestedViewCounts;
	}
	function indexArray(arr) {
	    var map = new Map();
	    for (var i = 0; i < arr.length; i++) {
	        map.set(arr[i], i);
	    }
	    return map;
	}
	//# sourceMappingURL=proto_view_merger.js.map

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(6);
	var collection_1 = __webpack_require__(2);
	var lang_1 = __webpack_require__(1);
	var api_1 = __webpack_require__(7);
	var util_1 = __webpack_require__(20);
	function resolveInternalDomView(viewRef) {
	    return viewRef._view;
	}
	exports.resolveInternalDomView = resolveInternalDomView;
	var DomViewRef = (function (_super) {
	    __extends(DomViewRef, _super);
	    function DomViewRef(_view) {
	        _super.call(this);
	        this._view = _view;
	    }
	    return DomViewRef;
	})(api_1.RenderViewRef);
	exports.DomViewRef = DomViewRef;
	/**
	 * Const of making objects: http://jsperf.com/instantiate-size-of-object
	 */
	var DomView = (function () {
	    function DomView(proto, boundTextNodes, boundElements) {
	        this.proto = proto;
	        this.boundTextNodes = boundTextNodes;
	        this.boundElements = boundElements;
	        this.hydrated = false;
	        this.eventDispatcher = null;
	        this.eventHandlerRemovers = [];
	    }
	    DomView.prototype.setElementProperty = function (elementIndex, propertyName, value) {
	        dom_adapter_1.DOM.setProperty(this.boundElements[elementIndex], propertyName, value);
	    };
	    DomView.prototype.setElementAttribute = function (elementIndex, attributeName, value) {
	        var element = this.boundElements[elementIndex];
	        var dashCasedAttributeName = util_1.camelCaseToDashCase(attributeName);
	        if (lang_1.isPresent(value)) {
	            dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(value));
	        }
	        else {
	            dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
	        }
	    };
	    DomView.prototype.setElementClass = function (elementIndex, className, isAdd) {
	        var element = this.boundElements[elementIndex];
	        var dashCasedClassName = util_1.camelCaseToDashCase(className);
	        if (isAdd) {
	            dom_adapter_1.DOM.addClass(element, dashCasedClassName);
	        }
	        else {
	            dom_adapter_1.DOM.removeClass(element, dashCasedClassName);
	        }
	    };
	    DomView.prototype.setElementStyle = function (elementIndex, styleName, value) {
	        var element = this.boundElements[elementIndex];
	        var dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
	        if (lang_1.isPresent(value)) {
	            dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, lang_1.stringify(value));
	        }
	        else {
	            dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
	        }
	    };
	    DomView.prototype.invokeElementMethod = function (elementIndex, methodName, args) {
	        var element = this.boundElements[elementIndex];
	        dom_adapter_1.DOM.invoke(element, methodName, args);
	    };
	    DomView.prototype.setText = function (textIndex, value) { dom_adapter_1.DOM.setText(this.boundTextNodes[textIndex], value); };
	    DomView.prototype.dispatchEvent = function (elementIndex, eventName, event) {
	        var allowDefaultBehavior = true;
	        if (lang_1.isPresent(this.eventDispatcher)) {
	            var evalLocals = new collection_1.Map();
	            evalLocals.set('$event', event);
	            // TODO(tbosch): reenable this when we are parsing element properties
	            // out of action expressions
	            // var localValues = this.proto.elementBinders[elementIndex].eventLocals.eval(null, new
	            // Locals(null, evalLocals));
	            // this.eventDispatcher.dispatchEvent(elementIndex, eventName, localValues);
	            allowDefaultBehavior =
	                this.eventDispatcher.dispatchRenderEvent(elementIndex, eventName, evalLocals);
	            if (!allowDefaultBehavior) {
	                event.preventDefault();
	            }
	        }
	        return allowDefaultBehavior;
	    };
	    return DomView;
	})();
	exports.DomView = DomView;
	//# sourceMappingURL=view.js.map

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
	        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
	        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
	    }
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(3);
	var async_1 = __webpack_require__(5);
	var xhr_1 = __webpack_require__(58);
	var XHRImpl = (function (_super) {
	    __extends(XHRImpl, _super);
	    function XHRImpl() {
	        _super.apply(this, arguments);
	    }
	    XHRImpl.prototype.get = function (url) {
	        var completer = async_1.PromiseWrapper.completer();
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	            // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	            var response = ('response' in xhr) ? xhr.response : xhr.responseText;
	            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	            var status = xhr.status === 1223 ? 204 : xhr.status;
	            // fix status code when it is 0 (0 status is undocumented).
	            // Occurs when accessing file resources or on Android 4.1 stock browser
	            // while retrieving files from application cache.
	            if (status === 0) {
	                status = response ? 200 : 0;
	            }
	            if (200 <= status && status <= 300) {
	                completer.resolve(response);
	            }
	            else {
	                completer.reject("Failed to load " + url, null);
	            }
	        };
	        xhr.onerror = function () { completer.reject("Failed to load " + url, null); };
	        xhr.send();
	        return completer.promise;
	    };
	    XHRImpl = __decorate([
	        di_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], XHRImpl);
	    return XHRImpl;
	})(xhr_1.XHR);
	exports.XHRImpl = XHRImpl;
	//# sourceMappingURL=xhr_impl.js.map

/***/ },
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	
	See the License for the specific language governing permissions and
	limitations under the License.
	***************************************************************************** */
	"use strict";
	var Reflect;
	(function (Reflect) {
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var __Metadata__ = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     C = Reflect.decorate(decoratorsArray, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(C, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(C.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            else if (IsUndefined(targetKey)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(targetDescriptor)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        }
	        else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        }
	        else {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsConstructor(target)) {
	                throw new TypeError();
	            }
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class C {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target)) {
	                    throw new TypeError();
	                }
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target)) {
	                    throw new TypeError();
	                }
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        if (IsUndefined(metadataMap)) {
	            return false;
	        }
	        if (!metadataMap.delete(metadataKey)) {
	            return false;
	        }
	        if (metadataMap.size > 0) {
	            return true;
	        }
	        var targetMetadata = __Metadata__.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0) {
	            return true;
	        }
	        __Metadata__.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated)) {
	                    throw new TypeError();
	                }
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated)) {
	                    throw new TypeError();
	                }
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = __Metadata__.get(target);
	        if (!targetMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            targetMetadata = new _Map();
	            __Metadata__.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return true;
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        }
	        return false;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return false;
	        }
	        return Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        }
	        return undefined;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return undefined;
	        }
	        return metadataMap.get(MetadataKey);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null) {
	            return ownKeys;
	        }
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0) {
	            return ownKeys;
	        }
	        if (ownKeys.length <= 0) {
	            return parentKeys;
	        }
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        var keys = [];
	        if (metadataMap) {
	            metadataMap.forEach(function (_, key) { return keys.push(key); });
	        }
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray(x);
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        if (IsSymbol(value)) {
	            return value;
	        }
	        return String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype) {
	            return proto;
	        }
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. 
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype) {
	            return proto;
	        }
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype) {
	            return proto;
	        }
	        // if the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function") {
	            return proto;
	        }
	        // if we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O) {
	            return proto;
	        }
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        function Map() {
	            this._keys = [];
	            this._values = [];
	            this._cache = cacheSentinel;
	        }
	        Map.prototype = {
	            get size() {
	                return this._keys.length;
	            },
	            has: function (key) {
	                if (key === this._cache) {
	                    return true;
	                }
	                if (this._find(key) >= 0) {
	                    this._cache = key;
	                    return true;
	                }
	                return false;
	            },
	            get: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._cache = key;
	                    return this._values[index];
	                }
	                return undefined;
	            },
	            set: function (key, value) {
	                this.delete(key);
	                this._keys.push(key);
	                this._values.push(value);
	                this._cache = key;
	                return this;
	            },
	            delete: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._keys.splice(index, 1);
	                    this._values.splice(index, 1);
	                    this._cache = cacheSentinel;
	                    return true;
	                }
	                return false;
	            },
	            clear: function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cache = cacheSentinel;
	            },
	            forEach: function (callback, thisArg) {
	                var size = this.size;
	                for (var i = 0; i < size; ++i) {
	                    var key = this._keys[i];
	                    var value = this._values[i];
	                    this._cache = key;
	                    callback.call(this, value, key, this);
	                }
	            },
	            _find: function (key) {
	                var keys = this._keys;
	                var size = keys.length;
	                for (var i = 0; i < size; ++i) {
	                    if (keys[i] === key) {
	                        return i;
	                    }
	                }
	                return -1;
	            }
	        };
	        return Map;
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        var cacheSentinel = {};
	        function Set() {
	            this._map = new _Map();
	        }
	        Set.prototype = {
	            get size() {
	                return this._map.length;
	            },
	            has: function (value) {
	                return this._map.has(value);
	            },
	            add: function (value) {
	                this._map.set(value, value);
	                return this;
	            },
	            delete: function (value) {
	                return this._map.delete(value);
	            },
	            clear: function () {
	                this._map.clear();
	            },
	            forEach: function (callback, thisArg) {
	                this._map.forEach(callback, thisArg);
	            }
	        };
	        return Set;
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var isNode = typeof global !== "undefined" &&
	            typeof module === "object" &&
	            typeof module.exports === "object" &&
	            "function" === "function";
	        var nodeCrypto = isNode && __webpack_require__(247);
	        var hasOwn = Object.prototype.hasOwnProperty;
	        var keys = {};
	        var rootKey = CreateUniqueKey();
	        function WeakMap() {
	            this._key = CreateUniqueKey();
	        }
	        WeakMap.prototype = {
	            has: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return this._key in table;
	                }
	                return false;
	            },
	            get: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return table[this._key];
	                }
	                return undefined;
	            },
	            set: function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, true);
	                table[this._key] = value;
	                return this;
	            },
	            delete: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table && this._key in table) {
	                    return delete table[this._key];
	                }
	                return false;
	            },
	            clear: function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            }
	        };
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i) {
	                buffer[i] = Math.random() * 255 | 0;
	            }
	        }
	        function GenRandomBytes(size) {
	            if (nodeCrypto) {
	                var data = nodeCrypto.randomBytes(size);
	                return data;
	            }
	            else if (typeof Uint8Array === "function") {
	                var data = new Uint8Array(size);
	                if (typeof crypto !== "undefined") {
	                    crypto.getRandomValues(data);
	                }
	                else if (typeof msCrypto !== "undefined") {
	                    msCrypto.getRandomValues(data);
	                }
	                else {
	                    FillRandomBytes(data, size);
	                }
	                return data;
	            }
	            else {
	                var data = new Array(size);
	                FillRandomBytes(data, size);
	                return data;
	            }
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8) {
	                    result += "-";
	                }
	                if (byte < 16) {
	                    result += "0";
	                }
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do {
	                key = "@@WeakMap@@" + CreateUUID();
	            } while (hasOwn.call(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create) {
	                    return undefined;
	                }
	                Object.defineProperty(target, rootKey, { value: Object.create(null) });
	            }
	            return target[rootKey];
	        }
	        return WeakMap;
	    }
	    // hook global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    __global.Reflect[p] = Reflect[p];
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window :
	        typeof WorkerGlobalScope !== "undefined" ? self :
	            typeof global !== "undefined" ? global :
	                Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(218));
	//# sourceMappingURL=rtts_assert.js.map

/***/ },
/* 218 */
/***/ function(module, exports) {

	'use strict';var _global = typeof window === 'object' ? window : global;
	// TODO(vojta):
	// - extract into multiple files
	// - different error types
	// - simplify/humanize error messages
	// - throw when invalid input (such as odd number of args into assert.argumentTypes)
	var POSITION_NAME = ['', '1st', '2nd', '3rd'];
	function argPositionName(i) {
	    var position = (i / 2) + 1;
	    return POSITION_NAME[position] || (position + 'th');
	}
	var primitives;
	var genericType;
	if (typeof _global['$traceurRuntime'] === 'object') {
	    primitives = _global['$traceurRuntime'].type;
	    genericType = _global['$traceurRuntime'].genericType;
	}
	else {
	    // Allow to work without traceur runtime as well!
	    primitives = {
	        any: { name: 'any' },
	        boolean: { name: 'boolean' },
	        number: { name: 'number' },
	        string: { name: 'string' },
	        symbol: { name: 'symbol' }, void: { name: 'void' }
	    };
	    genericType = function (type, args) {
	        return { type: type, args: args };
	    };
	}
	Object.keys(primitives).forEach(function (name) { primitives[name].__assertName = name; });
	function proxy() { }
	exports.proxy = proxy;
	function assertArgumentTypes() {
	    var params = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        params[_i - 0] = arguments[_i];
	    }
	    var actual, type;
	    var currentArgErrors;
	    var errors = [];
	    var msg;
	    for (var i = 0, l = params.length; i < l; i = i + 2) {
	        actual = params[i];
	        type = params[i + 1];
	        currentArgErrors = [];
	        // currentStack = [];
	        //
	        if (!isType(actual, type, currentArgErrors)) {
	            // console.log(JSON.stringify(errors, null, '  '));
	            // TODO(vojta): print "an instance of" only if T starts with uppercase.
	            errors.push(argPositionName(i) + ' argument has to be an instance of ' + prettyPrint(type) +
	                ', got ' + prettyPrint(actual));
	            if (currentArgErrors.length) {
	                errors.push(currentArgErrors);
	            }
	        }
	    }
	    if (errors.length) {
	        throw new Error('Invalid arguments given!\n' + formatErrors(errors));
	    }
	}
	function prettyPrint(value, depth) {
	    if (typeof (depth) === 'undefined') {
	        depth = 0;
	    }
	    if (depth++ > 3) {
	        return '[...]';
	    }
	    if (typeof value === 'undefined') {
	        return 'undefined';
	    }
	    if (typeof value === 'string') {
	        return '"' + value + '"';
	    }
	    if (typeof value === 'boolean') {
	        return value.toString();
	    }
	    if (value === null) {
	        return 'null';
	    }
	    if (typeof value === 'object') {
	        if (value.__assertName) {
	            return value.__assertName;
	        }
	        if (value.map && typeof value.map === 'function') {
	            return '[' + value.map(function (v) { return prettyPrint(v, depth); }).join(', ') + ']';
	        }
	        var properties = Object.keys(value);
	        var suffix = '}';
	        if (properties.length > 20) {
	            properties.length = 20;
	            suffix = ', ... }';
	        }
	        return '{' + properties.map(function (p) { return p + ': ' + prettyPrint(value[p], depth); }).join(', ') + suffix;
	    }
	    return value.__assertName || value.name || value.toString();
	}
	function isType(value, T, errors) {
	    if (T && T.type) {
	        // needed for generics.
	        // TODO(tbosch): read out T.args and do assertions based on them as well!
	        T = T.type;
	    }
	    if (T === primitives.void) {
	        return typeof value === 'undefined';
	    }
	    if (_isProxy(value)) {
	        return true;
	    }
	    if (T === primitives.any || value === null) {
	        return true;
	    }
	    if (T === primitives.string) {
	        return typeof value === 'string';
	    }
	    if (T === primitives.number) {
	        return typeof value === 'number';
	    }
	    if (T === primitives.boolean) {
	        return typeof value === 'boolean';
	    }
	    // var parentStack = currentStack;
	    // currentStack = [];
	    // shouldnt this create new stack?
	    if (typeof T.assert === 'function') {
	        var parentStack = currentStack;
	        var isValid;
	        currentStack = errors;
	        try {
	            isValid = T.assert(value);
	        }
	        catch (e) {
	            fail(e.message);
	            isValid = false;
	        }
	        currentStack = parentStack;
	        if (typeof isValid === 'undefined') {
	            isValid = errors.length === 0;
	        }
	        return isValid;
	    }
	    return value instanceof T;
	    // if (!(value instanceof T)) {
	    //   fail('not instance of ' + prettyPrint(T));
	    // }
	    // var res = currentStack;
	    // currentStack = parentStack;
	    // return res;
	}
	function _isProxy(obj) {
	    if (!obj || !obj.constructor || !obj.constructor.annotations)
	        return false;
	    return obj.constructor.annotations.filter(function (a) { return a instanceof proxy; }).length > 0;
	}
	function formatErrors(errors, indent) {
	    if (indent === void 0) { indent = '  '; }
	    return errors.map(function (e) {
	        if (typeof e === 'string')
	            return indent + '- ' + e;
	        return formatErrors(e, indent + '  ');
	    })
	        .join('\n');
	}
	// assert a type of given value and throw if does not pass
	var type = function (actual, T) {
	    var errors = [];
	    // currentStack = [];
	    if (!isType(actual, T, errors)) {
	        // console.log(JSON.stringify(errors, null, '  '));
	        // TODO(vojta): print "an instance of" only if T starts with uppercase.
	        var msg = 'Expected an instance of ' + prettyPrint(T) + ', got ' + prettyPrint(actual) + '!';
	        if (errors.length) {
	            msg += '\n' + formatErrors(errors);
	        }
	        throw new Error(msg);
	    }
	    return actual;
	};
	function returnType(actual, T) {
	    var errors = [];
	    // currentStack = [];
	    if (!isType(actual, T, errors)) {
	        // console.log(JSON.stringify(errors, null, '  '));
	        // TODO(vojta): print "an instance of" only if T starts with uppercase.
	        var msg = 'Expected to return an instance of ' + prettyPrint(T) + ', got ' +
	            prettyPrint(actual) + '!';
	        if (errors.length) {
	            msg += '\n' + formatErrors(errors);
	        }
	        throw new Error(msg);
	    }
	    return actual;
	}
	// TODO(vojta): define these with DSL?
	var string = type.string = define('string', function (value) { return typeof value === 'string'; });
	var boolean = type.boolean =
	    define('boolean', function (value) { return typeof value === 'boolean'; });
	var number = type.number = define('number', function (value) { return typeof value === 'number'; });
	function arrayOf() {
	    var types = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        types[_i - 0] = arguments[_i];
	    }
	    return assert.define('array of ' + types.map(prettyPrint).join('/'), function (value) {
	        if (assert(value).is(Array)) {
	            for (var i = 0; i < value.length; i++) {
	                (_a = assert(value[i])).is.apply(_a, types);
	            }
	        }
	        var _a;
	    });
	}
	function structure(definition) {
	    var properties = Object.keys(definition);
	    return assert.define('object with properties ' + properties.join(', '), function (value) {
	        if (assert(value).is(Object)) {
	            for (var i = 0; i < properties.length; i++) {
	                var property = properties[i];
	                assert(value[property]).is(definition[property]);
	            }
	        }
	    });
	}
	// I'm sorry, bad global state... to make the API nice ;-)
	var currentStack = [];
	function fail(message) {
	    currentStack.push(message);
	}
	function define(classOrName, check) {
	    var cls = classOrName;
	    if (typeof classOrName === 'string') {
	        cls = function () { };
	        cls.__assertName = classOrName;
	    }
	    cls.assert = function (value) {
	        // var parentStack = currentStack;
	        // currentStack = [];
	        return check(value);
	        // if (currentStack.length) {
	        //   parentStack.push(currentStack)
	        // }
	        // currentStack = parentStack;
	    };
	    return cls;
	}
	var assert = function (value) {
	    return {
	        is: function is() {
	            var types = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                types[_i - 0] = arguments[_i];
	            }
	            // var errors = []
	            var allErrors = [];
	            var errors;
	            for (var i = 0; i < types.length; i++) {
	                var type = types[i];
	                errors = [];
	                if (isType(value, type, errors)) {
	                    return true;
	                }
	                // if no errors, merge multiple "is not instance of " into x/y/z ?
	                allErrors.push(prettyPrint(value) + ' is not instance of ' + prettyPrint(type));
	                if (errors.length) {
	                    allErrors.push(errors);
	                }
	            }
	            // if (types.length > 1) {
	            //   currentStack.push(['has to be ' + types.map(prettyPrint).join(' or '),
	            //   ...allErrors]);
	            // } else {
	            currentStack.push.apply(currentStack, allErrors);
	            // }
	            return false;
	        }
	    };
	};
	exports.assert = assert;
	// PUBLIC API
	// asserting API
	// throw if no type provided
	assert.type = type;
	for (var prop in primitives) {
	    assert.type[prop] = primitives[prop];
	}
	assert.genericType = genericType;
	// throw if odd number of args
	assert.argumentTypes = assertArgumentTypes;
	assert.returnType = returnType;
	// define AP;
	assert.define = define;
	assert.fail = fail;
	// primitive value type;
	assert.string = string;
	assert.number = number;
	assert.boolean = boolean;
	// custom types
	assert.arrayOf = arrayOf;
	assert.structure = structure;
	//# sourceMappingURL=rtts_assert.js.map

/***/ },
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	
	;(function (exports) {
		'use strict';
	
	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array
	
		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)
	
		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}
	
		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr
	
			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}
	
			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0
	
			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)
	
			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length
	
			var L = 0
	
			function push (v) {
				arr[L++] = v
			}
	
			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}
	
			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}
	
			return arr
		}
	
		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length
	
			function encode (num) {
				return lookup.charAt(num)
			}
	
			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}
	
			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}
	
			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}
	
			return output
		}
	
		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 243 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 244 */
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */
	
	var isArray = Array.isArray;
	
	/**
	 * toString
	 */
	
	var str = Object.prototype.toString;
	
	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */
	
	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(158)
	
	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)
	
	module.exports = Hmac
	
	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg
	
	  var blocksize = (alg === 'sha512') ? 128 : 64
	
	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key
	
	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }
	
	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)
	
	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }
	
	  this._hash = createHash(alg).update(ipad)
	}
	
	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}
	
	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;
	
	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }
	
	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}
	
	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}
	
	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}
	
	module.exports = { hash: hash };
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(257)
	
	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}
	
	exports.createHash = __webpack_require__(158)
	
	exports.createHmac = __webpack_require__(245)
	
	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}
	
	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}
	
	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}
	
	var p = __webpack_require__(256)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	
	
	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	
	var helpers = __webpack_require__(246);
	
	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;
	
	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;
	
	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	
	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
	
	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
	
	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
	
	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	
	}
	
	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}
	
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}
	
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}
	
	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }
	
	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')
	
	    setTimeout(function() {
	      var result
	
	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }
	
	      callback(undefined, result)
	    })
	  }
	
	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')
	
	    if (iterations < 0)
	      throw new TypeError('Bad iterations')
	
	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')
	
	    if (keylen < 0)
	      throw new TypeError('Bad key length')
	
	    digest = digest || 'sha1'
	
	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)
	
	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)
	
	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)
	
	      var U = crypto.createHmac(digest, password).update(block1).digest()
	
	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen
	
	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }
	
	      U.copy(T, 0, 0, hLen)
	
	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()
	
	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }
	
	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }
	
	    return DK
	  }
	
	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160
	
	
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];
	
	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];
	
	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};
	
	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};
	
	var processBlock = function (H, M, offset) {
	
	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];
	
	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }
	
	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;
	
	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;
	
	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};
	
	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}
	
	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}
	
	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}
	
	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}
	
	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}
	
	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}
	
	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
	
	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');
	
	  var m = bytesToWords(message);
	
	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;
	
	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );
	
	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }
	
	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];
	
	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }
	
	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17).Buffer))

/***/ },
/* 251 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {
	
	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }
	
	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }
	
	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }
	
	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block
	
	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)
	
	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }
	
	      s += ch
	      f += ch
	
	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s
	
	    return this
	  }
	
	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8
	
	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80
	
	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)
	
	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }
	
	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)
	
	    var hash = this._update(this._block) || this._hash()
	
	    return enc ? hash.toString(enc) : hash
	  }
	
	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }
	
	  return Hash
	}


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}
	
	var Buffer = __webpack_require__(17).Buffer
	var Hash   = __webpack_require__(251)(Buffer)
	
	exports.sha1 = __webpack_require__(253)(Buffer, Hash)
	exports.sha256 = __webpack_require__(254)(Buffer, Hash)
	exports.sha512 = __webpack_require__(255)(Buffer, Hash)


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	
	var inherits = __webpack_require__(102).inherits
	
	module.exports = function (Buffer, Hash) {
	
	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0
	
	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)
	
	  var POOL = []
	
	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()
	
	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)
	
	    this._h = null
	    this.init()
	  }
	
	  inherits(Sha1, Hash)
	
	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0
	
	    Hash.prototype.init.call(this)
	    return this
	  }
	
	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {
	
	    var a, b, c, d, e, _a, _b, _c, _d, _e
	
	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e
	
	    var w = this._w
	
	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)
	
	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )
	
	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }
	
	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }
	
	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }
	
	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }
	
	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }
	
	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }
	
	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }
	
	  return Sha1
	}


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = __webpack_require__(102).inherits
	
	module.exports = function (Buffer, Hash) {
	
	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]
	
	  var W = new Array(64)
	
	  function Sha256() {
	    this.init()
	
	    this._w = W //new Array(64)
	
	    Hash.call(this, 16*4, 14*4)
	  }
	
	  inherits(Sha256, Hash)
	
	  Sha256.prototype.init = function () {
	
	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0
	
	    this._len = this._s = 0
	
	    return this
	  }
	
	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }
	
	  function R (X, n) {
	    return (X >>> n);
	  }
	
	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }
	
	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }
	
	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }
	
	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }
	
	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }
	
	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }
	
	  Sha256.prototype._update = function(M) {
	
	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2
	
	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0
	
	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]
	
	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
	
	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }
	
	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0
	
	  };
	
	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)
	
	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)
	
	    return H
	  }
	
	  return Sha256
	
	}


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(102).inherits
	
	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]
	
	  var W = new Array(160)
	
	  function Sha512() {
	    this.init()
	    this._w = W
	
	    Hash.call(this, 128, 112)
	  }
	
	  inherits(Sha512, Hash)
	
	  Sha512.prototype.init = function () {
	
	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0
	
	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0
	
	    this._len = this._s = 0
	
	    return this
	  }
	
	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }
	
	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }
	
	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }
	
	  Sha512.prototype._update = function(M) {
	
	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl
	
	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0
	
	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0
	
	    for (var i = 0; i < 80; i++) {
	      var j = i * 2
	
	      var Wi, Wil
	
	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)
	
	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)
	
	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)
	
	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]
	
	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]
	
	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
	
	        W[j] = Wi
	        W[j + 1] = Wil
	      }
	
	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)
	
	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)
	
	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]
	
	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)
	
	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)
	
	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)
	
	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }
	
	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0
	
	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }
	
	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)
	
	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }
	
	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)
	
	    return H
	  }
	
	  return Sha512
	
	}


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(249)
	
	module.exports = function (crypto, exports) {
	  exports = exports || {}
	
	  var exported = pbkdf2Export(crypto)
	
	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync
	
	  return exports
	}


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(269)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(17).Buffer))

/***/ },
/* 258 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 259 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	function Zone(parentZone, data) {
	  var zone = (arguments.length) ? Object.create(parentZone) : this;
	
	  zone.parent = parentZone || null;
	
	  Object.keys(data || {}).forEach(function(property) {
	
	    var _property = property.substr(1);
	
	    // augment the new zone with a hook decorates the parent's hook
	    if (property[0] === '$') {
	      zone[_property] = data[property](parentZone[_property] || function () {});
	
	    // augment the new zone with a hook that runs after the parent's hook
	    } else if (property[0] === '+') {
	      if (parentZone[_property]) {
	        zone[_property] = function () {
	          var result = parentZone[_property].apply(this, arguments);
	          data[property].apply(this, arguments);
	          return result;
	        };
	      } else {
	        zone[_property] = data[property];
	      }
	
	    // augment the new zone with a hook that runs before the parent's hook
	    } else if (property[0] === '-') {
	      if (parentZone[_property]) {
	        zone[_property] = function () {
	          data[property].apply(this, arguments);
	          return parentZone[_property].apply(this, arguments);
	        };
	      } else {
	        zone[_property] = data[property];
	      }
	
	    // set the new zone's hook (replacing the parent zone's)
	    } else {
	      zone[property] = (typeof data[property] === 'object') ?
	                        JSON.parse(JSON.stringify(data[property])) :
	                        data[property];
	    }
	  });
	
	  zone.$id = Zone.nextId++;
	
	  return zone;
	}
	
	Zone.prototype = {
	  constructor: Zone,
	
	  fork: function (locals) {
	    this.onZoneCreated();
	    return new Zone(this, locals);
	  },
	
	  bind: function (fn, skipEnqueue) {
	    if (typeof fn !== 'function') {
	      throw new Error('Expecting function got: ' + fn);
	    }
	    skipEnqueue || this.enqueueTask(fn);
	    var zone = this.isRootZone() ? this : this.fork();
	    return function zoneBoundFn() {
	      return zone.run(fn, this, arguments);
	    };
	  },
	
	  bindOnce: function (fn) {
	    var boundZone = this;
	    return this.bind(function () {
	      var result = fn.apply(this, arguments);
	      boundZone.dequeueTask(fn);
	      return result;
	    });
	  },
	
	  isRootZone: function() {
	    return this.parent === null;
	  },
	
	  run: function run (fn, applyTo, applyWith) {
	    applyWith = applyWith || [];
	
	    var oldZone = global.zone;
	
	    // MAKE THIS ZONE THE CURRENT ZONE
	    global.zone = this;
	
	    try {
	      this.beforeTask();
	      return fn.apply(applyTo, applyWith);
	    } catch (e) {
	      if (this.onError) {
	        this.onError(e);
	      } else {
	        throw e;
	      }
	    } finally {
	      this.afterTask();
	      // REVERT THE CURRENT ZONE BACK TO THE ORIGINAL ZONE
	      global.zone = oldZone;
	    }
	  },
	
	  // onError is used to override error handling.
	  // When a custom error handler is provided, it should most probably rethrow the exception
	  // not to break the expected control flow:
	  //
	  // `promise.then(fnThatThrows).catch(fn);`
	  //
	  // When this code is executed in a zone with a custom onError handler that doesn't rethrow, the
	  // `.catch()` branch will not be taken as the `fnThatThrows` exception will be swallowed by the
	  // handler.
	  onError: null,
	  beforeTask: function () {},
	  onZoneCreated: function () {},
	  afterTask: function () {},
	  enqueueTask: function () {},
	  dequeueTask: function () {}
	};
	
	// Root zone ID === 1
	Zone.nextId = 1;
	
	Zone.bindPromiseFn = __webpack_require__(160).bindPromiseFn;
	
	module.exports = {
	  Zone: Zone
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var fnPatch = __webpack_require__(263);
	var promisePatch = __webpack_require__(160);
	var mutationObserverPatch = __webpack_require__(265);
	var definePropertyPatch = __webpack_require__(159);
	var registerElementPatch = __webpack_require__(267);
	var webSocketPatch = __webpack_require__(161);
	var eventTargetPatch = __webpack_require__(262);
	var propertyDescriptorPatch = __webpack_require__(266);
	var geolocationPatch = __webpack_require__(264);
	
	function apply() {
	  fnPatch.patchSetClearFunction(global, [
	    'timeout',
	    'interval',
	    'immediate'
	  ]);
	
	  fnPatch.patchSetFunction(global, [
	    'requestAnimationFrame',
	    'mozRequestAnimationFrame',
	    'webkitRequestAnimationFrame'
	  ]);
	
	  fnPatch.patchFunction(global, [
	    'alert',
	    'prompt'
	  ]);
	
	  eventTargetPatch.apply();
	
	  propertyDescriptorPatch.apply();
	
	  promisePatch.apply();
	
	  mutationObserverPatch.patchClass('MutationObserver');
	  mutationObserverPatch.patchClass('WebKitMutationObserver');
	
	  definePropertyPatch.apply();
	
	  registerElementPatch.apply();
	
	  geolocationPatch.apply();
	}
	
	module.exports = {
	  apply: apply
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var utils = __webpack_require__(29);
	
	function apply() {
	  // patched properties depend on addEventListener, so this needs to come first
	  if (global.EventTarget) {
	    utils.patchEventTargetMethods(global.EventTarget.prototype);
	
	  // Note: EventTarget is not available in all browsers,
	  // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	  } else {
	    var apis = [ 'ApplicationCache',
	      'EventSource',
	      'FileReader',
	      'InputMethodContext',
	      'MediaController',
	      'MessagePort',
	      'Node',
	      'Performance',
	      'SVGElementInstance',
	      'SharedWorker',
	      'TextTrack',
	      'TextTrackCue',
	      'TextTrackList',
	      'WebKitNamedFlow',
	      'Window',
	      'Worker',
	      'WorkerGlobalScope',
	      'XMLHttpRequest',
	      'XMLHttpRequestEventTarget',
	      'XMLHttpRequestUpload'
	    ];
	
	    apis.forEach(function(thing) {
	      global[thing] && utils.patchEventTargetMethods(global[thing].prototype);
	    });
	  }
	}
	
	module.exports = {
	  apply: apply
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var utils = __webpack_require__(29);
	
	function patchSetClearFunction(obj, fnNames) {
	  fnNames.map(function (name) {
	    return name[0].toUpperCase() + name.substr(1);
	  }).forEach(function (name) {
	    var setName = 'set' + name;
	    var delegate = obj[setName];
	
	    if (delegate) {
	      var clearName = 'clear' + name;
	      var ids = {};
	
	      var bindArgs = setName === 'setInterval' ? utils.bindArguments : utils.bindArgumentsOnce;
	
	      global.zone[setName] = function (fn) {
	        var id, fnRef = fn;
	        arguments[0] = function () {
	          delete ids[id];
	          return fnRef.apply(this, arguments);
	        };
	        var args = bindArgs(arguments);
	        id = delegate.apply(obj, args);
	        ids[id] = true;
	        return id;
	      };
	
	      obj[setName] = function () {
	        return global.zone[setName].apply(this, arguments);
	      };
	
	      var clearDelegate = obj[clearName];
	
	      global.zone[clearName] = function (id) {
	        if (ids[id]) {
	          delete ids[id];
	          global.zone.dequeueTask();
	        }
	        return clearDelegate.apply(this, arguments);
	      };
	
	      obj[clearName] = function () {
	        return global.zone[clearName].apply(this, arguments);
	      };
	    }
	  });
	};
	
	function patchSetFunction(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	
	    if (delegate) {
	      global.zone[name] = function (fn) {
	        var fnRef = fn;
	        arguments[0] = function () {
	          return fnRef.apply(this, arguments);
	        };
	        var args = utils.bindArgumentsOnce(arguments);
	        return delegate.apply(obj, args);
	      };
	
	      obj[name] = function () {
	        return zone[name].apply(this, arguments);
	      };
	    }
	  });
	};
	
	function patchFunction(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    global.zone[name] = function () {
	      return delegate.apply(obj, arguments);
	    };
	
	    obj[name] = function () {
	      return global.zone[name].apply(this, arguments);
	    };
	  });
	};
	
	
	module.exports = {
	  patchSetClearFunction: patchSetClearFunction,
	  patchSetFunction: patchSetFunction,
	  patchFunction: patchFunction
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var utils = __webpack_require__(29);
	
	function apply() {
	  if (global.navigator && global.navigator.geolocation) {
	    utils.patchPrototype(global.navigator.geolocation, [
	      'getCurrentPosition',
	      'watchPosition'
	    ]);
	  }
	}
	
	module.exports = {
	  apply: apply
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 265 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// wrap some native API on `window`
	function patchClass(className) {
	  var OriginalClass = global[className];
	  if (!OriginalClass) return;
	
	  global[className] = function (fn) {
	    this._o = new OriginalClass(global.zone.bind(fn, true));
	    // Remember where the class was instantiate to execute the enqueueTask and dequeueTask hooks
	    this._creationZone = global.zone;
	  };
	
	  var instance = new OriginalClass(function () {});
	
	  global[className].prototype.disconnect = function () {
	    var result = this._o.disconnect.apply(this._o, arguments);
	    if (this._active) {
	      this._creationZone.dequeueTask();
	      this._active = false;
	    }
	    return result;
	  };
	
	  global[className].prototype.observe = function () {
	    if (!this._active) {
	      this._creationZone.enqueueTask();
	      this._active = true;
	    }
	    return this._o.observe.apply(this._o, arguments);
	  };
	
	  var prop;
	  for (prop in instance) {
	    (function (prop) {
	      if (typeof global[className].prototype !== undefined) {
	        return;
	      }
	      if (typeof instance[prop] === 'function') {
	        global[className].prototype[prop] = function () {
	          return this._o[prop].apply(this._o, arguments);
	        };
	      } else {
	        Object.defineProperty(global[className].prototype, prop, {
	          set: function (fn) {
	            if (typeof fn === 'function') {
	              this._o[prop] = global.zone.bind(fn);
	            } else {
	              this._o[prop] = fn;
	            }
	          },
	          get: function () {
	            return this._o[prop];
	          }
	        });
	      }
	    }(prop));
	  }
	};
	
	module.exports = {
	  patchClass: patchClass
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var webSocketPatch = __webpack_require__(161);
	var utils = __webpack_require__(29);
	
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');
	
	function apply() {
	  if (canPatchViaPropertyDescriptor()) {
	    // for browsers that we can patch the descriptor:  Chrome & Firefox
	    var onEventNames = eventNames.map(function (property) {
	      return 'on' + property;
	    });
	    utils.patchProperties(HTMLElement.prototype, onEventNames);
	    utils.patchProperties(XMLHttpRequest.prototype);
	    if (typeof WebSocket !== 'undefined') {
	      utils.patchProperties(WebSocket.prototype);
	    }
	  } else {
	    // Safari
	    patchViaCapturingAllTheEvents();
	    utils.patchClass('XMLHttpRequest');
	    webSocketPatch.apply();
	  }
	}
	
	function canPatchViaPropertyDescriptor() {
	  if (!Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
	    // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	    // IDL interface attributes are not configurable
	    var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	    if (desc && !desc.configurable) return false;
	  }
	
	  Object.defineProperty(HTMLElement.prototype, 'onclick', {
	    get: function () {
	      return true;
	    }
	  });
	  var elt = document.createElement('div');
	  var result = !!elt.onclick;
	  Object.defineProperty(HTMLElement.prototype, 'onclick', {});
	  return result;
	};
	
	// Whenever any event fires, we check the event target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	  eventNames.forEach(function (property) {
	    var onproperty = 'on' + property;
	    document.addEventListener(property, function (event) {
	      var elt = event.target, bound;
	      while (elt) {
	        if (elt[onproperty] && !elt[onproperty]._unbound) {
	          bound = global.zone.bind(elt[onproperty]);
	          bound._unbound = elt[onproperty];
	          elt[onproperty] = bound;
	        }
	        elt = elt.parentElement;
	      }
	    }, true);
	  });
	};
	
	module.exports = {
	  apply: apply
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var _redefineProperty = __webpack_require__(159)._redefineProperty;
	
	function apply() {
	  if (!('registerElement' in global.document)) {
	    return;
	  }
	
	  var _registerElement = document.registerElement;
	  var callbacks = [
	    'createdCallback',
	    'attachedCallback',
	    'detachedCallback',
	    'attributeChangedCallback'
	  ];
	
	  document.registerElement = function (name, opts) {
	    if (opts && opts.prototype) {
	      callbacks.forEach(function (callback) {
	        if (opts.prototype.hasOwnProperty(callback)) {
	          var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	          if (descriptor.value) {
	            descriptor.value = global.zone.bind(descriptor.value);
	            _redefineProperty(opts.prototype, callback, descriptor);
	          } else {
	            opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
	          }
	        } else if (opts.prototype[callback]) {
	          opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
	        }
	      });
	    }
	
	    return _registerElement.apply(document, [name, opts]);
	  };
	}
	
	module.exports = {
	  apply: apply
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var core = __webpack_require__(260);
	var browserPatch = __webpack_require__(261);
	
	global.zone = new core.Zone();
	
	module.exports = {
	  Zone: core.Zone,
	  zone: global.zone
	};
	
	browserPatch.apply();
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 269 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ }
]);
//# sourceMappingURL=angular2.js.map